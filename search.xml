<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring框架知识点汇总</title>
    <url>/2020/09/03/Spring%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-简述-IOC-和-DI"><a href="#1-简述-IOC-和-DI" class="headerlink" title="1. 简述 IOC 和 DI"></a>1. 简述 IOC 和 DI</h3><p>IOC（控制反转），是一种设计原则，主要用于解耦组件之间的依赖。由之前的主动请求资源变成被动接受资源。DI（依赖注入）是一种具体的设计模式，体现了 IOC 原则。</p>
<a id="more"></a>

<h3 id="2-IOC-的小例子（PPT-上的报表生成服务）"><a href="#2-IOC-的小例子（PPT-上的报表生成服务）" class="headerlink" title="2. IOC 的小例子（PPT 上的报表生成服务）"></a>2. IOC 的小例子（PPT 上的报表生成服务）</h3><h3 id="3-依赖注入的实现"><a href="#3-依赖注入的实现" class="headerlink" title="3. 依赖注入的实现"></a>3. 依赖注入的实现</h3><ul>
<li><p>接口注入</p>
</li>
<li><p>setter 注入</p>
<p>有可能忘记注入，会抛出空指针</p>
<p>代码安全有可能存在问题，依赖会被修改</p>
</li>
<li><p>构造器注入</p>
<p>可避免setter注入的一些缺点</p>
<p>没有含义明确的方法名，对参数位置与数量有要求</p>
</li>
</ul>
<h3 id="4-Spring-框架创始人：Rod-Johnson"><a href="#4-Spring-框架创始人：Rod-Johnson" class="headerlink" title="4. Spring 框架创始人：Rod Johnson"></a>4. Spring 框架创始人：Rod Johnson</h3><p>Spring 框架实现了 IOC 容器，所有的 Bean 对象均由 IOC 容器进行管理和组装</p>
<h3 id="5-配置元数据的方式"><a href="#5-配置元数据的方式" class="headerlink" title="5. 配置元数据的方式"></a>5. 配置元数据的方式</h3><ul>
<li>基于 xml 方式</li>
<li>基注解的配置</li>
<li>基于 Java 的配置</li>
</ul>
<h2 id="第二章-Bean-对象的生命周期"><a href="#第二章-Bean-对象的生命周期" class="headerlink" title="第二章 Bean 对象的生命周期"></a>第二章 Bean 对象的生命周期</h2><h3 id="Spring-IOC-容器概述"><a href="#Spring-IOC-容器概述" class="headerlink" title="Spring IOC 容器概述"></a>Spring IOC 容器概述</h3><p>Spring 容器体现了 IOC（控制反转）原理，Spring 容器通过读取配置元数据负责对 Beans 实例化、配置和装配。常用的配置元数据的方式有 Java 注解、Java 代码方式、xml 方式三种。</p>
<h4 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h4><p>BeanFactory 提供了一个先进的配置机制能够管理任何类型的对象。负责对 Bean 对象的实例化、装配和生命周期的管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建该工厂需要传入一个 Resource 实例，例如 ClassPathResource 或者 FileSystemResource 等</span></span><br><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"beans.xml"</span>));</span><br><span class="line"></span><br><span class="line">MyBean bean = (MyBean)factory.getBean(<span class="string">"myBean"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-ApplicationContext-及和-BeanFactory-的区别"><a href="#2-ApplicationContext-及和-BeanFactory-的区别" class="headerlink" title="2. ApplicationContext 及和 BeanFactory 的区别"></a>2. ApplicationContext 及和 BeanFactory 的区别</h4><ul>
<li>ApplicationContext 是 BeanFactory 的一个子接口，同时也是它的一个完整的超集。</li>
<li>BeanFactory 提供了配置框架和基本功能，ApplicationContext 则添加了更多的企业特定功能。</li>
<li>实例Bean的载入方式不同：<ul>
<li>BeanFactory 延迟载入所有 Bean，直到 getBean() 方法调用时才被创建</li>
<li>ApplicationContext 启动后载入所有单实例 Bean。通过预载入单实例 Bean，确保当需要时可以使用</li>
</ul>
</li>
</ul>
<h3 id="Bean-概述"><a href="#Bean-概述" class="headerlink" title="Bean 概述"></a>Bean 概述</h3><h4 id="1-Bean-的实例化方式"><a href="#1-Bean-的实例化方式" class="headerlink" title="1. Bean 的实例化方式"></a>1. Bean 的实例化方式</h4><ul>
<li>通过构造方法实例化</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最基本的通过构造方法的实例化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"intelCpu"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"computer"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.Computer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cpu"</span> <span class="attr">ref</span>=<span class="string">"intelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用静态工厂方法实例化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Cpu cpu;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(Cpu cpu)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">		cpu.run();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Computer <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Computer();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过静态工厂的实例化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"intelCpu"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"computer"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.Computer"</span> <span class="attr">factory-method</span>=<span class="string">"createInstance"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cpu"</span> <span class="attr">ref</span>=<span class="string">"intelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>factory-method 指明工厂方法</p>
</blockquote>
<ul>
<li>使用实例工厂方法实例化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Computer <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Computer();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过实例化工厂实例化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"intelCpu"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 先配置工厂 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factoryBean"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.FactoryBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 直接指定工厂 bean 的  id 和 指定的方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"computer"</span> <span class="attr">factory-bean</span>=<span class="string">"factoryBean"</span> <span class="attr">factory-method</span>=<span class="string">"createInstance"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cpu"</span> <span class="attr">ref</span>=<span class="string">"intelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>factory-bean：指明工厂 Bean</p>
<p>factory-method：指明工厂方法</p>
</blockquote>
<h4 id="2-Bean-的生命周期"><a href="#2-Bean-的生命周期" class="headerlink" title="2. Bean 的生命周期"></a>2. Bean 的生命周期</h4><table>
<thead>
<tr>
<th>步   骤</th>
<th>说   明</th>
</tr>
</thead>
<tbody><tr>
<td>1.实例化</td>
<td>Spring实例化Bean</td>
</tr>
<tr>
<td>2.设置属性</td>
<td>Spring注入Bean的属性</td>
</tr>
<tr>
<td>3.设置Bean名称，Bean工厂，应用上下文</td>
<td>如果Bean实现了*Aware接口，执行对应方法</td>
</tr>
<tr>
<td>4.预处理(在初始化之前)</td>
<td>调用BeanPostProcessor对象的postProcessBeforeInitialization()方法</td>
</tr>
<tr>
<td>5.初始化Bean</td>
<td>实现InitializingBean接口的afterPropertiesSet()方法   声明了初始化方法，将调用声明的</td>
</tr>
<tr>
<td>6.预处理(在初始化之后)</td>
<td>调用BeanPostProcessor对象的postProcessAfterInitialization()方法【项目中使用过，配置自动初始化字典树的时候】</td>
</tr>
<tr>
<td>7.Bean已经准备好</td>
<td>默认以单例的形式存在Spring容器中</td>
</tr>
<tr>
<td>8.销毁Bean</td>
<td>实现DisposableBean接口的destroy()方法   声明了销毁方法，将调用声明的</td>
</tr>
</tbody></table>
<h4 id="3-实现-Aware-接口"><a href="#3-实现-Aware-接口" class="headerlink" title="3. 实现 *Aware 接口"></a>3. 实现 *Aware 接口</h4><p>在Bean的初始化中使用Spring框架自身的一些对象来执行一些操作</p>
<h4 id="4-Bean-的作用域"><a href="#4-Bean-的作用域" class="headerlink" title="4. Bean 的作用域"></a>4. Bean 的作用域</h4><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903153307.png" alt="1598630545613"></p>
<h3 id="Bean-的依赖注入"><a href="#Bean-的依赖注入" class="headerlink" title="Bean 的依赖注入"></a>Bean 的依赖注入</h3><p>主要的注入方式 <strong>setter 方法注入</strong>和构造器注入。</p>
<h4 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1. 构造器注入"></a>1. 构造器注入</h4><p>通过调用带参数的构造器来实现，每个参数代表着一个依赖关系。构造器参数通过<strong>参数类型</strong>进行匹配。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"intelCpu"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"computer"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.Computer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"intelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们还可以使用type属性指定构造参数的类型</p>
<p>我们还可以使用index属性指定构造参数的索引</p>
<p>我们还可以使用name属性制定构造参数的名字</p>
</blockquote>
<h4 id="2-setter-注入"><a href="#2-setter-注入" class="headerlink" title="2. setter 注入"></a>2. setter 注入</h4><p>在调用了无参构造方法或者无参静态工厂方法实例化bean之后，容器通过回调bean的setter方法可以完成依赖注入。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"intelCpu"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"computer"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.Computer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cpu"</span> <span class="attr">ref</span>=<span class="string">"intelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>基本数据类型的注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">value</span>=<span class="string">"xxx"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>空值注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;<span class="name">null</span> /&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注入引用类数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">ref</span>=<span class="string">"xxxBean"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>注入集合类型数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// list</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“xxx”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">“aa”</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// set</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“xxx”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">“aa”</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// map</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“xxx”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">“a”</span> <span class="attr">value-ref</span>=<span class="string">“aa”</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-高级注入"><a href="#3-高级注入" class="headerlink" title="3. 高级注入"></a>3. 高级注入</h4><p>Spring容器可以自动装配相互协作bean的关联关系。</p>
<p>优点：</p>
<ul>
<li><p>自动装配可以显著得减少指定属性或者构造器参数的需求</p>
</li>
<li><p>当对象发生变化时自动装配可以更新配置而不需要修改配置</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>Property和constructor-arg显示的依赖设置会覆盖自动装配（故意而为）</p>
</li>
<li><p>自动装配没有显示编写精确</p>
</li>
<li><p>在容器中可能存在多个bean的定义与自动装配的setter方法或者构造方法参数匹配，若bean定义不唯一，装配时会抛异常</p>
</li>
</ul>
<h2 id="第三章-数据验证和-Spring-EL"><a href="#第三章-数据验证和-Spring-EL" class="headerlink" title="第三章 数据验证和 Spring EL"></a>第三章 数据验证和 Spring EL</h2><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>Spring 提供了 validator 接口，有两个方法 supports 和 validate。supports 负责检查该 validator 是否可以校验指定的类，validate 校验给定的对象，如果有校验失败信息，将其放入Errors对象</p>
<h3 id="Spring-EL-简介"><a href="#Spring-EL-简介" class="headerlink" title="Spring EL 简介"></a>Spring EL 简介</h3><p>Spring表达式语言（简称SpEL）是一个支持查询和操作运行时对象导航图功能的强大的表达式语言。最出色的就是函数调用和简单字符串的模板函数。不直接依赖于Spring,可独立使用</p>
<h4 id="1-ExpressionParser"><a href="#1-ExpressionParser" class="headerlink" title="1. ExpressionParser"></a>1. ExpressionParser</h4><p>负责解析表达式字符串</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903153418.png" alt="1598665799438"></p>
<h4 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h4><p>SpEL表达式可以与XML或基于注解的配置元数据使用定义，定义表达式的语法形式：#{&lt;表达式字符串&gt;}</p>
<p>基于 xml 的例子：</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903153228.png" alt></p>
<h4 id="3-高级用法"><a href="#3-高级用法" class="headerlink" title="3. 高级用法"></a>3. 高级用法</h4><ul>
<li><p>调用对象方法</p>
</li>
<li><p>调用对象构造函数</p>
</li>
<li><p>操作符</p>
</li>
<li><p>集合</p>
<blockquote>
<p>.?[] : 设置筛选条件</p>
<p>.^[] : 获取第一个匹配项</p>
<p>.$[] : 获取最后一个匹配项</p>
<p>.![] : 选择特定属性</p>
</blockquote>
</li>
</ul>
<h2 id="第四章-AOP"><a href="#第四章-AOP" class="headerlink" title="第四章 AOP"></a>第四章 AOP</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>常用的 23 种设计模式之一。使用代理模式创建代理对象，让代理对象控制目标对象的访问，并且可以在不改变目标对象的情况下添加一些额外的功能。分为静态代理和动态代理。</p>
<p>问题：在实现登录注册的同时实现记录日志的功能。</p>
<h4 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h4><p>代理对象与被代理对象必须实现同一个接口，在代理对象中实现日志等服务。调用的时候直接调用代理类相应的方法。</p>
<p>存在的问题：</p>
<ul>
<li>代理对象的一个接口只服务于一种类型的对象</li>
<li>如果要代理的方法很多，要为每种方法进行代理。如果程序较大静态代理不方便。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> UserService us;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUs</span><span class="params">(UserService us)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.us = us;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"记录日志"</span>);</span><br><span class="line">		us.login(userName, password);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (userName.equals(<span class="string">"mysterious"</span>) &amp;&amp; password.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"success"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"fail"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">UserProxy us = <span class="keyword">new</span> UserProxy();</span><br><span class="line">us.setUs(<span class="keyword">new</span> UserServiceImpl());</span><br><span class="line">us.login(<span class="string">"mysterious"</span>, <span class="string">"123"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2. 动态代理"></a>2. 动态代理</h4><ul>
<li>实现 InvocationHandler 接口</li>
<li>关键：使用Proxy.newProxyInstance()静态方法建立一个代理对象(建立代理对象必须告知要代理的接口)</li>
<li>操作代理对象时会执行invoke()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object delegate;</span><br><span class="line">	<span class="comment">// 通过被代理类实例返回代理对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object delegate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">		<span class="keyword">return</span> Proxy.newProxyInstance(delegate.getClass().getClassLoader(), delegate.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行代理类方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"记录日志"</span>);</span><br><span class="line">		method.invoke(delegate, args);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (userName.equals(<span class="string">"mysterious"</span>) &amp;&amp; password.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"success"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"fail"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">LoggerHandler loggerHandler = <span class="keyword">new</span> LoggerHandler();</span><br><span class="line">UserService userService = (UserService)loggerHandler.bind(<span class="keyword">new</span> UserServiceImpl());</span><br><span class="line">userService.login(<span class="string">"mysterious"</span>, <span class="string">"123"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="AOP-概述"><a href="#AOP-概述" class="headerlink" title="AOP 概述"></a>AOP 概述</h3><p>AOP(面向切面编程)，提供了一种新的组织程序结构的思路，是对OOP的补充，而不是替代，经常和OOP一起使用，OOP的核心单位是类，而AOP则是切面。可以使开发人员更集中关注系统的核心业务逻辑。提高了代码的复用性和可扩展性。</p>
<h4 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1. 相关概念"></a>1. 相关概念</h4><ul>
<li>关注点：一个特定的问题或者程序的功能。例如记录日志</li>
<li>切面：关注点的模块化</li>
<li>连接点：程序执行中的某个点，例如方法等</li>
<li>通知：在特定的连接点应该执行的动作</li>
<li>切入点：定义在哪些连接点使用通知</li>
<li>目标对象：被切面所通知的对象</li>
<li>织入：将切面应用到对象，从而创建新的代理对象的过程。</li>
</ul>
<h4 id="2-通知类型"><a href="#2-通知类型" class="headerlink" title="2. 通知类型"></a>2. 通知类型</h4><ul>
<li>前置通知：Before</li>
<li>后置通知：After</li>
<li>返回通知：AfterReturning</li>
<li>异常通知：AfterThrowing</li>
<li>环绕通知：Around</li>
</ul>
<p>执行顺序：前置、环绕前、环绕后、后置、返回</p>
<h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><h4 id="1-三种实现方式"><a href="#1-三种实现方式" class="headerlink" title="1. 三种实现方式"></a>1. 三种实现方式</h4><ul>
<li>Spring API</li>
<li>POJO 类</li>
<li>AspectJ 切面</li>
</ul>
<h4 id="2-Spring-API-方式"><a href="#2-Spring-API-方式" class="headerlink" title="2. Spring API 方式"></a>2. Spring API 方式</h4><p>步骤：</p>
<ul>
<li>编写通知</li>
<li>编写切点</li>
<li>Spring 自动创建代理对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不同的通知实现不同的接口</span></span><br><span class="line"><span class="comment">// 以返回通知为例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnAdvice</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* (非 Javadoc)</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Title: afterReturning&lt;/p&gt;</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment">	 * @param arg0 方法的返回值类型</span></span><br><span class="line"><span class="comment">	 * @param arg1 扩展的方法</span></span><br><span class="line"><span class="comment">	 * @param arg2 扩展方法参数</span></span><br><span class="line"><span class="comment">	 * @param arg3 扩展对象【目标对象】</span></span><br><span class="line"><span class="comment">	 * @throws Throwable</span></span><br><span class="line"><span class="comment">	 * @see org.springframework.aop.AfterReturningAdvice#afterReturning(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], java.lang.Object)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object arg0, Method arg1, Object[] arg2, Object arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"返回通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置代理工厂 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置实体 Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.aop.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ReturnAdvice"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.advice.ReturnAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置代理工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ProxyFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.mysterious.aop.UserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BeforeAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ReturnAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AroundAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-POJO-方式-基于-xml"><a href="#3-POJO-方式-基于-xml" class="headerlink" title="3. POJO 方式 - 基于 xml"></a>3. POJO 方式 - 基于 xml</h4><p>优点：</p>
<ul>
<li>不需要实现特定的接口</li>
<li>切面都集中在 xml 文件中，更加集中、清晰</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通知类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 两个参数，第二个表示返回值类型</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"返回通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 注意存在返回值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知前"</span>);</span><br><span class="line">		<span class="comment">// 获得切点的参数</span></span><br><span class="line">		Object[] args = joinPoint.getArgs();</span><br><span class="line">		Object result = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">// 调用原方法</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			result = joinPoint.proceed();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知后"</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 注意参数名称</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thorwException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置业务逻辑 Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.aop.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"MyAdvice"</span> <span class="attr">class</span>=<span class="string">"com.mysterious.advice.MyAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- aop 方式配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"MyAspect"</span> <span class="attr">ref</span>=<span class="string">"MyAdvice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意 returning 属性必须和通知方法中的第二个参数的名字一样 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- throwing 属性也必须和通知方法中的参数的名字一样  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"thorwException"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.mysterious.aop.*.*(..))"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-POJO-方式-基于注解"><a href="#4-POJO-方式-基于注解" class="headerlink" title="4. POJO 方式 - 基于注解"></a>4. POJO 方式 - 基于注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 两个参数，第二个表示返回值类型</span></span><br><span class="line">	<span class="meta">@AfterReturning</span>(pointcut=<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span>,returning=<span class="string">"result"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"返回通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@After</span>(<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 注意存在返回值</span></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"execution(* com.mysterious.aop.*.* (..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知前"</span>);</span><br><span class="line">		<span class="comment">// 获得切点的参数</span></span><br><span class="line">		Object[] args = joinPoint.getArgs();</span><br><span class="line">		Object result = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">// 调用原方法</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			result = joinPoint.proceed();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知后"</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@AfterThrowing</span>(pointcut=<span class="string">"execution(* com.mysterious.aop.*.*(..))"</span>,throwing=<span class="string">"ex"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thorwException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启 xml 配置方式  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注解扫描 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在指定的 package下扫描以及注册 javabean 【具备 &lt;context:annotation-config /&gt; 的功能】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.mysterious"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第五章-Spring-MVC"><a href="#第五章-Spring-MVC" class="headerlink" title="第五章 Spring MVC"></a>第五章 Spring MVC</h2><h3 id="1-Spring-MVC-概述"><a href="#1-Spring-MVC-概述" class="headerlink" title="1. Spring MVC 概述"></a>1. Spring MVC 概述</h3><h4 id="1-1-Spring-MVC-简介"><a href="#1-1-Spring-MVC-简介" class="headerlink" title="1.1 Spring MVC 简介"></a>1.1 Spring MVC 简介</h4><p>是一个基于请求驱动的，围绕一个核心Servlet转发请求到对应的Controller而设计的。</p>
<p>优点：</p>
<ul>
<li>典型的 MVC 框架，易学易用</li>
<li>清晰的角色划分</li>
<li>可重用的业务代码</li>
<li>可定制的数据绑定和验证，可定制的视图解决方案</li>
<li>提供了一套强大又使用简单的标签库</li>
</ul>
<h4 id="1-2-Spring-MVC-体系结构"><a href="#1-2-Spring-MVC-体系结构" class="headerlink" title="1.2 Spring MVC 体系结构"></a>1.2 Spring MVC 体系结构</h4><p>1、客户端发出请求，交给DispatcherServlet处理</p>
<p>2、DispatcherServlet根据请求信息及HandlerMapping的配置找到处理请求的处理器（Handler）</p>
<p>3、DispatcherServlet通过HandlerAdapter对Handler进行封装，再以统一的适配器接口调用Handler</p>
<p>4、处理器完成业务逻辑，返回一个ModelAndVIew给DispatcherServlet，ModelAndView包含视图逻辑名和模型数据信息</p>
<p>5、DispatcherServlet借由ViewResolver完成逻辑视图名到真实视图的解析工作</p>
<p>6、得到View真实视图后，DispatcherServlet就使用这个View对象对ModelAndView中的模型数据进行渲染</p>
<p>7、最终客户得到响应</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903153104.png" alt="1598755721322"></p>
<h3 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2. 控制器"></a>2. 控制器</h3><h4 id="2-1-DispatcherServlet"><a href="#2-1-DispatcherServlet" class="headerlink" title="2.1 DispatcherServlet"></a>2.1 DispatcherServlet</h4><p>DispatcherServlet继承自HttpServlet，是整个SpringMVC中的前端控制器，主要负责流程控制。</p>
<h4 id="2-2-在-DispatcherServlet-中的执行过程"><a href="#2-2-在-DispatcherServlet-中的执行过程" class="headerlink" title="2.2 在 DispatcherServlet 中的执行过程"></a>2.2 在 DispatcherServlet 中的执行过程</h4><ul>
<li><p>寻找 WebApplicationContext，并将 WebApplicationContext作为一个属性绑定到请求里，以便控制器或其他原件在后续中使用。</p>
</li>
<li><p>将本地化解析器绑定到请求里，以便在处理这个请求时，原件可以解析到客户端的地区（为了渲染视图，准备日期等）</p>
</li>
<li><p>将主题解析其绑定到请求里，让原件（如视图）决定去使用哪一种主题</p>
</li>
<li><p>若指定一个multipart file解析器，会检查这个请求包含multiparts请求</p>
</li>
<li><p>寻找合适的 handler。如何找到这个 handler，执行与这个 handler 关联的执行链</p>
</li>
<li><p>如果返回一个 model，渲染相对应的视图</p>
</li>
</ul>
<h4 id="2-3-配置-DispatcherServlet"><a href="#2-3-配置-DispatcherServlet" class="headerlink" title="2.3 配置 DispatcherServlet"></a>2.3 配置 DispatcherServlet</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml 中配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置上下文参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath*:/applicationContext.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一个监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DispatcherServlet 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-Controller-控制器类"><a href="#2-4-Controller-控制器类" class="headerlink" title="2.4 Controller 控制器类"></a>2.4 Controller 控制器类</h4><p><strong>@Controller</strong></p>
<p><strong>@RequestMapping</strong></p>
<ul>
<li>各种参数绑定方法</li>
</ul>
<p><strong>@RequestParam</strong></p>
<ul>
<li>请求参数绑定到方法</li>
</ul>
<p><strong>@ResponseBody</strong></p>
<ul>
<li>此注解用在方法上，用来表示直接将返回数据写到HTTP响应体里</li>
</ul>
<p>@PathVariable</p>
<ul>
<li>参数绑定在路径中</li>
</ul>
<p>@MatrixVariable</p>
<ul>
<li>矩阵变量</li>
</ul>
<p>@CookieValue</p>
<ul>
<li>注解允许将方法参数与HTTPcookie 值绑定</li>
</ul>
<p>@RequestHeader </p>
<ul>
<li>映射请求头字段属性</li>
</ul>
<h3 id="3-拦截器"><a href="#3-拦截器" class="headerlink" title="3. 拦截器"></a>3. 拦截器</h3><h4 id="3-1-拦截器使用"><a href="#3-1-拦截器使用" class="headerlink" title="3.1 拦截器使用"></a>3.1 拦截器使用</h4><pre><code>/*
* 拦截器的使用
* 一、创建实现了 HandlerInterceptor 接口的 Java 类，实现相应的方法
*     preHandle：执行访问资源之前执行的方法，该方法的返回值为 Boolean 类型，如果返回值为 true，表示放行
*             接着执行后边的单元方法，如果返回值为 false，拦截，不继续执行
*     postHandle：第二个要执行的方法
*     afterCompletion：第三个最后要执的方法
* 
* 二、在 springmvc.xml 文件中配置拦截器
    &lt;mvc:interceptors&gt;
        &lt;!-- 配置全局的拦截器 ,拦截所有的单元方法--&gt;
        &lt;!-- &lt;bean id=&quot;myq&quot; class=&quot;com.mysterious.interceptor.MyInterceptor&quot;&gt;&lt;/bean&gt;  --&gt;

        &lt;!-- 配置指定的拦截器，拦截指定的单元方法 --&gt;
        &lt;mvc:interceptor&gt;
            &lt;mvc:mapping path=&quot;/demo&quot;/&gt;
            &lt;bean id=&quot;myj&quot; class=&quot;com.mysterious.interceptor.MyInterceptor&quot;&gt;&lt;/bean&gt;
        &lt;/mvc:interceptor&gt;        
    &lt;/mvc:interceptors&gt;
* 三、使用单拦截器时的执行顺序
*     DispatcherServlet --&gt;拦截器 ---&gt; preHandle ---&gt; 单元方法 ---&gt; 拦截器 ---&gt; postHandle ---&gt; afterCompletion
* 四、支持多重的拦截器：
*     配置在前边的拦截器为外层拦截器，配置在后边的拦截器为内层拦截器，执行顺序为：
*         外层 preHandle，内层的 preHandle，
*         单元方法
*         内层的 postHandle，外层的 postHandle
*         内层的 afterCompletion，外层的 afterCompletion
*/</code></pre><h4 id="3-2-实现"><a href="#3-2-实现" class="headerlink" title="3.2 实现"></a>3.2 实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">	<span class="comment">//依赖注入</span></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> MyCon myCon;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"3-----"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * request：请求对象</span></span><br><span class="line"><span class="comment">	 * response：响应对象</span></span><br><span class="line"><span class="comment">	 * handler：HandlerMethod 对象，封装了要请求的单元方法对象以实现在 preHandle 方法中可以调用一次单元方法，</span></span><br><span class="line"><span class="comment">	 * modelAndView：单元方法的返回值对象，可以根据需要重新设置返回值的内容，跳到指定的 jsp 页面</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">			ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//		modelAndView.setViewName("forward:/jsp/error.jsp");</span></span><br><span class="line"><span class="comment">//		System.out.println(modelAndView.getViewName());</span></span><br><span class="line">		System.out.println(<span class="string">"2-----"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * request：请求对象</span></span><br><span class="line"><span class="comment">	 * response：响应对象</span></span><br><span class="line"><span class="comment">	 * handler：HandlerMethod 对象，封装了要请求的单元方法对象以实现在 preHandle 方法中可以调用一次单元方法，</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//		HandlerMethod hm = (HandlerMethod)handler;</span></span><br><span class="line"><span class="comment">//		hm.getMethod().invoke(myCon, "zs", "123");</span></span><br><span class="line">		System.out.println(<span class="string">"1-----"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-文件上传"><a href="#4-文件上传" class="headerlink" title="4. 文件上传"></a>4. 文件上传</h3><h4 id="4-1-两种实现方式"><a href="#4-1-两种实现方式" class="headerlink" title="4.1 两种实现方式"></a>4.1 两种实现方式</h4><ul>
<li>基于 Servlet3.0</li>
<li>基于Commons FileUpload</li>
</ul>
<h4 id="4-2-文件上传实现"><a href="#4-2-文件上传实现" class="headerlink" title="4.2 文件上传实现"></a>4.2 文件上传实现</h4><p>springmvc.xml 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件上传解析 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置编码 解析格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传数据的总大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"104857600"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置单个文件的大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">myUpload</span><span class="params">(String username, String password, MultipartFile photo, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取后缀名</span></span><br><span class="line">    String suffixName = photo.getOriginalFilename().substring(photo.getOriginalFilename().lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">//动态生成文件名</span></span><br><span class="line">    String fileName = <span class="string">""</span> + UUID.randomUUID() + System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//拼接文件名</span></span><br><span class="line">    String newName = fileName + suffixName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置文件存储目录</span></span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="string">"/images"</span>);</span><br><span class="line">    File fpath = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span>(!fpath.exists()) &#123;</span><br><span class="line">        <span class="comment">//如果目录不存在，则创建</span></span><br><span class="line">        fpath.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过目录加文件名存储文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(fpath, newName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将文件存储到服务器</span></span><br><span class="line">        photo.transferTo(file);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用原始的数据库操作，将数据信息保存到数据库中，后期可以改为 Mybatis</span></span><br><span class="line">    upLoadFileService.uploadFile(<span class="number">1</span>, photo.getOriginalFilename(), newName, photo.getContentType());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-视图解析"><a href="#5-视图解析" class="headerlink" title="5. 视图解析"></a>5. 视图解析</h3><h4 id="5-1-ViewResolver-和-View"><a href="#5-1-ViewResolver-和-View" class="headerlink" title="5.1 ViewResolver 和 View"></a>5.1 ViewResolver 和 View</h4><ul>
<li><p>ViewResolver提供了视图名称和真实视图之间的映射</p>
</li>
<li><p>View 是真正进行视图渲染，把结果返回给浏览器的</p>
</li>
</ul>
<h4 id="5-2-配置视图解析器"><a href="#5-2-配置视图解析器" class="headerlink" title="5.2 配置视图解析器"></a>5.2 配置视图解析器</h4><p>InternalResourceViewResolver</p>
<ul>
<li><p>它是URLBasedViewResolver的子类</p>
</li>
<li><p>它定义了前缀、后缀，并和控制器返回的视图名称拼接在一起，并解析为视图对象</p>
</li>
<li><p>它会将模型数据存放到对应的HttpServletRequest中，然后转发到相应的页面视图</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"resourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第六章-Spring-For-JDBC-And-Transaction"><a href="#第六章-Spring-For-JDBC-And-Transaction" class="headerlink" title="第六章 Spring For JDBC And Transaction"></a>第六章 Spring For JDBC And Transaction</h2><h3 id="1-Spring-For-JDBC"><a href="#1-Spring-For-JDBC" class="headerlink" title="1. Spring For JDBC"></a>1. Spring For JDBC</h3><h4 id="1-1-Repository-注解"><a href="#1-1-Repository-注解" class="headerlink" title="1.1 @Repository 注解"></a>1.1 @Repository 注解</h4><p>用来定义一个持久化类（xxxDao.java）</p>
<h4 id="1-2-定义数据源"><a href="#1-2-定义数据源" class="headerlink" title="1.2 定义数据源"></a>1.2 定义数据源</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-JdbcTemplate-类"><a href="#1-3-JdbcTemplate-类" class="headerlink" title="1.3 JdbcTemplate 类"></a>1.3 JdbcTemplate 类</h4><p>Spring 对 JDBC 支持类库中的核心类。负责创建和释放资源，执行SQL语句、存储过程，并通过ResultSet来返回数据。</p>
<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加，修改和删除一样</span></span><br><span class="line"><span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"insert into student(id, name) values(?, ?)"</span>, <span class="keyword">null</span>, student.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回自增主键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">addStudentAndReturnKey</span><span class="params">(<span class="keyword">final</span> Student student)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">"insert into student(name) values(?)"</span>;</span><br><span class="line"></span><br><span class="line">    KeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();</span><br><span class="line">    jdbcTemplate.update(<span class="keyword">new</span> PreparedStatementCreator() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(Connection con)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            PreparedStatement pstm = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">            pstm.setString(<span class="number">1</span>, student.getName());</span><br><span class="line">            <span class="keyword">return</span> pstm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, keyHolder);</span><br><span class="line">    <span class="keyword">return</span> keyHolder.getKey().intValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量插入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudentList</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">"insert into student(name) values(?)"</span>;</span><br><span class="line"></span><br><span class="line">    jdbcTemplate.batchUpdate(sql, <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement pstm, <span class="keyword">int</span> index)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            pstm.setString(<span class="number">1</span>, students.get(index).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> students.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// sql 语句 | 参数列表 | 返回值类型</span></span><br><span class="line">String name = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> Object[] &#123;id&#125;, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 RowMapper 查询单个对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">queryStudentByRowMapper</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from student where id = ?"</span>;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> Object[] &#123;id&#125;, <span class="keyword">new</span> RowMapper&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">            stu.setName(rs.getNString(<span class="string">"name"</span>));</span><br><span class="line">            <span class="keyword">return</span> stu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 RowMapper 查询所有对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">queryAllStudentByRowMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from student"</span>;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> RowMapper&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">            stu.setName(rs.getNString(<span class="string">"name"</span>));</span><br><span class="line">            <span class="keyword">return</span> stu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>注意简单的增删改均是使用 update 方法</li>
<li>使用 keyHolder 返回自增主键</li>
<li>查询单个对象 queryForObject，查询所有对象 query</li>
</ul>
</blockquote>
<h3 id="2-对事务的支持"><a href="#2-对事务的支持" class="headerlink" title="2. 对事务的支持"></a>2. 对事务的支持</h3><h4 id="2-1-对事物的描述"><a href="#2-1-对事物的描述" class="headerlink" title="2.1 对事物的描述"></a>2.1 对事物的描述</h4><p>原子性、一致性、隔离性、持久性</p>
<h4 id="2-2-声明式事务和编程式事务"><a href="#2-2-声明式事务和编程式事务" class="headerlink" title="2.2 声明式事务和编程式事务"></a>2.2 声明式事务和编程式事务</h4><p>编程式事务管理：</p>
<ul>
<li><p>可以清楚地控制事务的边界</p>
</li>
<li><p>可自行实现事务开始时间、结束时间、撤消操作的时机等</p>
</li>
<li><p>可以实现细粒度的事务控制</p>
</li>
</ul>
<p>声明式事务管理：</p>
<ul>
<li><p>好处是事务管理的API不介入程序，最符合一个非侵入型轻量级容器的理想</p>
</li>
<li><p>多数情况下事务不需要细粒度控制，因此建议使用</p>
</li>
</ul>
<h4 id="2-3-声明式事务"><a href="#2-3-声明式事务" class="headerlink" title="2.3 声明式事务"></a>2.3 声明式事务</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用annotation定义事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 applicationContext.xml 中进行如上配置之后，直接使用 @Transactional 进行配置</p>
</blockquote>
<h2 id="第七章-对象关系映射"><a href="#第七章-对象关系映射" class="headerlink" title="第七章 对象关系映射"></a>第七章 对象关系映射</h2><h3 id="1-Spring-集成-Hibernate"><a href="#1-Spring-集成-Hibernate" class="headerlink" title="1. Spring 集成 Hibernate"></a>1. Spring 集成 Hibernate</h3><p>步骤：</p>
<ul>
<li>配置数据源 DataSource</li>
<li>配置 SessionFactory</li>
<li>编写实体 Bean、实现 Dao 类</li>
<li>添加事务</li>
<li>实现 Service、Controller</li>
</ul>
<p>各层对象注入顺序：</p>
<p>DataSource —&gt; SessionFactory —&gt; Dao —&gt; Service —&gt; Controller</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>项目管理知识点汇总</title>
    <url>/2020/09/03/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><ol>
<li><p>项目的三个约束条件：范围、时间、成本</p>
</li>
<li><p>什么不是项目：生产、运营、行政</p>
</li>
<li><p>管理：管人，管事</p>
</li>
<li><p>项目管理九大知识领域：</p>
<ol>
<li>范围、时间、成本、质量、风险</li>
<li>人力资源、沟通、采购、干系人</li>
</ol>
<a id="more"></a>
</li>
<li><p>项目管理的五个过程（五个过程做什么事情、分别是什么，，，）</p>
<p>​    <img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903191540.png" alt="image-20200903191538680"></p>
<ol>
<li><p>项目<strong>启动</strong>过程</p>
<p>任命项目经理，组建核心团队，制定里程碑计划，分析干系人利益，确定项目发起人，制定项目章程之后进行项目启动大会</p>
<p>进行项目的可行性研究与分析，应围绕明确的商业目标，以实现商业预期利润分析为重点，并要提供科学合理的评价方法，以便未来能对其进行评估</p>
</li>
<li><p>项目<strong>规划</strong>过程</p>
<p>制定一个科学的计划，能使项目团队的工作有序的开展</p>
</li>
<li><p>项目<strong>执行</strong>过程</p>
<p>​    项目的主体内容执行过程，项目信息的沟通</p>
</li>
<li><p>项目<strong>监控</strong>过程</p>
<p>及时发现偏差并采取纠正措施，使项目进展朝向目标方向</p>
</li>
<li><p>项目<strong>收尾</strong>过程</p>
<p>对当前项目产生完整文档，对项目干系人的交待</p>
</li>
</ol>
</li>
<li><p>项目经理既是领导者又是管理者</p>
</li>
</ol>
<h3 id="第二章-项目来源，论证，立项与启动"><a href="#第二章-项目来源，论证，立项与启动" class="headerlink" title="第二章 项目来源，论证，立项与启动"></a>第二章 项目来源，论证，立项与启动</h3><ol>
<li><p>过程：</p>
<ol>
<li>甲方客户提出原始需求</li>
<li>乙方深入分析后提出合理建议及解决方案</li>
<li>双方签定合同</li>
<li>乙方启动项目实现该方案</li>
</ol>
</li>
<li><p>产品构思（商业论证）做什么？</p>
<ol>
<li>用户需求（要解决的问题）</li>
<li>产品愿景（核心定位）</li>
<li>商业机会（盈利模式等）</li>
<li>用户分析（用户画像等）</li>
<li>技术可行性分析（语言、框架等）</li>
<li>资源分析（资金、设备、人力等）</li>
<li>风险分析（贯穿整个项目的风险）</li>
<li>收益分析（净现值分析）</li>
</ol>
</li>
<li><p>收益分析</p>
<ol>
<li><p>净现值分析 NPV</p>
<ol>
<li>计算折算因子：<img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903170352.png" alt="image-20200903170342462"> r是折现率，t是第几年</li>
<li>将每年收益与对应的折现因子<strong>相乘后累加</strong>，<strong>减去</strong>依此算出的成本累加，即得到NPV</li>
<li>注意：仅从财务角度看，NPV越高的方案越好</li>
</ol>
</li>
<li><p>投资回报率 ROI</p>
<ol>
<li>ROI = (折现收益总额 – 折现成本总额)/折现成本总额</li>
<li>注意：ROI越高越好</li>
</ol>
</li>
<li><p>投资回收期 Payback Period</p>
<p>回收期尽可能的短</p>
</li>
</ol>
</li>
</ol>
<ol start="4">
<li>《项目章程》确立项目经理的地位</li>
<li>《干系人登记册》识别干系人的成果</li>
<li><strong>项目发起人</strong>对项目的成功负有<strong>最终责任</strong>，解决项目经理无法控制的问题</li>
<li>三种基本的组织结构：职能型，项目型，矩阵型（弱矩阵、平衡矩阵和强矩阵）</li>
</ol>
<h3 id="第三章-项目规划——范围"><a href="#第三章-项目规划——范围" class="headerlink" title="第三章 项目规划——范围"></a>第三章 项目规划——范围</h3><ol>
<li>核实工作分解和程度是必要且充分的（100%规则）</li>
<li>构建WBS的方法：类比法，自上而下、自下而上、心智图法</li>
<li><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903173217.png" alt="image-20200903173216315" style="zoom: 80%;"></li>
<li>成果：项目经理——《项目范围说明书》    《需求文档》     架构师——《详细设计说明书》                                                         创建工作分解结构（WBS）</li>
</ol>
<h3 id="第三章-项目规划——时间"><a href="#第三章-项目规划——时间" class="headerlink" title="第三章 项目规划——时间"></a>第三章 项目规划——时间</h3><ol>
<li><p>估算持续时间</p>
<p>最可能时间(tM)最乐观时间(tO)最悲观时间(tP)  进行加权平均</p>
</li>
<li><p><strong>关键路径</strong>是指网络中活动序列，该序列具有<strong>最长的总工期</strong>，它决定了整个项目的<strong>最短完成时间</strong>；</p>
</li>
<li><p>成果：《资源需求》《项目进度计划》    </p>
</li>
</ol>
<h3 id="第三章-项目规划——成本"><a href="#第三章-项目规划——成本" class="headerlink" title="第三章 项目规划——成本"></a>第三章 项目规划——成本</h3><ol>
<li>直接成本（工资，硬件设备、材料）和间接成本（水电费，管理费）</li>
<li>估算是决策的依据，预算是花钱的计划；</li>
<li>成本主要组成包括：直接成本、间接成本、储备；</li>
<li>成果：项目成本预算（《成本绩效基准》）</li>
</ol>
<h3 id="第三章-项目规划——质量"><a href="#第三章-项目规划——质量" class="headerlink" title="第三章 项目规划——质量"></a>第三章 项目规划——质量</h3><ol>
<li>质量规划回答了“项目及项目的可交付成果做到什么程度</li>
<li>戴明与戴明环（PDCA）。P-策划(plan)，D-实施(do)，C-检查(check)，A-处置(act)</li>
<li>结果通常为：《测试计划》、《测试用例》</li>
</ol>
<h3 id="第三章-项目规划——人力资源"><a href="#第三章-项目规划——人力资源" class="headerlink" title="第三章 项目规划——人力资源"></a>第三章 项目规划——人力资源</h3><ul>
<li>IT项目的智慧密集型特征决定了应特别关注稀缺或有限人力资源的可得性，或者各<br>方面对这些资源的竞争；</li>
<li>IT项目需要各种专家，必须提前规划好团队组织结构、人员具体要求才能有目标地<br>网罗人才；</li>
<li>项目经理必须做好人才的招募、培养、使用、团结、激励等工作才能确保项目其它<br>指标的实现；</li>
<li>成果：《人力资源计划》,团队的结构、角色、职责、所需技能; <pre><code>《人员配备管理计划》,团队成员的进入、培养、奖惩、离开;</code></pre></li>
</ul>
<h3 id="第三章-项目规划——沟通"><a href="#第三章-项目规划——沟通" class="headerlink" title="第三章 项目规划——沟通"></a>第三章 项目规划——沟通</h3><ol>
<li><p>回答的是“如何与不同的干系人交流，以达到紧密有效合作的目的”，由项目经理负责</p>
</li>
<li><p>通常IT项目的团队规模控制在10人以内</p>
</li>
<li><p>项目经理大多数时间（<strong>75%以上</strong>）都用在与团队成员和其他干系人的沟通上</p>
</li>
</ol>
<h3 id="第三章-项目规划——采购"><a href="#第三章-项目规划——采购" class="headerlink" title="第三章 项目规划——采购"></a>第三章 项目规划——采购</h3><p>自制采购分析，那个成本低选择那个</p>
<img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200903175204.png" alt="image-20200903175201596" style="zoom:80%;">

<h3 id="第三章-项目规划——风险和整合"><a href="#第三章-项目规划——风险和整合" class="headerlink" title="第三章 项目规划——风险和整合"></a>第三章 项目规划——风险和整合</h3><p>风险主要的方法：文档审查、头脑风暴、访谈、核对表分析</p>
<p>成果：《风险登记册》</p>
<h3 id="第四章-项目执行与监控"><a href="#第四章-项目执行与监控" class="headerlink" title="第四章 项目执行与监控"></a>第四章 项目执行与监控</h3><p>挣值管理 EVM</p>
<ol>
<li>计划价值(PV)。截止某时点计划要完成的工作的预算价值：PV=要完成的计划工作量 × 预算单价</li>
<li>实际成本(AC)。截至某时点实际已完成工作的实际成本：AC=已完成的实际工作量×实际单价</li>
<li>挣值(EV)。截至某时点实际已完成工作的预算价值：EV=已完成的实际工作量×预算单价</li>
</ol>
<table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">名称</th>
<th>含义</th>
<th>计算公式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">成本绩效</td>
<td align="center">成本偏差CV</td>
<td>已经发 生多少成本偏差<strong>正值节值节约，负值 超支</strong></td>
<td>EV-AC</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">成本绩效指数CPI</td>
<td>实际 花费的每1元钱做了价值多少钱的事（按预算价值算），<strong>大于1好，小于1不好</strong></td>
<td>EV/AC</td>
</tr>
<tr>
<td align="center">进度绩效</td>
<td align="center">进度偏差SV</td>
<td>已经发 生多少进度偏差，<strong>正值提前，负值 落后</strong></td>
<td>EV-PV</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">进度绩效指数SPI</td>
<td>实际进 度是计划进度的百分比，<strong>大于1好，小于1不好</strong></td>
<td>EV/PV</td>
</tr>
<tr>
<td align="center">预测 指标</td>
<td align="center">完工尚需估算ETC</td>
<td>重新估算完成剩余工作还需要的成本</td>
<td>BAC-EV <br>自下而上估算</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">完工估算EAC</td>
<td><strong>重新估算完成整个项目所需要的成本</strong></td>
<td>BAC/CPI</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">完工尚需绩效指数TCPI</td>
<td>重新估算的、为了在既定的预算内完工，而必须达到的未来绩效水平</td>
<td>(BAC-EV)/(BAC-AC)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">估计完工工期EDAC</td>
<td><strong>重新估算完成整个项目的工期</strong></td>
<td>BDAC/SPI</td>
</tr>
</tbody></table>
<h3 id="第五章-项目收尾"><a href="#第五章-项目收尾" class="headerlink" title="第五章 项目收尾"></a>第五章 项目收尾</h3><p>项目经理应该带领项目团队<strong>尽量在最短的时间内</strong>完成收尾工作</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome的Software Reporter Tool长时间占用CPU解决办法</title>
    <url>/2020/07/07/Chrome%E7%9A%84Software-Reporter-Tool%E9%95%BF%E6%97%B6%E9%97%B4%E5%8D%A0%E7%94%A8CPU%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是Software-Reporter-Tool"><a href="#什么是Software-Reporter-Tool" class="headerlink" title="什么是Software Reporter Tool"></a>什么是Software Reporter Tool</h2><p>Software Reporter Tool是一个Chrome清理工具,用于清理谷歌浏览器中不必要或恶意的扩展，应用程序，劫持开始页面等等。当你安装Chrome时，Software_reporter_tool.exe也j就会被下载在SwReporter文件夹下的Chrome应用数据文件夹中。</p>
<a id="more"></a>

<h2 id="如何关闭SRT"><a href="#如何关闭SRT" class="headerlink" title="如何关闭SRT"></a>如何关闭SRT</h2><p>这个软件在运行的过程中可能会长时间地占用CPU，导致高CPU使用率。我们虽然可以通过任务管理器手动结束进程或者选择删除SRT，但这都不是长久的解决办法。因为前者过一段时间它又会再次运行，后者在浏览器更新的时候就又会重新被下载下来。要完美地解决这一个问题我们可以进入SRT目录，默认它位于以下目录</p>
<p>C:\Users[YourName]\AppData\Local\Google\Chrome\User Data\SwReporter[版本]\software_reporter_tool.exe</p>
<p>我们还可以通过<code>win+r</code>键打开运行命令窗口并输入以下命令快速找到它</p>
<p>%localappdata%\Google\Chrome\User Data\SwReporter</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200707204417.png" alt></p>
<ul>
<li>右键单击software_reporter_tool.exe选择属性</li>
<li>转到“安全”选项卡</li>
<li>点击“高级”</li>
<li>点击“禁用继承”</li>
<li>选择”从此对象中删除所有继承的权限”,之后一路点击“确定”“确定”。</li>
</ul>
]]></content>
      <categories>
        <category>业余技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>4-MyBatis动态SQL</title>
    <url>/2020/03/24/4-MyBatis%E5%8A%A8%E6%80%81SQL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MyBatis 的一个强大的特性之一就是它的动态 SQL 能力。也就是可以根据不同的条件拼接SQL语句。以下是动态SQL在XML中支持的几种元素</p>
<ol>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
<li>bind</li>
</ol>
<p>优点：使用动态SQL可以选择查询内容（即可为空），而不使用动态SQL时，只有同时输入所有条件时，才能查出正确结果</p>
<a id="more"></a>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不使用动态SQL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByNameAndPassword"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	select * from user</span><br><span class="line">	where user_name = #&#123;name&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- if实现动态查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByPhoneOrEmail"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span> select * from user where 1=1 </span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and !phone.equals('')"</span>&gt;</span> and phone = #&#123;phone&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null and email != ''"</span>&gt;</span> and email = #&#123;email&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- if+where --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByPhoneOrEmail"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span> select * from user </span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and !phone.equals('')"</span>&gt;</span> and phone = #&#123;phone&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null and email != ''"</span>&gt;</span> and email = #&#123;email&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- if实现动态更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserByIdSelective"</span>&gt;</span> update user set</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and !phone.equals('')"</span>&gt;</span> phone = #&#123;phone&#125;, <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null and email != ''"</span>&gt;</span> email = #&#123;email&#125;, <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	id = #&#123;id&#125; where id = #&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- if+set --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- set标签可以去掉末尾的逗号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserByIdSelective"</span>&gt;</span> update user </span><br><span class="line">	<span class="tag">&lt;<span class="name">set</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and !phone.equals('')"</span>&gt;</span> phone = #&#123;phone&#125;, <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null and email != ''"</span>&gt;</span> email = #&#123;email&#125;, <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span> where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- if实现动态插入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span>&gt;</span> insert into user(user_name,phone,email </span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != ''"</span>&gt;</span> ,password <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	) values(#&#123;userName&#125;,#&#123;phone&#125;,#&#123;email&#125; </span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != ''"</span>&gt;</span> ,#&#123;password&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span>)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- choose实现动态查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByPhoneOrEmail"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span> select * from user where 1=1</span><br><span class="line">	<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"phone != null and !phone.equals('')"</span>&gt;</span> and phone = #&#123;phone&#125; <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email != null and email != ''"</span>&gt;</span> and email = #&#123;email&#125; <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span> and 1 = 2 <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">choose</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：</p>
<ol>
<li>if标签是与(and)的关系，而 choose 是或(or)的关系。</li>
<li>使用choose元素可以实现类似if…else…的逻辑</li>
</ol>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ol>
<li>trim元素可以实现where和set元素的功能</li>
<li>trim元素的属性，都在trim元素包含内容时起作用：<ol>
<li>prefix：给内容增加该属性指定的前缀</li>
<li>prefixOverrides：把内容中匹配的前缀字符串去掉</li>
<li>suffix：给内容增加该属性指定的后缀</li>
<li>suffixOverrides：把内容中匹配的后缀字符串去掉如：逗号）</li>
</ol>
</li>
<li>作用：<ol>
<li>trim元素的主要功能是可以在自己包含的内容前加上某些前缀，也可以在其后加上某些后缀，与之对应的属性是prefix和suffix；</li>
<li>可以把包含内容的首部某些内容覆盖，即忽略，也可以把尾部的某些内容覆盖，对应的属性是prefixOverrides和suffixOverrides；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用trim实现where功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByPhoneOrEmail"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span> select * from user </span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and|or"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and !phone.equals('')"</span>&gt;</span> and phone = #&#123;phone&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null and email != ''"</span>&gt;</span> and email = #&#123;email&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- trim实现set功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserByIdSelective"</span>&gt;</span> update user </span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and !phone.equals('')"</span>&gt;</span> phone = #&#123;phone&#125;, <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null and email != ''"</span>&gt;</span> email = #&#123;email&#125;, <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">	where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>foreach各个属性的含义：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">collection</td>
<td align="left">必填，值为要迭代循环的属性名</td>
</tr>
<tr>
<td align="left">item</td>
<td align="left">变量名，值为从迭代对象中取出的每一个值</td>
</tr>
<tr>
<td align="left">index</td>
<td align="left">索引的属性名，在遍历集合、数组时为当前索引值，当遍历Map时该值为Map的key值</td>
</tr>
<tr>
<td align="left">open</td>
<td align="left">整个循环内容开头的字符串</td>
</tr>
<tr>
<td align="left">close</td>
<td align="left">整个循环内容结尾的字符串</td>
</tr>
<tr>
<td align="left">separator</td>
<td align="left">每次循环的分隔符</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- foreach实现批量查询 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当参数为List集合时，collection取值为list</span></span><br><span class="line"><span class="comment">	当参数为数组时，collection取值为array</span></span><br><span class="line"><span class="comment">	当参数为Map类型时，collection取值默认情况下为_parameter</span></span><br><span class="line"><span class="comment">	也可以使用@Param注解指定名字，collection取值为该注解指定的名字</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUsersByIdList"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	select * from user where id in</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">		#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- foreach实现批量插入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;insert id="insertUsers" useGeneratedKeys="true" keyProperty="id"&gt; 返回所有记录的主键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUsers"</span>&gt;</span></span><br><span class="line">	insert into user(user_name,password,phone,email)</span><br><span class="line">	values</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"user"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">		(#&#123;user.userName&#125;, #&#123;user.password&#125;,#&#123;user.phone&#125;, #&#123;user.email&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- foreach实现动态更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserByMap"</span>&gt;</span></span><br><span class="line">	update user set</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"_parameter"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">		$&#123;key&#125; = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模糊查询 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bind可以使用OGNL表达式创建一个变量并将其绑定到上下文中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserLike"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"'%' + name + '%'"</span>/&gt;</span></span><br><span class="line">	select * from user where user_name like #&#123;userName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3-MyBatis关联映射之鉴别器映射</title>
    <url>/2020/03/20/3-MyBatis%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84%E4%B9%8B%E9%89%B4%E5%88%AB%E5%99%A8%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>有时一个单独的数据库查询会返回很多种不同数据类型的结果集。discriminator鉴别器元素可以用来处理这种情况</p>
<a id="more"></a>
<p>域模型<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-20_223912.jpg" alt><br>数据库表<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-20_223935.jpg" alt></p>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>Employee.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HourlyEmployee.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HourlyEmployee</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SalariedEmployee.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalariedEmployee</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他类，文件"><a href="#其他类，文件" class="headerlink" title="其他类，文件"></a>其他类，文件</h2><p>EmployeeMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">findAllEmployee</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>EmployeeMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.onest.mapper.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.Employee"</span> <span class="attr">id</span>=<span class="string">"employeeMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--使用resultMap的extends属性来映射两个子类的属性--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.SalariedEmployee"</span> <span class="attr">id</span>=<span class="string">"SalariedMap"</span> <span class="attr">extends</span>=<span class="string">"employeeMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"salary"</span> <span class="attr">property</span>=<span class="string">"salary"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.HourlyEmployee"</span> <span class="attr">id</span>=<span class="string">"HourlyMap"</span> <span class="attr">extends</span>=<span class="string">"employeeMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rate"</span> <span class="attr">property</span>=<span class="string">"rate"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--使用discriminator元素映射employee_type字段--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	discriminator元素常用的两个属性如下：</span></span><br><span class="line"><span class="comment">		column：该属性用于设置需要进行鉴别比较值的列</span></span><br><span class="line"><span class="comment">		javaType：该属性用于指定列的类型</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.Employee"</span> <span class="attr">id</span>=<span class="string">"selectMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">column</span>=<span class="string">"employee_type"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"SE"</span> <span class="attr">resultMap</span>=<span class="string">"SalariedMap"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"HE"</span> <span class="attr">resultMap</span>=<span class="string">"HourlyMap"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllEmployee"</span> <span class="attr">resultMap</span>=<span class="string">"selectMap"</span>&gt;</span></span><br><span class="line">		select * from employee</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tset</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SqlSession session = MyBatisUtil.openSqlSession();</span><br><span class="line">		EmployeeMapper mapper = session.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		System.out.println(mapper.findAllEmployee());</span><br><span class="line">		</span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3-MyBatis关联映射之一对多映射</title>
    <url>/2020/03/20/3-MyBatis%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84%E4%B9%8B%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>购物网站中用户和订单之间的一对多关系</p>
<a id="more"></a>
<p>域模型：<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-20_222635.jpg" alt></p>
<p>数据库表：<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-20_222820.jpg" alt></p>
<h2 id="两个实体类"><a href="#两个实体类" class="headerlink" title="两个实体类"></a>两个实体类</h2><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Order.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他类，文件"><a href="#其他类，文件" class="headerlink" title="其他类，文件"></a>其他类，文件</h2><p>OrderMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OrderMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace:映射器接口的全名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.onest.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.Order"</span> <span class="attr">id</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"order_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderByUserId"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">        select * from orders where user_id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//通过用户对象的id查询用户的属性和跟用户关联的订单属性</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndOrdersById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace:映射器接口的全名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.onest.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 此映射会频繁用到，可以将其单独配置，后面可以直接通过id引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 映射select语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span>  <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">           select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 映射一对多 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--extends属性可以实现结果映射的继承--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--ofType属性指定集合中元素的类型，必选项--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一：嵌套的ResultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userAndOrdersMap"</span> <span class="attr">extends</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- collection映射集合类型  --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orders"</span> <span class="attr">ofType</span>=<span class="string">"net.onest.entity.Order"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">resultMap</span>=<span class="string">"net.onest.mapper.OrderMapper.orderMap"</span>&gt;</span></span><br><span class="line">             </span><br><span class="line">         <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndOrdersById"</span> <span class="attr">resultMap</span>=<span class="string">"userAndOrdersMap"</span>&gt;</span></span><br><span class="line">        select u.id, u.user_name, u.password, o.id order_id, o.price from user u</span><br><span class="line">        left join orders o on u.id = user_id</span><br><span class="line">        where u.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 二：嵌套查询 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;resultMap type="net.onest.entity.User" id="userAndOrdersMap" extends="userMap"&gt;</span></span><br><span class="line"><span class="comment">        &lt;collection property="orders"</span></span><br><span class="line"><span class="comment">            ofType="net.onest.entity.Order"</span></span><br><span class="line"><span class="comment">            select="net.onest.mapper.OrderMapper.findOrderByUserId"</span></span><br><span class="line"><span class="comment">            column="&#123;uid=id&#125;"</span></span><br><span class="line"><span class="comment">            fetchType="eager"&gt;&lt;/collection&gt;</span></span><br><span class="line"><span class="comment">    &lt;/resultMap&gt;</span></span><br><span class="line"><span class="comment">    &lt;select id="findUserAndOrdersById" resultMap="userAndOrdersMap"&gt;</span></span><br><span class="line"><span class="comment">        select * from user where id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tset</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SqlSession sqlSession = MyBatisUtil.openSqlSession();</span><br><span class="line">		<span class="comment">//得到了映射器接口实现类的对象</span></span><br><span class="line">		UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//		List&lt;User&gt; users =  userMapper.findAllUsers();</span></span><br><span class="line"><span class="comment">//		System.out.println(users);</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(userMapper.findUserAndOrdersById(<span class="number">1</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭session</span></span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对比两种方式"><a href="#对比两种方式" class="headerlink" title="对比两种方式"></a>对比两种方式</h2><ol>
<li>第一种方式属于“关联的嵌套结果映射“,即通过一次SQL查询根据表或指定的属性映射到不同的对象中</li>
<li>第二种方式属于“关联的嵌套查询”，利用简单的SQL语句，通过多次查询得到想要的结果，也可以实现延迟加载效果</li>
</ol>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3-MyBatis关联映射之一对一映射</title>
    <url>/2020/03/18/3-MyBatis%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84%E4%B9%8B%E4%B8%80%E5%AF%B9%E4%B8%80%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>在某网络购物系统中，一个用户只能拥有一个购物车，用户与购物车的关系可以设计为一对一关系</p>
<a id="more"></a>
<p>域模型<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200904182831.png" alt="image-20200904182823699"></p>
<p>数据库表<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/20200904182839.png" alt="image-20200904182838092"></p>
<h2 id="两个实体"><a href="#两个实体" class="headerlink" title="两个实体"></a>两个实体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> ShoppingCart shoppingCart;</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">	.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他类，文件"><a href="#其他类，文件" class="headerlink" title="其他类，文件"></a>其他类，文件</h2><p>ShoppingCartMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShoppingCartMapper</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertShoppingCart</span><span class="params">(ShoppingCart shoppingCart)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ShoppingCartMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace:映射器接口的全名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.onest.mapper.ShoppingCartMapper"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.ShoppingCart"</span> <span class="attr">id</span>=<span class="string">"shoppingCartMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cart_id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertShoppingCart"</span>&gt;</span></span><br><span class="line">		insert into shopping_cart(price,user_id) value(#&#123;price&#125;,#&#123;userId&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findShoppingCartByUserId"</span> <span class="attr">resultMap</span>=<span class="string">"shoppingCartMap"</span>&gt;</span></span><br><span class="line">		select * from shopping_cart where user_id = #&#123;uid&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">	<span class="comment">// 关联查询映射</span></span><br><span class="line"><span class="comment">//	public List&lt;User&gt; findUserAndShoppingCartById(int id);</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findUserAndShoppingCartById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findUserAndShoppingCartById2</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findUserAndShoppingCartById3</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndShoppingCartById4</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace:映射器接口的全名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.onest.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 结果映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    	insert into user(user_name,password) value(#&#123;userName&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 一对一关联映射 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一：自动映射（给字段起别名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndShoppingCartById"</span> <span class="attr">resultType</span>=<span class="string">"net.onest.entity.User"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 连接查询 --&gt;</span></span><br><span class="line">        select u.id, u.user_name userName, u.password,</span><br><span class="line">        s.cart_id "shoppingCart.id",</span><br><span class="line">        s.price "shoppingCart.price"</span><br><span class="line">        from user u</span><br><span class="line">        left outer join shopping_cart s</span><br><span class="line">        on u.id = s.user_id</span><br><span class="line">        where u.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 二：使用结果映射（resultMap） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userAndShoppingCartMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cart_id"</span> <span class="attr">property</span>=<span class="string">"shoppingCart.id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"shoppingCart.price"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndShoppingCartById2"</span> <span class="attr">resultMap</span>=<span class="string">"userAndShoppingCartMap"</span>&gt;</span></span><br><span class="line">        select u.id, u.user_name, u.password, s.cart_id, s.price from user u</span><br><span class="line">        left outer join shopping_cart s on u.id = s.user_id</span><br><span class="line">        where u.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 三：使用resultMap+association --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射复杂类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userAndShoppingCartMap3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"shoppingCart"</span> <span class="attr">resultMap</span>=<span class="string">"net.onest.mapper.ShoppingCartMapper.shoppingCartMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;association property="shoppingCart" &gt;</span></span><br><span class="line"><span class="comment">			&lt;id column="cart_id" property="id" /&gt;</span></span><br><span class="line"><span class="comment">			&lt;result column="price" property="price" /&gt;</span></span><br><span class="line"><span class="comment">		&lt;/association&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndShoppingCartById3"</span> <span class="attr">resultMap</span>=<span class="string">"userAndShoppingCartMap3"</span>&gt;</span></span><br><span class="line">        select u.id, u.user_name, u.password, s.cart_id, s.price from user u</span><br><span class="line">        left outer join shopping_cart s on u.id = s.user_id</span><br><span class="line">        where u.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 四：嵌套查询（多次查询） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userAndShoppingCartMap4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 不能指定resultMap</span></span><br><span class="line"><span class="comment">            select:另一个查询的statement id</span></span><br><span class="line"><span class="comment">            column：等号左边是嵌套查询的参数,等号右边是当前查询的结果</span></span><br><span class="line"><span class="comment">            fetchType="lazy":延迟检索  "eager"积极加载 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"shoppingCart"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">select</span>=<span class="string">"net.onest.mapper.ShoppingCartMapper.findShoppingCartByUserId"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">column</span>=<span class="string">"&#123;uid=id&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">fetchType</span>=<span class="string">"eager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndShoppingCartById4"</span> <span class="attr">resultMap</span>=<span class="string">"userAndShoppingCartMap4"</span>&gt;</span></span><br><span class="line">        select * from user u where u.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tset</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//打开SqlSession</span></span><br><span class="line">		SqlSession sqlSession = MyBatisUtil.openSqlSession();</span><br><span class="line">		<span class="comment">//得到了映射器接口实现类的对象</span></span><br><span class="line">		UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//		List&lt;User&gt; users =  userMapper.findAllUsers();</span></span><br><span class="line"><span class="comment">//		System.out.println(users);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1.添加用户及购物车</span></span><br><span class="line"><span class="comment">//		User user = new User();</span></span><br><span class="line"><span class="comment">//		user.setUserName("ll");</span></span><br><span class="line"><span class="comment">//		user.setPassword("156");</span></span><br><span class="line"><span class="comment">//		userMapper.insertUser(user);</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		ShoppingCart shoppingCart = new ShoppingCart();</span></span><br><span class="line"><span class="comment">//		shoppingCart.setPrice(445.2);</span></span><br><span class="line"><span class="comment">//		shoppingCart.setUserId(user.getId());</span></span><br><span class="line"><span class="comment">//		ShoppingCartMapper shoppingCartMapper = sqlSession.getMapper(ShoppingCartMapper.class);</span></span><br><span class="line"><span class="comment">//		shoppingCartMapper.insertShoppingCart(shoppingCart);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关联查询</span></span><br><span class="line"><span class="comment">//		User user = userMapper.findUserAndShoppingCartById(1);</span></span><br><span class="line"><span class="comment">//		User user = userMapper.findUserAndShoppingCartById2(1);</span></span><br><span class="line"><span class="comment">//		User user = userMapper.findUserAndShoppingCartById3(1);</span></span><br><span class="line">		List&lt;User&gt; users = userMapper.findUserAndShoppingCartById4(<span class="number">1</span>);</span><br><span class="line">		System.out.println(users.get(<span class="number">0</span>).toString());</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		u.getShoppingCart();</span></span><br><span class="line"><span class="comment">//		System.out.println(userMapper.findUserAndShoppingCartById(1));</span></span><br><span class="line">		</span><br><span class="line">		sqlSession.commit();</span><br><span class="line">		<span class="comment">//关闭session</span></span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一对一关联映射缺点"><a href="#一对一关联映射缺点" class="headerlink" title="一对一关联映射缺点"></a>一对一关联映射缺点</h2><ol>
<li>嵌套查询会多执行SQL，当查询N条数据时，就会出现N+1次查询问题</li>
<li>为了解决N+1次查询问题，可以设置延迟加载策略，将association元素的fetchType属性设置为lazy</li>
<li>MyBatis主配置文件中有两个延时加载相关settings设置<ol>
<li>lazyLoadingEnabled，延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。可通过设置fetchType 属性来覆盖该项的开关状态</li>
<li>aggressiveLazyLoading，当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>设置为延迟加载的对象，默认情况下，当调用该对象的equals、hashCode、toString、clone方法时，就会加载该对象的全部数据</li>
</ol>
<h2 id="对比四种关联映射方式"><a href="#对比四种关联映射方式" class="headerlink" title="对比四种关联映射方式"></a>对比四种关联映射方式</h2><ol>
<li>前面的三种方式都属于“关联的嵌套结果映射“,即通过一次SQL查询根据表或指定的属性映射到不同的对象中</li>
<li>最后一种方式属于“关联的嵌套查询”，利用简单的SQL语句，通过多次查询得到想要的结果，可实现延迟加载效果</li>
</ol>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2-MyBatis的CRUD操作</title>
    <url>/2020/03/18/2-MyBatis%E7%9A%84CRUD%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动态代理机制"><a href="#动态代理机制" class="headerlink" title="动态代理机制"></a>动态代理机制</h2><p>略</p>
<h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><h3 id="单条插入："><a href="#单条插入：" class="headerlink" title="单条插入："></a>单条插入：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.entity.User"</span>&gt;</span></span><br><span class="line">	insert into USER(id,user_name,password) values(#&#123;id&#125;,#&#123;userName&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中</p>
<ol>
<li>id属性：命名空间中的唯一标识符，为Mapper接口中的方法名</li>
<li>parameterType：指定了方法的参数类型，为<strong>可选项</strong>可以省略</li>
<li>#{id}是JavaBean对象的属性名</li>
<li>insert方法的返回值num是执行插入语句所<strong>影响的行数</strong></li>
</ol>
<h3 id="使用JDBC方式返回主键自增的值"><a href="#使用JDBC方式返回主键自增的值" class="headerlink" title="使用JDBC方式返回主键自增的值"></a>使用JDBC方式返回主键自增的值</h3><p>执行插入操作以后返回表中的主键值，id值可为null</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.entity.User"</span> "<span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">	insert into USER(id,user_name,password) values(#&#123;id&#125;,#&#123;userName&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用user.getId()才能获取主键值，inset的返回值是影响的条数</p>
<a id="more"></a>

<h3 id="使用selectKey返回主键的值-mysql一般不需要"><a href="#使用selectKey返回主键的值-mysql一般不需要" class="headerlink" title="使用selectKey返回主键的值(mysql一般不需要)"></a>使用selectKey返回主键的值(mysql一般不需要)</h3><p>对于一些不提供主键自增功能的数据库，如Oracle，需要使用selectKey标签来获取主键的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">	insert into USER(id,user_name,password values(#&#123;id&#125;,#&#123;userName&#125;,#&#123;password&#125;)</span><br><span class="line">	<span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">		SELECT LAST_INSERT_ID()</span><br><span class="line">	<span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>keyProperty属性表示主键所对应的属性名</li>
<li>resultType属性用于设置返回值类型</li>
<li>在MySQL中order属性设置为after，表示当前记录的主键值在insert语句执行成功后才能获取到，Oracle中设置为before</li>
<li>selectKey元素中的内容是一个独立的SQL语句，在MySQL中SELECT LAST_INSERT_ID()用于获取数据库中最后插入的数据的主键值</li>
<li>在Oracle中应该使用SELECT SEQ_ID.nextval from dual用来获取序列中的一个值</li>
</ol>
<h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span>  <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="查询单个对象"><a href="#查询单个对象" class="headerlink" title="查询单个对象"></a>查询单个对象</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结果映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用别名方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不使用别名方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"net.onest.entity.User"</span>&gt;</span></span><br><span class="line">    select id, user_name userName, password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用用户名和密码进行查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUserAndPsd"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	select * from user where userName=#&#123;arg0&#125; and password=#&#123;arg0&#125;</span><br><span class="line">	select * from user where userName=#&#123;param0&#125; and password=#&#123;param1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">findUserByUserAndPsd</span><span class="params">(@Param(<span class="string">"userName"</span>)</span> String userName,@<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUserAndPsd"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	select * from user where userName=#&#123;userName&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLike"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	select * from user where user_name like "%"#&#123;name&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateById</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateById"</span>&gt;</span></span><br><span class="line">	update user set user_name = #&#123;userName&#125;,password = #&#123;password&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteById"</span>&gt;</span></span><br><span class="line">	delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>1-Mybatis框架</title>
    <url>/2020/03/17/1-Mybatis%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Mybatis使用流程"><a href="#Mybatis使用流程" class="headerlink" title="Mybatis使用流程"></a>Mybatis使用流程</h2><ol>
<li>导入jar包</li>
<li>编写mybatis主配置文件xml</li>
<li>创建实体类和映射接口（注意是接口）</li>
<li>编写mybatis的sql映射文件</li>
<li>主配置文件与SQL映射文件相关联</li>
<li>进行编码</li>
</ol>
<a id="more"></a>

<h2 id="MyBatis主配置文件"><a href="#MyBatis主配置文件" class="headerlink" title="MyBatis主配置文件"></a>MyBatis主配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 通用设置：延迟加载、缓存、日志显示方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 输出SQL语句，STDOUT_LOGGING控制台显示 --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- logImpl设置用来指定 MyBatis 所用日志的具体实现，未指定时将自动查找 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 数据库事务的管理方式和连接数据库参数 --&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- JDBC这种方式是直接使用了JDBC的事务提交和回滚设置 --&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- MANAGED(托管)让容器来管理事务的整个生命周期(比如 Spring) --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- POOLED：这是JDBC连接对象的数据库连接池的实现,用来避免创建新的连接实例 --&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- UNPOOLED: 每次被请求时简单打开和关闭连接 --&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- JNDI：这个数据源的实现是为了使用如Spring或应用服务器这类的容器 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_demo?characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 添加映射文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加单个映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource="net/onest/mapper/UserMapper.xml"/&gt; --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 使用映射器接口的完全限定类名 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;mapper class="org.mybatis.builder.AuthorMapper"/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加整个包中的映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"net.onest.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="MyBatis主要的类层次结构"><a href="#MyBatis主要的类层次结构" class="headerlink" title="MyBatis主要的类层次结构"></a>MyBatis主要的类层次结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			InputStream is =</span><br><span class="line">				Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">			factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">			is.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> factory.openSession();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyBatis映射文件"><a href="#MyBatis映射文件" class="headerlink" title="MyBatis映射文件"></a>MyBatis映射文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace:映射器接口的完全限定名,方法为：insert，update，delete，select --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.onest.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 结果映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 映射select语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType是映射的类 ， resultMap 必须在上面声明映射结果--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;select id="findAllUsers"  resultType="net.onest.entity.User"&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span>  <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">           select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 插入操作 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys和keyProperties属性，用来获取数据库中的主键的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"net.onest.entity.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert into user(id, user_name, password)</span><br><span class="line">        values(#&#123;id&#125;, #&#123;userName&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="映射器接口类-实体User类"><a href="#映射器接口类-实体User类" class="headerlink" title="映射器接口类,实体User类"></a>映射器接口类,实体User类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.onest.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.onest.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.onest.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.onest.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.onest.entity.User;</span><br><span class="line"><span class="keyword">import</span> net.onest.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> net.onest.util.MyBatisUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//第一种方式（传统方式）</span></span><br><span class="line">		<span class="comment">//打开SqlSession</span></span><br><span class="line"><span class="comment">//		SqlSession sqlSession = MyBatisUtil.openSqlSession();</span></span><br><span class="line"><span class="comment">//		//参数为映射文件中的namespace+id</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//		User user = new User();</span></span><br><span class="line"><span class="comment">//		user.setUserName("pp");</span></span><br><span class="line"><span class="comment">//		user.setPassword("456");</span></span><br><span class="line"><span class="comment">//		sqlSession.insert("net.onest.mapper.UserMapper.insertUser", user);</span></span><br><span class="line"><span class="comment">//		sqlSession.commit();</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		List&lt;User&gt; users = sqlSession.selectList("net.onest.mapper.UserMapper.findAllUsers");</span></span><br><span class="line"><span class="comment">//		System.out.println(users);</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		//关闭SqlSession</span></span><br><span class="line"><span class="comment">//		sqlSession.close();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//第二种方式（推荐使用）</span></span><br><span class="line">		<span class="comment">//打开SqlSession</span></span><br><span class="line">		SqlSession sqlSession = MyBatisUtil.openSqlSession();</span><br><span class="line">		<span class="comment">//得到了映射器接口实现类的对象</span></span><br><span class="line">		UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		User user = new User();</span></span><br><span class="line"><span class="comment">//		user.setUserName("zj");</span></span><br><span class="line"><span class="comment">//		user.setPassword("456");</span></span><br><span class="line"><span class="comment">//		userMapper.insertUser(user);</span></span><br><span class="line"><span class="comment">//		sqlSession.commit();</span></span><br><span class="line">		</span><br><span class="line">		List&lt;User&gt; users =  userMapper.findAllUsers();</span><br><span class="line">		System.out.println(users);</span><br><span class="line">		<span class="comment">//关闭session</span></span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyBatis主要的类层次结构-1"><a href="#MyBatis主要的类层次结构-1" class="headerlink" title="MyBatis主要的类层次结构"></a>MyBatis主要的类层次结构</h2><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-17_113645.jpg" alt></p>
<h2 id="SqlSession的工作流程"><a href="#SqlSession的工作流程" class="headerlink" title="SqlSession的工作流程"></a>SqlSession的工作流程</h2><ol>
<li>开启一个数据库访问会话—创建SqlSession对象：MyBatis封装了对数据库的访问，把对数据库的会话和事务控制放到了SqlSession对象中。<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-17_114424.jpg" alt></li>
<li>为SqlSession传递一个映射的SQL语句的StatementId和参数，然后返回结果：<ol>
<li>SqlSession根据Statement ID, 在MyBatis配置对象</li>
<li>Configuration中获取到对应的MappedStatement对象</li>
<li>调用MyBatis执行器来执行具体的操作。</li>
</ol>
</li>
<li>MyBatis在初始化的时候，会将MyBatis的配置信息全部加载到内存中，使用Configuration实例来维护。</li>
<li>映射文件加载到内存中会生成n个对应的MappedStatement对象</li>
</ol>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>8.1-Hibernate检索策略</title>
    <url>/2020/03/11/8-1-Hibernate%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三种检索策略"><a href="#三种检索策略" class="headerlink" title="三种检索策略"></a>三种检索策略</h2><ol>
<li>立即检索：立即加载检索方法指定的对象。<ol>
<li>加载多于需要的对象白白浪费内存空间；</li>
<li>select 语句数量多，频繁访问数据库，影响系统性能。</li>
</ol>
</li>
<li>延迟检索：延迟加载检索方法指定的对象。<ol>
<li>避免多加载应用程序不需要访问的数据对象。</li>
</ol>
</li>
<li>迫切左外连接：利用SQL外连接查询功能加载检索方法指定对象。<ol>
<li>减少执行select语句的数量，减少数据库访问，提高系统性能。</li>
</ol>
</li>
</ol>
<a id="more"></a>

<h2 id="类级别和关联级别可选的检索策略"><a href="#类级别和关联级别可选的检索策略" class="headerlink" title="类级别和关联级别可选的检索策略"></a>类级别和关联级别可选的检索策略</h2><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-11_105703.jpg" alt></p>
<h2 id="类级别检索策略"><a href="#类级别检索策略" class="headerlink" title="类级别检索策略"></a>类级别检索策略</h2><p>立即检索（加载）：映射配置文件中<class>元素的lazy 属性设置为 false。</class></p>
<p><code>&lt;class name=&quot;User&quot; table=&quot;user&quot; lazy=&quot;false&quot;&gt;</code></p>
<p>延迟检索（加载）：映射配置文件中<class>元素的lazy 属性设置为 true。</class></p>
<p><code>&lt;class name=&quot;User&quot; table=&quot;user&quot; lazy=&quot;true&quot;&gt;</code></p>
<h3 id="立即检索"><a href="#立即检索" class="headerlink" title="立即检索"></a>立即检索</h3><p><code>User user = session.load(User.class, new Integer(1));</code></p>
<h3 id="延迟检索"><a href="#延迟检索" class="headerlink" title="延迟检索"></a>延迟检索</h3><ol>
<li>创建 User 的代理类实例（代理类是 Hibernate 动态生成的User的扩展类）；</li>
<li>Hibernate 创建的 User 代理类的实例<strong>仅仅初始化了OID 属性</strong>，其他属性均为 null；</li>
<li>当程序第一次访问代理类实例时（比如user.getX()），Hibernate会初始化代理类实例，执行 select 语句；</li>
<li>如果程序访问 User 的 getId() 方法时，Hibernate并不会初始化代理类实例，因为 id 值已经存在。</li>
<li>类级别的检索策略<strong>只会影响到 Session 的 load() 方法</strong>，对get() 和其它查询不起作用。</li>
<li>延迟加载对 load() 方法的影响：<ol>
<li>如果数据库中不存在对应的对象不会抛出异常，只有在调用 user.getXX() 时才会抛异常；</li>
<li>代理类实例只能在当前 Session 范围内初始化；</li>
<li><strong>Hibernate.initialize()</strong> 方法可以显示初始化代理类实例。</li>
</ol>
</li>
</ol>
<h3 id="关联级别检索策略"><a href="#关联级别检索策略" class="headerlink" title="关联级别检索策略"></a>关联级别检索策略</h3><p>User.hbm.xml 中<set>元素 lazy 和 outer-join 属性。</set></p>
<p>在映射文件中用<strong><set></set></strong>元素来配置一对多和多对多关联关系。<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-11_105818.jpg" alt></p>
<p>outer-join属性：auto、true、false</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-11_105927.jpg" alt></p>
]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>8-Hibernate检索方式</title>
    <url>/2020/03/06/8-Hibernate%E6%A3%80%E7%B4%A2%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="3种检索方式"><a href="#3种检索方式" class="headerlink" title="3种检索方式"></a>3种检索方式</h2><ul>
<li>HQL检索方式：使用面向对象的HQL查询语言。（使用最广的，最常用的）</li>
<li>QBC检索方式：使用QBC（Query By Criteria）API来检索对象。这种API封装了基于字符串形式的查询语句，提供了更加面向对象的接口。</li>
<li>本地SQL检索方式：使用本地数据库的SQL查询语句。（简单来说就是普通的sql语句查找，只不过调用NativeQuery接口）</li>
</ul>
<h2 id="HQL检索方式"><a href="#HQL检索方式" class="headerlink" title="HQL检索方式"></a>HQL检索方式</h2><ol>
<li>HQL语句中<strong>关键字大小写无关</strong>，但习惯将关键字小写。</li>
<li>from 关键字后面<strong>是类名不是数据库表名</strong>，类名需<strong>区分大小写</strong>。</li>
<li>where 子句中给出的是<strong>类的属性名而不是数据库表字段名</strong>，其中属性名<strong>必须区分大小写</strong>。</li>
</ol>
<a id="more"></a>

<p>查询返回结果</p>
<ul>
<li>list()：返回List类型的查询结果，返回所有满足条件的对象。</li>
<li>uniqueResult()：返回单个对象</li>
</ul>
<p>where子句支持的各种运算符。</p>
<table>
<thead>
<tr>
<th align="center">程序中指定的连接类型</th>
<th align="center">HQL运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">比较运算符</td>
<td align="center">=、&lt;&gt;、&gt;=、&lt;=、&gt;、&lt;、is null、is not null</td>
</tr>
<tr>
<td align="center">范围运算符</td>
<td align="center">in、not in、between…and、not between…and</td>
</tr>
<tr>
<td align="center">字符串模式匹配运算符</td>
<td align="center">like</td>
</tr>
<tr>
<td align="center">逻辑运算符</td>
<td align="center">and、or、not</td>
</tr>
</tbody></table>
<p>HQL缺点：</p>
<ul>
<li>代码更加零乱，可读性降低；</li>
<li>难以进行性能优化；</li>
<li>引入额外的安全风险。</li>
</ul>
<p>HQL子查询：</p>
<ol>
<li>size()，获得集合中元素的个数；</li>
<li>maxIndex()，对于建立索引的集合，获得最大索引值；</li>
<li>minIndex()，对于建立索引的集合，获得最小索引值；</li>
<li>elements()，获得集合中所有元素。</li>
</ol>
<h3 id="检索所有记录"><a href="#检索所有记录" class="headerlink" title="检索所有记录"></a>检索所有记录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"select u from User u"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>
<h3 id="多态查询：查询出当前类以及所有子类的实例。"><a href="#多态查询：查询出当前类以及所有子类的实例。" class="headerlink" title="多态查询：查询出当前类以及所有子类的实例。"></a>多态查询：查询出当前类以及所有子类的实例。</h3><p>Employee 有两个子类：HourlyEmployee 和SalariedEmployee。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Query query = session.createQuery(<span class="string">"from Employee"</span>);</span><br><span class="line">List employeeList = query.list();</span><br></pre></td></tr></table></figure>

<h3 id="检索单独字段"><a href="#检索单独字段" class="headerlink" title="检索单独字段"></a>检索单独字段</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"select u.userName from User u"</span>;<span class="comment">//返回所有userName，其中涉及别名u</span></span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="检索多个字段，list-返回结果中List元素类型为Object数组"><a href="#检索多个字段，list-返回结果中List元素类型为Object数组" class="headerlink" title="检索多个字段，list()返回结果中List元素类型为Object数组"></a>检索多个字段，list()返回结果中List元素类型为Object数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"select u.userName, u.password from User u"</span>; </span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List&lt;Object[]&gt; userList = query.list();</span><br><span class="line">Iterator&lt;Object[]&gt; it = userList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">	Object[] val = it.next();</span><br><span class="line">    System.out.println(val[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(val[<span class="number">1</span>] + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询多个字段，并将list-返回结果中List元素改为User对象引用，需在User中添加相应的构造方法"><a href="#查询多个字段，并将list-返回结果中List元素改为User对象引用，需在User中添加相应的构造方法" class="headerlink" title="查询多个字段，并将list()返回结果中List元素改为User对象引用，需在User中添加相应的构造方法"></a>查询多个字段，并将list()返回结果中List元素改为User对象引用，需在User中添加相应的构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"select new User(u.userName, u.password) from User u"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List&lt;User&gt; userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User u where u.userName='zs3'"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List&lt;User&gt; userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="返回单个对象"><a href="#返回单个对象" class="headerlink" title="返回单个对象"></a>返回单个对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User u where u.userName='zs3'"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">User user = (User) query.uniqueResult();</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<h3 id="group-by-子句"><a href="#group-by-子句" class="headerlink" title="group by 子句"></a>group by 子句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User u Order by u.userName"</span>;</span><br><span class="line">String hql = <span class="string">"from User u Order by u.userName desc"</span>;</span><br><span class="line">String hql = <span class="string">"from User u Order by u.userName, u.id desc"</span>;<span class="comment">//降序</span></span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List&lt;User&gt; userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="order-by子句"><a href="#order-by子句" class="headerlink" title="order by子句"></a>order by子句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User u group by u.age having u.id &lt; 5"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List&lt;User&gt; userList = query.getResultList();</span><br><span class="line">List&lt;User&gt; userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a>having子句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User u group by u.age having u.id &lt; 5"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List&lt;User&gt; userList = query.getResultList();</span><br><span class="line">List&lt;User&gt; userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User u where u.userName=?"</span>;</span><br><span class="line">String hql = <span class="string">"from User u where u.userName=:userName"</span>;<span class="comment">//对应setProperties</span></span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"zs5"</span>);</span><br><span class="line">query.setProperties(user);<span class="comment">//用于把命名参数与一个对象的属性值绑定，并且参数名称要与对象属性名称一致。</span></span><br><span class="line"></span><br><span class="line">query.setParameter(<span class="number">0</span>, user);<span class="comment">//setParameter() 参数位置从0开始</span></span><br><span class="line"></span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="string">"zs6"</span>);</span><br><span class="line"></span><br><span class="line">query.setParameter(<span class="string">"userName"</span>,<span class="string">"zs6"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"delete from Users where id = ?"</span>;</span><br><span class="line">Query queryDelete = session.createQuery(hql);</span><br><span class="line">queryDelete.setParameter(<span class="string">"id"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> num = queryDelete.executeUpdate();</span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure>

<h3 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"update User set userName=:name where id=:id"</span>;</span><br><span class="line">Query queryUpdate = session.createQuery(hql);</span><br><span class="line">queryUpdate.setParameter(<span class="string">"name"</span>, <span class="string">"lucy"</span>);</span><br><span class="line">queryUpdate.setParameter(<span class="string">"id"</span>, <span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">int</span> row = queryUpdate.executeUpdate();</span><br><span class="line">System.out.println(row);</span><br></pre></td></tr></table></figure>

<h3 id="where子句中嵌入子查询"><a href="#where子句中嵌入子查询" class="headerlink" title="where子句中嵌入子查询"></a>where子句中嵌入子查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User u where (select count(o) from u.orderSet o) &gt; 0"</span>;<span class="comment">//此处where不能是count(orderSet)&gt;0,因为orderSet是集合</span></span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">List userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hql = <span class="string">"from User"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">query.setFirstResult(<span class="number">0</span>);<span class="comment">//设定从哪个对象开始检索。</span></span><br><span class="line">query.setMaxResults(<span class="number">3</span>);<span class="comment">//设定一次检索对象的数目。</span></span><br><span class="line">List&lt;User&gt; userList = query.list();</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h3 id="引用查询"><a href="#引用查询" class="headerlink" title="引用查询"></a>引用查询</h3><p>在O/R映射xml文件中：<code>&lt;query name=&quot;findUser&quot;&gt;from User&lt;/query&gt;</code><br>java:<code>Query query = session.createNamedQuery(&quot;findUser&quot;,User.class);</code></p>
<h2 id="QBC检索方式"><a href="#QBC检索方式" class="headerlink" title="QBC检索方式"></a>QBC检索方式</h2><p>看作是传统SQL的对象化表示</p>
<p>Restrictions类:</p>
<table>
<thead>
<tr>
<th align="left">运算类型</th>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.eq</td>
<td align="left">等于</td>
</tr>
<tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.ne</td>
<td align="left">不等于</td>
</tr>
<tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.gt</td>
<td align="left">大于</td>
</tr>
<tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.ge</td>
<td align="left">大于等于</td>
</tr>
<tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.lt</td>
<td align="left">小于</td>
</tr>
<tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.le</td>
<td align="left">小于等于</td>
</tr>
<tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.isNull</td>
<td align="left">等于空值</td>
</tr>
<tr>
<td align="left">比较运算符</td>
<td align="left">Restrictions.isNotNull</td>
<td align="left">非空值</td>
</tr>
<tr>
<td align="left">范围运算符</td>
<td align="left">Restrictions.in</td>
<td align="left">等于列表中的某个值</td>
</tr>
<tr>
<td align="left">范围运算符</td>
<td align="left">Restrictions.not(Restrictions.in)</td>
<td align="left">不等于列表中的任意值</td>
</tr>
<tr>
<td align="left">范围运算符</td>
<td align="left">Restrictions.between</td>
<td align="left">大于等于值1小于等于值2</td>
</tr>
<tr>
<td align="left">字符串模糊匹配</td>
<td align="left">Restrictions.like</td>
<td align="left">字符串模糊匹配 like</td>
</tr>
<tr>
<td align="left">逻辑运算符</td>
<td align="left">Restrictions.and</td>
<td align="left">逻辑与</td>
</tr>
<tr>
<td align="left">逻辑运算符</td>
<td align="left">Restrictions.or</td>
<td align="left">逻辑或</td>
</tr>
<tr>
<td align="left">逻辑运算符</td>
<td align="left">Restrictions.not</td>
<td align="left">逻辑非</td>
</tr>
<tr>
<td align="left">### 检索姓名为 zs8 的所有用户</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建Criteria对象</span></span><br><span class="line">Criteria criteria=session.createCriteria(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//2.设置条件</span></span><br><span class="line">Criterion c1= Restrictions.eq(<span class="string">"userName"</span>, <span class="string">"zs8"</span>);</span><br><span class="line">Criterion c2= Restrictions.eq(<span class="string">"password"</span>, <span class="string">"1238"</span>);<span class="comment">//多项查询</span></span><br><span class="line">Criterion criterion=Restrictions.and(c1,c2);</span><br><span class="line"></span><br><span class="line">Criterion c1= Restrictions.between(<span class="string">"id"</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">            </span><br><span class="line"><span class="comment">//3.加到对象中去</span></span><br><span class="line">criteria.add(c1);</span><br><span class="line"></span><br><span class="line">criteria.add(criterion);</span><br><span class="line"><span class="comment">//4.执行查询</span></span><br><span class="line">List result = criteria.list();</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure>


<h2 id="本地SQL检索方式"><a href="#本地SQL检索方式" class="headerlink" title="本地SQL检索方式"></a>本地SQL检索方式</h2><p>一般的数据库语句(与hibernate无关，只是提供了一个接口)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql=<span class="string">"select * from  user8"</span>;</span><br><span class="line">NativeQuery query = session.createNativeQuery(sql, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List list = query.list();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql中的4中外键形式</title>
    <url>/2020/03/05/mysql%E4%B8%AD%E7%9A%844%E4%B8%AD%E5%A4%96%E9%94%AE%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用Navicat for mysql设计外键的时候，删除时和更新时两列有四个值可以选择：</p>
<ol>
<li>CASCADE<ul>
<li>父表delete、update的时候，子表会delete、update掉关联记录；</li>
</ul>
</li>
<li>NO ACTION<ul>
<li>父表delete、update的时候，子表会将关联记录的外键字段所在列设为null，所以注意在设计子表时外键不能设为not null；</li>
</ul>
</li>
<li>RESTRICT<ul>
<li>如果想要删除父表的记录时，而在子表中有关联该父表的记录，则不允许删除父表中的记录；</li>
</ul>
</li>
<li>SET NULL<ul>
<li>同 RESTRICT，也是首先先检查外键；</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate小例子</title>
    <url>/2020/03/04/Hibernate%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>高考录取之后，要给录取的学生分配相关信息，需要一个学生管理系统，已知基本信心包含姓名、学号，学生还有年龄，需要给学生制作一卡通，一卡通中包含基本信息和银行卡号，还要给学生分配班级，开学后学生选课后保存选课信息。</p>
<ol>
<li>实现保存班级、保存学生信息及一卡通信息</li>
<li>学生选课后保存选课信息</li>
<li>通过查询一个学生能够找到一卡通，也能通过一卡通定位到学生</li>
<li>通过查询一个学生能够知道他所在班级，通过班级能找到这个班的所有学生</li>
<li>通过找学生能够找到所选择的课程，通过课程能找到选修这门课的所有学生</li>
</ol>
<a id="more"></a>

<h2 id="整理出相关信息并列表如下"><a href="#整理出相关信息并列表如下" class="headerlink" title="整理出相关信息并列表如下"></a>整理出相关信息并列表如下</h2><p>Student表</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Id</td>
<td align="center">int</td>
<td align="center">自增字段</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">string</td>
<td align="center">姓名</td>
</tr>
<tr>
<td align="center">number</td>
<td align="center">string</td>
<td align="center">学号</td>
</tr>
<tr>
<td align="center">age</td>
<td align="center">int</td>
<td align="center">年龄</td>
</tr>
<tr>
<td align="center">classId</td>
<td align="center">int</td>
<td align="center">班级id</td>
</tr>
</tbody></table>
<p>IdCard表</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Id</td>
<td align="center">int</td>
<td align="center">自增字段</td>
</tr>
<tr>
<td align="center">bankNo</td>
<td align="center">string</td>
<td align="center">银行卡号</td>
</tr>
<tr>
<td align="center">StudentId</td>
<td align="center">int</td>
<td align="center">学生id</td>
</tr>
</tbody></table>
<p>BaseClass表(不使用Class,与关键字class冲突)</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Id</td>
<td align="center">int</td>
<td align="center">自增字段</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">string</td>
<td align="center">班级名</td>
</tr>
</tbody></table>
<p>Course表</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Id</td>
<td align="center">int</td>
<td align="center">自增字段</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">string</td>
<td align="center">课程名</td>
</tr>
</tbody></table>
<p>StudentCourse表</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">studentId</td>
<td align="center">int</td>
<td align="center">学生id</td>
</tr>
<tr>
<td align="center">courseId</td>
<td align="center">int</td>
<td align="center">课程id</td>
</tr>
</tbody></table>
<h2 id="研究关联映射类型"><a href="#研究关联映射类型" class="headerlink" title="研究关联映射类型"></a>研究关联映射类型</h2><ul>
<li><p>学生和一卡通：一对一</p>
<ul>
<li>学生类中添加加一卡通属性</li>
<li>一卡通类中添加学生属性</li>
<li>一卡通类中添加学生id外键</li>
<li>相对应的xml文件添加<code>&lt;one-to-one name=&quot;&quot; property-ref=&quot;&quot; cascade=&quot;&quot; &gt;&lt;/one-to-one&gt;</code></li>
</ul>
</li>
<li><p>学生和班级：多对一</p>
<ul>
<li><p>学生表中添加班级id外键</p>
</li>
<li><p>在班级类中添加set集合<code>Set&lt;Student&gt; students = new HashSet&lt;&gt;(0);</code></p>
</li>
<li><p>相对应的在各自的xml文件中添加<br><code>&lt;many-to-one name=&quot;&quot; column=&quot;&quot;&gt;&lt;/many-to-one&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>学生和课程：多对多</p>
<ul>
<li>在学生类中添加<code>Set&lt;Course&gt; courses = new HashSet&lt;&gt;()</code></li>
<li>在课程类中添加<code>Set&lt;Student&gt; students = new HashSet&lt;&gt;();</code></li>
<li>衍生出StudentCourse表，添加相对应外键</li>
<li>在各自的xml文件添加<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">table</span>=<span class="string">""</span> <span class="attr">inverse</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"studentId"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">column</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建数据库student-management-system"><a href="#创建数据库student-management-system" class="headerlink" title="创建数据库student_management_system"></a>创建数据库student_management_system</h2></li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`class`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`class`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`course`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`course`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`idcard`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`idcard`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`bankNo`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`studentId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`studentId`</span> (<span class="string">`studentId`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`idcard_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`studentId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`student`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`number`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`classId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`classId`</span> (<span class="string">`classId`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`student_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`classId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`class`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`studentcourse`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`studentcourse`</span> (</span><br><span class="line">  <span class="string">`studentId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`courseId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`studentId`</span> (<span class="string">`studentId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`courseId`</span> (<span class="string">`courseId`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`studentcourse_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`studentId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`student`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`studentcourse_ibfk_2`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`courseId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`course`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<h2 id="eclipse创建4个类及其相对应的xml文件-注解方式有时间再写"><a href="#eclipse创建4个类及其相对应的xml文件-注解方式有时间再写" class="headerlink" title="eclipse创建4个类及其相对应的xml文件(注解方式有时间再写)"></a>eclipse创建4个类及其相对应的xml文件(注解方式有时间再写)</h2><p>注：</p>
<ul>
<li>以下由于在运行过程中出现找不到属性得相关问题，所以一律采取xml中class写完整路径</li>
<li>hibernate.cfg.xml中的映射路径是<br><code>&lt;mapping resource=&quot;com/studentmanagementsystem/entity/Student.hbm.xml&quot; /&gt;</code><br>而不是<br><code>&lt;mapping class=&quot;com.studentmanagementsystem.entity.Student.hbm.xml&quot; /&gt;</code></li>
</ul>
<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String number;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> BaseClass baseClass;</span><br><span class="line">	<span class="keyword">private</span> IdCard idCard;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Course&gt; courses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.studentmanagement.entity.Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">column</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"idCard"</span> <span class="attr">property-ref</span>=<span class="string">"student"</span> <span class="attr">cascade</span>=<span class="string">"all"</span> &gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"baseClass"</span> <span class="attr">column</span>=<span class="string">"classId"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"courses"</span> <span class="attr">table</span>=<span class="string">"studentcourse"</span> <span class="attr">inverse</span>=<span class="string">"false"</span> <span class="attr">cascade</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"studentId"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.studentmanagement.entity.Course"</span> <span class="attr">column</span>=<span class="string">"courseId"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IdCard.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdCard</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String bankNo;</span><br><span class="line">	<span class="keyword">private</span> Student student;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IdCard.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.studentmanagement.entity.IdCard"</span> <span class="attr">table</span>=<span class="string">"idcard"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bankNo"</span> <span class="attr">column</span>=<span class="string">"bankNo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">column</span>=<span class="string">"studentId"</span> <span class="attr">unique</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>BaseClass.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BaseClass.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.studentmanagement.entity.BaseClass"</span> <span class="attr">table</span>=<span class="string">"class"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"classId"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.studentmanagement.entity.Student"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Course.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Course.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.studentmanagement.entity.Course"</span> <span class="attr">table</span>=<span class="string">"course"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">table</span>=<span class="string">"studentcourse"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"courseId"</span> &gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.studentmanagement.entity.Student"</span> <span class="attr">column</span>=<span class="string">"studentId"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Session session = HibernateUtil.openSession();</span><br><span class="line">		Transaction tx = session.beginTransaction();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 1.保存班级信息</span></span><br><span class="line">			saveClass(session);</span><br><span class="line">			<span class="comment">// 删除班级信息</span></span><br><span class="line">			<span class="comment">// deleteClass(session);</span></span><br><span class="line">			<span class="comment">// 保存课程信息</span></span><br><span class="line">			<span class="comment">// saveCourse(session);</span></span><br><span class="line">			<span class="comment">// saveStudentCourse(session);</span></span><br><span class="line"><span class="comment">//			 Student student = session.get(Student.class, new Integer(1));</span></span><br><span class="line"><span class="comment">//			 System.out.println(student.getIdCard().getBankNo());</span></span><br><span class="line"><span class="comment">//			 System.out.println(student.getCourses().toString());</span></span><br><span class="line"><span class="comment">//			 System.out.println(student.getBaseClass().getName());</span></span><br><span class="line"></span><br><span class="line">			tx.commit();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			tx.rollback();</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			session.close();</span><br><span class="line">			HibernateUtil.closeSessionFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveStudentCourse</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">		Course course1 = session.get(Course<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">		Student student1 = session.get(Student<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">		student1.getCourses().add(course1);</span><br><span class="line">		session.save(student1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveCourse</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">		Course course = <span class="keyword">new</span> Course();</span><br><span class="line">		course.setName(<span class="string">"java"</span>);</span><br><span class="line">		Course course2 = <span class="keyword">new</span> Course();</span><br><span class="line">		course2.setName(<span class="string">"h5"</span>);</span><br><span class="line">		session.save(course);</span><br><span class="line">		session.save(course2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteClass</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">		BaseClass baseClass = session.get(BaseClass<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">		session.delete(baseClass);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveClass</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">		BaseClass baseClass = <span class="keyword">new</span> BaseClass();</span><br><span class="line">		baseClass.setName(<span class="string">"测试一班"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">			Student student = <span class="keyword">new</span> Student();</span><br><span class="line">			student.setAge(<span class="number">20</span>);</span><br><span class="line">			student.setNumber(<span class="string">"no"</span> + i + <span class="number">1</span>);</span><br><span class="line">			student.setName(<span class="string">"学生"</span> + i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			IdCard idCard = <span class="keyword">new</span> IdCard();</span><br><span class="line">			idCard.setBankNo(<span class="string">"bankNo"</span> + i + <span class="number">1</span>);</span><br><span class="line">			idCard.setStudent(student);</span><br><span class="line"></span><br><span class="line">			student.setIdCard(idCard);</span><br><span class="line"></span><br><span class="line">			baseClass.getStudents().add(student);</span><br><span class="line">		&#125;</span><br><span class="line">		session.save(baseClass);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>7-Hibernate操作持久化对象</title>
    <url>/2020/03/04/7-Hibernate%E6%93%8D%E4%BD%9C%E6%8C%81%E4%B9%85%E5%8C%96%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Session缓存"><a href="#Session缓存" class="headerlink" title="Session缓存"></a>Session缓存</h2><p>java生命周期中当对象<strong>空引用</strong>或<strong>隔离引用</strong>时会清理缓存</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存介于应用程序和永久性存储源之间，其作用是降低应用程序直接读写永久性存储源的频率，从而提高应用的运行效率。</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-04_090616.png" alt></p>
<p>缓存内的数据是永久性存储源中的数据的复制，应用程序在运行时从缓存读写数据，在特定的时刻或事件同步缓存和永久性存储源的数据。</p>
<a id="more"></a>

<h3 id="Session缓存的工作过程"><a href="#Session缓存的工作过程" class="headerlink" title="Session缓存的工作过程"></a>Session缓存的工作过程</h3><ul>
<li>当 Session 执行查询方法时，先从 Session 缓存中读取据，如果缓存中有则直接读取，如果缓存中没有，从数据库中查询并加载到Session 缓存中，再从缓存中读取。</li>
<li>当 Session 执行 save()、update() 方法时，将对象持久化到数据库中并将对象加载到 Session 缓存中。<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/2020-03-04_091148.png" alt></li>
</ul>
<h3 id="session实现缓存过程"><a href="#session实现缓存过程" class="headerlink" title="session实现缓存过程"></a>session实现缓存过程</h3><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/Animation.gif" alt></p>
<h3 id="Session清理缓存"><a href="#Session清理缓存" class="headerlink" title="Session清理缓存"></a>Session清理缓存</h3><p>Session在某一时间点按照缓存中对象的属性变化来同步更新数据库的这一过程被称为 Session 清理缓存</p>
<p>缓存清理的时间点：</p>
<ul>
<li>当调用 transaction.commit() 方法时，会先清理缓存，再向数据库提交事务；</li>
<li>当显式调用 Session.flush() 方法时，会清理缓存；</li>
<li>当调用 Session 的查询（不包括 load() 和 get() )方法时，如果缓存中对象的属性有变化则清理缓存。<h3 id="Session对象快照"><a href="#Session对象快照" class="headerlink" title="Session对象快照"></a>Session对象快照</h3><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/session_fuction.gif" alt><h3 id="Session清理缓存的模式"><a href="#Session清理缓存的模式" class="headerlink" title="Session清理缓存的模式"></a>Session清理缓存的模式</h3>setHibernateFlushMode() 用于设定 Session 清理缓存的模式。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">清理缓存模式</th>
<th align="center">Session的查询方法</th>
<th align="center">commit()</th>
<th align="center">flush()</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FlushMode.ALWAYS</td>
<td align="center">清理</td>
<td align="center">清理</td>
<td align="center">清理</td>
</tr>
<tr>
<td align="center">FlushMode.AUTO</td>
<td align="center">缓存中对象的属性有变化时清理，没变化不清理</td>
<td align="center">清理</td>
<td align="center">清理</td>
</tr>
<tr>
<td align="center">FlushMode.COMMIT</td>
<td align="center">不清理</td>
<td align="center">清理</td>
<td align="center">清理</td>
</tr>
<tr>
<td align="center">FlushMode.MANUAL</td>
<td align="center">不清理</td>
<td align="center">不清理</td>
<td align="center">清理</td>
</tr>
<tr>
<td align="center">FlushMode.NEVER</td>
<td align="center"><del>已过时，被MANUAL取代</del></td>
<td align="center"><del>~</del></td>
<td align="center"><del>~</del></td>
</tr>
</tbody></table>
<h3 id="Session缓存的作用"><a href="#Session缓存的作用" class="headerlink" title="Session缓存的作用"></a>Session缓存的作用</h3><ul>
<li>减少数据库访问次数，提高数据访问的效率；</li>
<li>保证缓存中的对象与数据库中相关的记录同步；</li>
<li>当缓存中的持久化对象存在循环关联关系时，Session会保证不出现死循环，以及由死循环引起的堆栈溢出异常。</li>
</ul>
<h2 id="Hibernate对象的生命周期"><a href="#Hibernate对象的生命周期" class="headerlink" title="Hibernate对象的生命周期"></a>Hibernate对象的生命周期</h2><p>Hibernate实体对象生命周期的4种状态</p>
<ul>
<li>Transient(临时状态) ： 刚刚被 new 关键字创建，还没有被持久化，不在Session的缓存中。<ul>
<li>在数据库中<strong>不存在</strong>与之相对应的记录</li>
</ul>
</li>
<li>Persistent(持久化状态) ： 已经被持久化，并加入到 Session 缓存中。<ul>
<li>在数据库中<strong>存在</strong>与之相对应的记录</li>
</ul>
</li>
<li>Detached(游离状态) ： 已经被持久化，但不再处于 Session 缓存中。<ul>
<li>在数据库中<strong>可能存在</strong>与之相对应的记录(前提是没有其他Session实例删除该记录)</li>
</ul>
</li>
<li>Removed(删除状态) ： Session 已经计划将其从数据库删除，并且不再处于 Session 缓存中。<ul>
<li>数据库中<strong>存在</strong>与之对应的记录(已经计划从数据库中删除)</li>
</ul>
</li>
</ul>
<p><img src="/2020/03/04/7-Hibernate%E6%93%8D%E4%BD%9C%E6%8C%81%E4%B9%85%E5%8C%96%E5%AF%B9%E8%B1%A1/2020-03-04_104323.png" alt></p>
<h2 id="Hibernate操作持久化对象"><a href="#Hibernate操作持久化对象" class="headerlink" title="Hibernate操作持久化对象"></a>Hibernate操作持久化对象</h2><h3 id="Session的save-方法"><a href="#Session的save-方法" class="headerlink" title="Session的save()方法"></a>Session的save()方法</h3><ol>
<li>把对象加入缓存中，使其变成持久化对象；</li>
<li>根据映射文件配置的标识符生成器为对象分配一个 OID</li>
<li>计划执行一个 insert，把对象当前属性值组装到 insert 语句中</li>
<li>事务提交后（transaction.commit()）永久的将数据保存到数据库</li>
</ol>
<h3 id="Session的update-方法"><a href="#Session的update-方法" class="headerlink" title="Session的update()方法"></a>Session的update()方法</h3><ol>
<li>把游离对象重新加入 Session 缓存中，使其变为持久化对象；</li>
<li>计划执行一个 update，将对象当前属性组装到 update 语句，执行 update 语句；</li>
<li>事务提交后（transaction.commit()）永久的将数据保存到数据库；</li>
<li>不管对象属性有没有改变都会执行update （通过设置<class>的select-before-update=true改变）。</class></li>
</ol>
<h3 id="Session的saveOrUpdate-方法"><a href="#Session的saveOrUpdate-方法" class="headerlink" title="Session的saveOrUpdate()方法"></a>Session的saveOrUpdate()方法</h3><ul>
<li>如果参数是临时对象—save()</li>
<li>如果参数是游离对象—update()</li>
<li>如果参数是持久化对象—返回</li>
</ul>
<h4 id="Hibernate-如何区分临时对象"><a href="#Hibernate-如何区分临时对象" class="headerlink" title="Hibernate 如何区分临时对象"></a>Hibernate 如何区分临时对象</h4><ul>
<li>对象的 OID 为 null；</li>
<li>如果映射文件中设置了 <id> 的 unsaved-value 属性，并且对象的 id 值与 unsaved-value 设置的值相等。</id></li>
</ul>
<h3 id="Session的delete-方法"><a href="#Session的delete-方法" class="headerlink" title="Session的delete()方法"></a>Session的delete()方法</h3><ol>
<li>检查传入的参数是否是持久化对象，如果是持久化对象将其移出 Session 缓存；</li>
<li>计划执行一个 delete，但是并不立即执行；</li>
<li>当 Session 清理缓存时才执行 delete，比如执行 Session.flush()。<h3 id="Session的load-和get-方法"><a href="#Session的load-和get-方法" class="headerlink" title="Session的load()和get()方法"></a>Session的load()和get()方法</h3></li>
</ol>
<ul>
<li>load() 与 get() 方法都是根据 OID 加载持久化对象。</li>
<li>load() 与 get() 方法的不同点：<ul>
<li>如果数据库中不存在与 OID 对应的记录：<ul>
<li>load() 会抛出 ObjectNotFoundException 异常；</li>
<li>get() 会返回 null。</li>
</ul>
</li>
<li>默认加载策略：<ul>
<li>load() 使用类的延迟加载策略；(在表头查询时较为罕见)</li>
<li>get() 使用类的立即加载策略。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>6-SpringMVC-JSTL</title>
    <url>/2020/03/03/6-SpringMVC-JSTL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>使用标签库，需要在JSP页面顶端配置：</p>
<p><code>&lt;%@ taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;form&quot;%&gt;</code></p>
<p>常见标签有：</p>
<ul>
<li>Form标签    input标签，radiobutton标签，checkbox标签</li>
<li>Select标签，password标签，textarea标签，hidden标签</li>
<li>Errors标签，HTML5标签</li>
</ul>
<a id="more"></a>

<p>form标签，将命令对象放置到PageContext中，默认名为“command”，并用其他子标签绑定属性值</p>
<p><strong>注：以下标签的path属性为相对应类的属性 要一一对应</strong></p>
<p><code>&lt;form:form commandName=&quot;pro&quot; action=&quot;add&quot; method=&quot;post&quot;&gt;&lt;/form:form&gt;</code></p>
<ul>
<li><p>input标签————<code>&lt;form:input path=&quot;name&quot; /&gt;</code></p>
</li>
<li><p>password标签———<code>&lt;form:password path=&quot;code&quot; value=&quot;123&quot; /&gt;</code>其中value是指定的</p>
</li>
<li><p>radiobutton标签</p>
<ul>
<li><p>方式1：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"area"</span> <span class="attr">value</span>=<span class="string">"large"</span> /&gt;</span>大</span><br><span class="line"><span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"area"</span> <span class="attr">value</span>=<span class="string">"small"</span> /&gt;</span>小</span><br></pre></td></tr></table></figure></li>
<li><p>方式2：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:radiobuttons</span> <span class="attr">path</span>=<span class="string">"size"</span> <span class="attr">items</span>=<span class="string">"$&#123;sizes &#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>方式3：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:radiobuttons</span> <span class="attr">path</span>=<span class="string">"province"</span> <span class="attr">items</span>=<span class="string">"$&#123;provinces &#125;"</span> <span class="attr">itemLabel</span>=<span class="string">"id"</span> <span class="attr">itemValue</span>=<span class="string">"name"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>checkbox标签</p>
<ul>
<li>用法同radiobutton标签</li>
<li>绑定数据时，有3种方式：<ul>
<li>绑定的值是boolean类型，值为true，则复选框被选中<br><code>&lt;form:checkbox path=&quot;sold&quot; /&gt;</code></li>
<li>绑定的值的类型是array或者java.util.Collection，集合中有的值，对应的复选框被选中</li>
<li>对于其它绑定的类型，绑定的值相等，则对应复选框被选中<br><code>&lt;form:checkboxes items=&quot;${colors }&quot; path=&quot;color&quot; /&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>select标签</p>
<ul>
<li>方式1：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:select</span> <span class="attr">path</span>=<span class="string">"skills"</span><span class="attr">items</span>=<span class="string">"$&#123;skills&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>方式2：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:select</span> <span class="attr">path</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form:option</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">label</span>=<span class="string">"请选择..."</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form:options</span> <span class="attr">items</span>=<span class="string">"$&#123;provinces &#125;"</span> <span class="attr">itemLabel</span>=<span class="string">"name"</span> <span class="attr">itemValue</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form:select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>textarea标签</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:textarea</span> <span class="attr">path</span>=<span class="string">"notes"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"20"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hidden标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:hidden</span> <span class="attr">path</span>=<span class="string">"id"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="贴上完整代码"><a href="#贴上完整代码" class="headerlink" title="贴上完整代码"></a>贴上完整代码</h2><p>Product.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String code;</span><br><span class="line">	<span class="keyword">private</span> String area;</span><br><span class="line">	<span class="keyword">private</span> String size;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> province;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> sold;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Province.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProductController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"add"</span>, method = RequestMethod.POST)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Product p)</span> </span>&#123;</span><br><span class="line">		System.out.println(p.getId());</span><br><span class="line">		System.out.println(p.getName());</span><br><span class="line">		System.out.println(p.getArea());</span><br><span class="line">		System.out.println(p.getCode());</span><br><span class="line">		System.out.println(p.getProvince());</span><br><span class="line">		System.out.println(p.getSize());</span><br><span class="line">		<span class="keyword">for</span> (String temp : p.getColor()) &#123;</span><br><span class="line">			System.out.println(temp);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"add"</span>, method = RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">		Product p = <span class="keyword">new</span> Product();</span><br><span class="line">		p.setId(<span class="number">200</span>);</span><br><span class="line">		p.setName(<span class="string">"pc"</span>);</span><br><span class="line">		p.setCode(<span class="string">"abcde"</span>);</span><br><span class="line">		p.setSold(<span class="keyword">true</span>);</span><br><span class="line">		p.getColor().add(<span class="string">"red"</span>);<span class="comment">//指定颜色为red</span></span><br><span class="line">		p.setProvince(<span class="number">2</span>);</span><br><span class="line">		model.addAttribute(<span class="string">"pro"</span>, p);</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; size = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		size.add(<span class="string">"xl"</span>);</span><br><span class="line">		size.add(<span class="string">"xxl"</span>);</span><br><span class="line">		size.add(<span class="string">"xxxl"</span>);</span><br><span class="line">		model.addAttribute(<span class="string">"sizes"</span>, size);</span><br><span class="line"></span><br><span class="line">		List&lt;Province&gt; pros = <span class="keyword">new</span> ArrayList&lt;Province&gt;();</span><br><span class="line">		Province p1 = <span class="keyword">new</span> Province();p1.setId(<span class="number">1</span>);p1.setName(<span class="string">"北京"</span>);</span><br><span class="line">		Province p2 = <span class="keyword">new</span> Province();p2.setId(<span class="number">2</span>);p2.setName(<span class="string">"河北"</span>);</span><br><span class="line">		Province p3 = <span class="keyword">new</span> Province();p3.setId(<span class="number">3</span>);p3.setName(<span class="string">"山东"</span>);</span><br><span class="line">		pros.add(p1);</span><br><span class="line">		pros.add(p2);</span><br><span class="line">		pros.add(p3);</span><br><span class="line">		model.addAttribute(<span class="string">"provinces"</span>, pros);</span><br><span class="line"></span><br><span class="line">		List&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		colors.add(<span class="string">"red"</span>);</span><br><span class="line">		colors.add(<span class="string">"green"</span>);</span><br><span class="line">		colors.add(<span class="string">"blue"</span>);</span><br><span class="line">		model.addAttribute(<span class="string">"colors"</span>, colors);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"product"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>product.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span> <span class="attr">prefix</span>=<span class="string">"form"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	传统方式的输入框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"$&#123;pro.name &#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	以下是spring提供的jstl：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form:form</span> <span class="attr">commandName</span>=<span class="string">"pro"</span> <span class="attr">action</span>=<span class="string">"add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		id:<span class="tag">&lt;<span class="name">form:hidden</span> <span class="attr">path</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		name:<span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		code:<span class="tag">&lt;<span class="name">form:password</span> <span class="attr">path</span>=<span class="string">"code"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		area:<span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"area"</span> <span class="attr">value</span>=<span class="string">"large"</span> /&gt;</span>大</span><br><span class="line">		<span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"area"</span> <span class="attr">value</span>=<span class="string">"small"</span> /&gt;</span>小</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		size:<span class="tag">&lt;<span class="name">form:radiobuttons</span> <span class="attr">path</span>=<span class="string">"size"</span> <span class="attr">items</span>=<span class="string">"$&#123;sizes &#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		province:<span class="tag">&lt;<span class="name">form:radiobuttons</span> <span class="attr">path</span>=<span class="string">"province"</span> <span class="attr">items</span>=<span class="string">"$&#123;provinces &#125;"</span> <span class="attr">itemLabel</span>=<span class="string">"id"</span> <span class="attr">itemValue</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		sold:<span class="tag">&lt;<span class="name">form:checkbox</span> <span class="attr">path</span>=<span class="string">"sold"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		color:<span class="tag">&lt;<span class="name">form:checkboxes</span> <span class="attr">items</span>=<span class="string">"$&#123;colors &#125;"</span> <span class="attr">path</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		province:</span><br><span class="line">		<span class="tag">&lt;<span class="name">form:select</span> <span class="attr">path</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">form:option</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">label</span>=<span class="string">"请选择..."</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">form:options</span> <span class="attr">items</span>=<span class="string">"$&#123;provinces &#125;"</span> <span class="attr">itemLabel</span>=<span class="string">"name"</span> <span class="attr">itemValue</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form:select</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"add"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/result.png" alt></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>6-Hibernate多对多关联映射</title>
    <url>/2020/03/03/6-Hibernate%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>在某高校选课系统中，一个学生可以同时选修多门课程，一门课程可以被若干个学生选修，像这样的多对多关联关系，应该如何实现？</p>
<a id="more"></a>

<p>域模型：<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/manytomany.png" alt></p>
<p>数据关系模型：<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/manytomany_data.png" alt></p>
<h2 id="多对多关联映射"><a href="#多对多关联映射" class="headerlink" title="多对多关联映射"></a>多对多关联映射</h2><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String studentNo;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Course&gt; courseSet = <span class="keyword">new</span> HashSet&lt;Course&gt;();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Course.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 课程名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> credit;  <span class="comment">// 学分</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; studentSet = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">table</span>=<span class="string">"studentcourse"</span> <span class="attr">cascade</span>=<span class="string">"all"</span> <span class="attr">inverse</span>=<span class="string">"false"</span>&gt;</span><span class="comment">&lt;!-- inverse表示控制方，course是被控方 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"studentId"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"Course"</span> <span class="attr">column</span>=<span class="string">"courseId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Course.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">table</span>=<span class="string">"studentcourse"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span><span class="comment">&lt;!-- inverse表示控制方，course是主控方 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"courseId"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">column</span>=<span class="string">"studentId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        save();</span><br><span class="line">        getStudent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存学生和课程信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tran = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = HibernateUtil.openSession();</span><br><span class="line">            tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        	createCourses(session);//新建Course对象，保证course的唯一性</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新建Student对象</span></span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.setName(<span class="string">"张三"</span>);</span><br><span class="line">            student.setStudentNo(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 选出course对象</span></span><br><span class="line">            Course course = session.get(Course<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//建立关联</span></span><br><span class="line">            student.getCourse().add(course);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 保存</span></span><br><span class="line">            session.save(student);</span><br><span class="line">            session.save(course);</span><br><span class="line"></span><br><span class="line">            tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();<span class="comment">// 关闭session</span></span><br><span class="line">            HibernateUtil.closeSessionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createCourses</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">    	Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setName(<span class="string">"程序设计"</span>);</span><br><span class="line">        course.setCredit(<span class="number">3</span>);</span><br><span class="line">        session.save(course);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检索学生，并得到该学生选修的课程信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tran = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = HibernateUtil.openSession();</span><br><span class="line">            tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过OID检索对象</span></span><br><span class="line">            Student student = session.get(Student<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">            <span class="keyword">for</span>(Course cour : student.getCourse())&#123;</span><br><span class="line">                System.out.println(cour.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();<span class="comment">// 关闭session</span></span><br><span class="line">            HibernateUtil.closeSessionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String studentNo;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Course&gt; course = <span class="keyword">new</span> HashSet&lt;Course&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudentNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentNo</span><span class="params">(String studentNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentNo = studentNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name=<span class="string">"studentcourse"</span>, <span class="comment">//指定关联表</span></span><br><span class="line">        joinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"studentId"</span>),<span class="comment">//指向实体对应表的外键</span></span><br><span class="line">        inverseJoinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"courseId"</span>))<span class="comment">//指向所关联的实体对应表的外键</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Course&gt; <span class="title">getCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(Set&lt;Course&gt; course)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Course.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"course"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//课程名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> credit;<span class="comment">//学分</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; student = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCredit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> credit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCredit</span><span class="params">(<span class="keyword">int</span> credit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"course"</span>)<span class="comment">//表示关联关系由Student维护</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Student&gt; <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Set&lt;Student&gt; student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类同上</p>
]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>5-Hibernate一对多关联映射</title>
    <url>/2020/02/28/5-Hibernate%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>通常情况下，在一些购物网站系统中，用户和订单之间的关系就是一对多关联关系，并且对于用户来说需要知道自己有哪些订单，对于商家来说需要知道某个订单属于哪个用户，思考这种情况该如何实现？</p>
<h2 id="数据库一对多关联"><a href="#数据库一对多关联" class="headerlink" title="数据库一对多关联"></a>数据库一对多关联</h2><a id="more"></a>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/DB_oneToMany.png" alt></p>
<h2 id="实现单向一对多关联-user—-gt-orders"><a href="#实现单向一对多关联-user—-gt-orders" class="headerlink" title="实现单向一对多关联(user—&gt;orders)"></a>实现单向一对多关联(user—&gt;orders)</h2><h3 id="使用Set集合，List集合，Map集合"><a href="#使用Set集合，List集合，Map集合" class="headerlink" title="使用Set集合，List集合，Map集合"></a>使用Set集合，List集合，Map集合</h3><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Set orderSet = <span class="keyword">new</span> HashSet&lt;Order&gt;();<span class="comment">//Set</span></span><br><span class="line">	<span class="keyword">private</span> List orderList = <span class="keyword">new</span> ArrayList&lt;Order&gt;();<span class="comment">//List</span></span><br><span class="line">    <span class="keyword">private</span> Map orderMap = <span class="keyword">new</span> HashMap&lt;String, Order&gt;();<span class="comment">//Map</span></span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User.hbn.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.hibernate.entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 映射与Order的一对多关系 key:指定Order中的外键列名 one-to-many中class:指定关联属性的类型--&gt;</span></span><br><span class="line">		     </span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orderSet"</span> <span class="attr">cascade</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- column 属性设定所关联类对应表的外键 --&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span> <span class="attr">name</span>=<span class="string">"orderList"</span> <span class="attr">cascade</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">		    <span class="comment">&lt;!-- 指定orders5表中某个用户的订单的顺序 --&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">index</span> <span class="attr">column</span>=<span class="string">"orderIndex"</span>/&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"orderMap"</span> <span class="attr">cascade</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">		    <span class="comment">&lt;!-- type的string也可换为java.lang.String，但不能是character --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">index</span> <span class="attr">column</span>=<span class="string">"orderKey"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Order.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Order.hbn.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.hibernate.entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Order"</span> <span class="attr">table</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类略</p>
<h2 id="实现单向多对一关联-orders—-gt-user"><a href="#实现单向多对一关联-orders—-gt-user" class="headerlink" title="实现单向多对一关联(orders—&gt;user)"></a>实现单向多对一关联(orders—&gt;user)</h2><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Set orderSet = <span class="keyword">new</span> HashSet&lt;Order&gt;();</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User.hbn.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.hibernate.entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"user5"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 映射与Order的一对多关系 </span></span><br><span class="line"><span class="comment">		     key:指定Order中的外键列名</span></span><br><span class="line"><span class="comment">		     one-to-many中class:指定关联属性的类型--&gt;</span></span><br><span class="line">		     </span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orderSet"</span> <span class="attr">cascade</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Order.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> User user;<span class="comment">//新添加一个User对象，实现映射</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Order.hbn.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.hibernate.entity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Order"</span> <span class="attr">table</span>=<span class="string">"orders5"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 映射与User的多对一关联关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"userId"</span> <span class="attr">class</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类略</p>
<h2 id="注解方式实现双向关联"><a href="#注解方式实现双向关联" class="headerlink" title="注解方式实现双向关联"></a>注解方式实现双向关联</h2><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Set orderSet = <span class="keyword">new</span> HashSet&lt;Order&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(cascade=CascadeType.ALL, mappedBy=<span class="string">"user"</span>, targetEntity=Order<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    //<span class="title">mappedBy</span>：表明是双向关联关系，并且与 <span class="title">user</span> 建立对应,此时不需要设置@<span class="title">JoinColumn</span>(<span class="title">name</span></span>=<span class="string">"userId"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * List对应的需要添加：@OrderColumn(name="orderIndex")：指定ORDER表中记录顺序的列名</span></span><br><span class="line"><span class="comment">     * Map对应的需要添加：@MapKeyColumn(name="orderKey") @MapkeyClass(String.class)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set <span class="title">getOrderSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderSet</span><span class="params">(Set orderSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderSet = orderSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Order.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"orders"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"userId"</span>)<span class="comment">//实现一找多</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//         saveUser();</span></span><br><span class="line"><span class="comment">//        addOrders();</span></span><br><span class="line"><span class="comment">//        getUser();</span></span><br><span class="line">        getOrder();</span><br><span class="line"><span class="comment">//         deleteUser();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化User对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tran = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = HibernateUtil.openSession();</span><br><span class="line">            tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新建对象</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">            user.setPassword(<span class="string">"111111"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存用户</span></span><br><span class="line">            session.save(user);</span><br><span class="line"></span><br><span class="line">            tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();<span class="comment">// 关闭session</span></span><br><span class="line">            HibernateUtil.closeSessionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为已存在的user对象添加订单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tran = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = HibernateUtil.openSession();</span><br><span class="line">            tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检索user对象</span></span><br><span class="line">            User user = session.get(User<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//新建Order对象</span></span><br><span class="line">            Order order = <span class="keyword">new</span> Order();</span><br><span class="line">            order.setPrice(<span class="number">30.0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//建立关联</span></span><br><span class="line"><span class="comment">//            user.getOrderSet().add(order);//user方不能维护关联关系</span></span><br><span class="line">            order.setUser(user);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新用户</span></span><br><span class="line">            session.save(order);</span><br><span class="line"></span><br><span class="line">            tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();<span class="comment">// 关闭session</span></span><br><span class="line">            HibernateUtil.closeSessionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检索用户对象，并获得所关联的订单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tran = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = HibernateUtil.openSession();</span><br><span class="line">            tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过OID检索对象</span></span><br><span class="line">            User user = session.get(User<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">            System.out.println(user.getOrderSet().size());</span><br><span class="line"></span><br><span class="line">            tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();<span class="comment">// 关闭session</span></span><br><span class="line">            HibernateUtil.closeSessionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检索订单对象，并获得所关联的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tran = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = HibernateUtil.openSession();</span><br><span class="line">            tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过OID检索对象</span></span><br><span class="line">            Order order = session.get(Order<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line">            System.out.println(order.getUser().getUserName());</span><br><span class="line"></span><br><span class="line">            tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();<span class="comment">// 关闭session</span></span><br><span class="line">            HibernateUtil.closeSessionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户，并级联删除所关联的订单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tran = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = HibernateUtil.openSession();</span><br><span class="line">            tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检索对象</span></span><br><span class="line">            User user = session.get(User<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Integer</span>(1))</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除对象</span></span><br><span class="line">            session.delete(user);</span><br><span class="line"></span><br><span class="line">            tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();<span class="comment">// 关闭session</span></span><br><span class="line">            HibernateUtil.closeSessionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>6-SpringMVC2</title>
    <url>/2020/02/27/6-SpringMVC2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>5-SpringMVC1</title>
    <url>/2020/02/27/5-SpringMVC1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="程序搭建过程"><a href="#程序搭建过程" class="headerlink" title="程序搭建过程"></a>程序搭建过程</h2><ol>
<li>创建web工程，导入jar</li>
<li>配置xml文件 3个(web.xml，spring-mvc.xml，applicationContext.xml)<a id="more"></a>
web.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvcdemo1<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">			classpath*:/applicationContext.xml</span><br><span class="line">		<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring-mvc.xml，与web.xml在同一目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 自动扫描且只扫描@Controller --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cakeonline"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 基于注解驱动的SpringMVC --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- mvc:annotation-driven enable-matrix-variables="true" / --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 定义JSP文件的位置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring公共配置 <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置Spring上下文的注解 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cakeonline"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写JSP页面和Controller（@Controller,@RequestMapping,@PathVariable,@RequestParam）</li>
</ol>
<h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><h3 id="回顾MVC"><a href="#回顾MVC" class="headerlink" title="回顾MVC"></a>回顾MVC</h3><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/MVC.png" alt></p>
<h3 id="SpringMVC体系结构"><a href="#SpringMVC体系结构" class="headerlink" title="SpringMVC体系结构"></a>SpringMVC体系结构</h3><p>SpringMVC是基于请求驱动，围绕一个核心Servlet 转发请求到对应的Controller而设计的</p>
<p>优点：</p>
<ol>
<li>是一个典型的MVC构架，易学易用</li>
<li>提供了清晰的角色划分，比如Controller、validator、handler mapping、view resolver等</li>
<li>业务代码可重用</li>
<li>可定制的数据绑定和验证，可定制的视图解决方案</li>
<li>提供了一套强大又使用简单的标签库</li>
<li>支持Restful风格</li>
</ol>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/mvc_architecture.png" alt></p>
<p>步骤：</p>
<ol>
<li>客户端发出请求，交给DispatcherServlet处理</li>
<li>DispatcherServlet根据请求信息及HandlerMapping的配置找到处理请求的处理器（Handler）</li>
<li>DispatcherServlet通过HandlerAdapter对Handler进行封装，再以统一的适配器接口调用Handler</li>
<li>处理器完成业务逻辑，返回一个ModelAndVIew给DispatcherServlet，ModelAndView包含视图逻辑名和模型数据信息</li>
<li>DispatcherServlet借由ViewResolver完成逻辑视图名到真实视图的解析工作</li>
<li>得到View真实视图后，DispatcherServlet就使用这个View对象对ModelAndView中的模型数据进行渲染</li>
<li>最终客户得到响应</li>
</ol>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/mvc_lifestyle.png" alt></p>
<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><ol>
<li><p>DispatcherServlet继承自HttpServlet，是整个SpringMVC中的前端控制器，主要负责流程控制</p>
</li>
<li><p>DispatcherServlet使用了专有的Bean来处理请求和渲染视图，可以在WebApplicationContext中进行配置，这些Bean包括：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">Bean类型</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">HandlerMapping</td>
<td align="left">将传入请求映射到处理器</td>
</tr>
<tr>
<td align="left">HandlerAdapter</td>
<td align="left">将处理器包装为适配器，从而支持多种类型的处理器</td>
</tr>
<tr>
<td align="left">ViewResolver</td>
<td align="left">将逻辑视图名解析为具体的View</td>
</tr>
<tr>
<td align="left">LocaleResolver &amp; LocaleContextResolver</td>
<td align="left">解释客户端所在地区和其时区(本地化)，以便提供国际化的视图</td>
</tr>
<tr>
<td align="left">ThemeResolver</td>
<td align="left">解释Web程序可用主题，比如提供个性化布局</td>
</tr>
<tr>
<td align="left">MultipartResolver</td>
<td align="left">解释multi-part请求，比如表单里支持文件上传</td>
</tr>
</tbody></table>
<ol start="3">
<li>当一个请求传进来后，DispatcherServlet会按以下顺序处理：<ol>
<li>寻找 WebApplicationContext，并将 WebApplicationContext作为一个属性绑定到请求里，以便控制器或其他原件在后续中使用。默认会以DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE 键绑定到请求里</li>
<li>将本地化解析器绑定到请求里，以便在处理这个请求时，原件可以解析到客户端的地区（为了渲染视图，准备日期等）</li>
<li>将主题解析其绑定到请求里，让原件（如视图）决定去使用哪一种主题</li>
<li>若指定一个multipart file解析器，会检查这个请求包含multiparts请求</li>
<li>寻找合适的 handler。如何找到这个 handler，执行与这个 handler 关联的执行链</li>
<li>如果返回一个 model，渲染相对应的视图</li>
</ol>
</li>
</ol>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ol>
<li>@Controller表明被注解的类为控制器，该类不需要继承任何Controller的基类或者引用任意的ServletAPI，当然如果需要可以使用ServletAPI</li>
<li>spring-mvc.xml</li>
<li>Controller类<h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4></li>
</ol>
<ul>
<li>@RequestMapping用于映射URL，该注解可以写在类级别上，也可以写在方法级别上</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"helloworld!"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hi"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相对于该路径的，上面的方法映射的URL路径是：/user/hello，<strong>推荐使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"helloworld!"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hi"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接映射方法注解上的路径，上面的方法映射的URL路径是：/hello</p>
<ul>
<li>@RequestMapping中，还可以使用method来限制请求的类型，执行不同操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"add"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//数据库查询，查蛋糕类型，存入到request</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"cake"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"add"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//获取蛋糕的相关参数，插入数据库</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>URI模版是一个类似于URI的字符串，其中包含了一个或多个变量。当你将这些变量替换掉时，就变回了URI</li>
</ul>
<p>例：/cake/get/3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cake"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CakeController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"get/&#123;cakeId&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(@PathVariable <span class="keyword">int</span> cakeId)</span> </span>&#123;</span><br><span class="line">		System.out.println(cakeId);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>@RequestParam将请求参数绑定到方法参法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, required=<span class="keyword">true</span>, defaultValue=<span class="string">"1"</span>)</span> String name,</span></span><br><span class="line"><span class="function">			 @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"pageNum"</span>, defaultValue=<span class="string">"1"</span>)</span><span class="keyword">int</span> pageNum) </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"helloworld!"</span>+name);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hi"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RequestParam和-PathVariable的区别"><a href="#RequestParam和-PathVariable的区别" class="headerlink" title="@RequestParam和@PathVariable的区别"></a>@RequestParam和@PathVariable的区别</h4><ol>
<li>@RequestParam拿到的是传统的传参方式，例：form表单</li>
<li>@PathVariable页面请求路径中的参数，例：/user/login/zs</li>
</ol>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>SpringMVC中的拦截器是相当重要的，它的主要作用是拦截用户的请求并进行相应的处理，通常的还有如下作用：日志记录、权限检查、性能监控、通用行为</p>
<p>spring-mvc.xml中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span>		<span class="comment">&lt;!-- 拦截所有请求 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login"</span> /&gt;</span>			<span class="comment">&lt;!-- 不拦截/user/login请求 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myschool.user.LoginTimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>	<span class="comment">&lt;!-- 拦截器类 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>LoginTimeInterceptor拦截器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myschool.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginTimeInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">			ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line">		Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> hour = cal.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">8</span> &lt;= hour &amp;&amp; hour &lt; <span class="number">17</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        	response.sendRedirect(<span class="string">"index.jsp"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		return true;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>SpringMVC提供了2种常用的方法来实现</p>
<ul>
<li>基于Servlet3.0的文件上传</li>
<li>基于Commons FileUpload的文件上传（最常用）</li>
</ul>
<p>介绍Commons Fileupload方法</p>
<ol>
<li>导入commons-fileupload.jar和commons-io.jar</li>
<li>在spring-mvc.xml中加入</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"200000"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>index.jsp</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload1"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upfile"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	=============================================</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload2"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upfile"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	=============================================</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload3"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upfile"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upfile"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>UploadController类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"upload1"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload1</span><span class="params">(@RequestParam(value=<span class="string">"title"</span>)</span> String title,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"upfile"</span>)</span> MultipartFile file,</span></span><br><span class="line"><span class="function">            HttpServletRequest request)</span>&#123;</span><br><span class="line">		System.out.println(title);</span><br><span class="line">		String rootPath=request.getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">		<span class="keyword">if</span>(!file.isEmpty())&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				InputStream is=file.getInputStream();</span><br><span class="line">				FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">						rootPath+<span class="string">"/"</span>+<span class="string">"upload/"</span></span><br><span class="line">						+file.getOriginalFilename());</span><br><span class="line">				<span class="keyword">byte</span> []cache=<span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">				fos.write(cache);</span><br><span class="line">				is.close();</span><br><span class="line">				fos.flush();</span><br><span class="line">				fos.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"upload2"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload2</span><span class="params">(@RequestParam(value=<span class="string">"title"</span>)</span> String title,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"upfile"</span>)</span> MultipartFile file,</span></span><br><span class="line"><span class="function">            HttpServletRequest request)</span>&#123;</span><br><span class="line">		System.out.println(title);</span><br><span class="line">		String rootPath=request.getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileCopyUtils.copy(file.getBytes(), </span><br><span class="line">					<span class="keyword">new</span> File(rootPath+<span class="string">"/upload"</span>,file.getOriginalFilename()));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"upload3"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload3</span><span class="params">(@RequestParam(value=<span class="string">"title"</span>)</span> String title,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"upfile"</span>)</span> MultipartFile []file,</span></span><br><span class="line"><span class="function">            HttpServletRequest request)</span>&#123;</span><br><span class="line">		System.out.println(title);</span><br><span class="line">		String rootPath=request.getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">for</span>(MultipartFile temp:file)</span><br><span class="line">				FileCopyUtils.copy(temp.getBytes(), </span><br><span class="line">						<span class="keyword">new</span> File(rootPath+<span class="string">"/upload"</span>,temp.getOriginalFilename()));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>4-AOP</title>
    <url>/2020/02/27/4-AOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>代理对象与被代理对象必须实现同一个接口，在代理对象中实现日志等服务<br>问题：</p>
<ol>
<li>代理对象的一个接口只服务于一种类型的对象</li>
<li>如果要代理的方法很多，要为每种方法进行代理</li>
<li>静态代理在程序规模稍大时无法胜任</li>
</ol>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul>
<li>InvocationHandler接口</li>
<li>关键：使用Proxy.newProxyInstance()静态方法建立一个代理对象(建立代理对象必须告知要代理的接口)</li>
<li>操作代理对象时会执行invoke()方法</li>
</ul>
<a id="more"></a>

<h2 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h2><p>AOP（ Aspect-Oriented Programming ，面向切面编程）</p>
<ul>
<li><p>提供了一种新的组织程序结构的思路</p>
</li>
<li><p>是对OOP的补充，而不是替代，经常和OOP一起使用</p>
</li>
<li><p>OOP的核心单位是类，而AOP则是切面</p>
</li>
<li><p>典型的例子包括日志、验证、事务管理等</p>
</li>
<li><p>优点：</p>
<ul>
<li>使开发人员集中关注于系统的核心业务逻辑</li>
<li>更利于创建松散的、可复用、可扩展的软件系统</li>
</ul>
</li>
<li><p>关注点：一个关注点可以是一个特定的问题、概念或者程序要达到的一个目标。比如日志记录等都是关注点。如果一个关注点的代码被多个类或方法引用，这个关注点就被称为横切关注点</p>
</li>
<li><p>切面：一个切面是对一个横切关注点的模块化</p>
</li>
<li><p>连接点：程序执行过程中的某个点，如方法调用或者抛出异常等</p>
</li>
<li><p>通知：在特定的连接点应该执行的动作，在多数AOP框架中，通知都是由拦截器实现的，Spring AOP也是如此（定义何时）</p>
<ul>
<li>通知（Advice）类型：<ul>
<li>前置通知(Before advice)：在某连接点之前执行的通知 </li>
<li>后置通知(After returning advice)：在某连接点正常完成后执行的通知</li>
<li>异常通知(After throwing advice)：在方法抛出异常退出时执行的通知</li>
<li>最终通知(After finally advice)：当某连接点退出的时候执行的通知</li>
<li>环绕通知(Around advice)：包围一个连接点的通知，这是最强大的一种通知类型</li>
</ul>
</li>
</ul>
</li>
<li><p>切入点：定义在哪些连接点处使用通知，在应用中一般通过指定类名、方法名或者匹配类名、方法名的正则表达式来指定切入点（何地）</p>
</li>
<li><p>目标对象：被切面所通知的对象</p>
</li>
<li><p>织入：将切面应用到目标对象，从而创建新的代理对象</p>
</li>
</ul>
<p>AOP示意图：<br><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/AOP.png" alt></p>
<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><ul>
<li>Spring AOP是由纯Java语言实现</li>
<li>Spring AOP和其他AOP框架不同，目的并不是提供最完整的AOP，目前仅支持方法执行上的连接点；但是他和Spring的IoC集成紧密，可以帮助解决企业应用中的常见问题</li>
<li>当Spring AOP不能满足我们的需求时，可以采用其他AOP框架，比如AspectJ，Spring框架可以很好的集成诸如AspectJ等框架，他们是互补的</li>
</ul>
<h3 id="实现：Spring-AOP提供了3种实现方式"><a href="#实现：Spring-AOP提供了3种实现方式" class="headerlink" title="实现：Spring AOP提供了3种实现方式"></a>实现：Spring AOP提供了3种实现方式</h3><ul>
<li>实现SpringAPI的传统方式<ul>
<li>步骤：编写通知，编写切点，Spring自动创建代理对象</li>
</ul>
</li>
<li>纯POJO类（Advice不用实现任何接口）<ul>
<li>一种基于Schema的XML配置，用<aop>标签<ul>
<li>通知不需要实现特定的接口</li>
<li>切面都集中在xml文件中，更加集中、清晰</li>
</ul>
</aop></li>
<li>一种基于注解驱动的切面<ul>
<li>@AspectJ 是一种使用普通Java类注解来声明AOP切面的方式</li>
<li>开启@AspectJ支持<ul>
<li>开启Java的配置方式：@EnableAspectJAutoProxy</li>
<li>开启Xml的配置方式：&lt;aop:aspectj-autoproxy /&gt;</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>使用AspectJ切面</li>
</ul>
<p>Spring AOP生成代理原理图：</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/SpringAOP.png" alt></p>
<h2 id="例子：实现用户的注册登录功能"><a href="#例子：实现用户的注册登录功能" class="headerlink" title="例子：实现用户的注册登录功能"></a>例子：实现用户的注册登录功能</h2><h3 id="代理法"><a href="#代理法" class="headerlink" title="代理法"></a>代理法</h3><p>bean.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.user.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Md5Advice"</span> <span class="attr">class</span>=<span class="string">"com.advice.Md5Advice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"LogAdvice"</span> <span class="attr">class</span>=<span class="string">"com.advice.LogAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"RegistExceptionAdvice"</span> <span class="attr">class</span>=<span class="string">"com.advice.RegistExceptionAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"TimeAdvice"</span> <span class="attr">class</span>=<span class="string">"com.advice.TimeAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.user.UserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>Md5Advice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>LogAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>TimeAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserService:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserServiceImpl:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"密码是："</span>+password);</span><br><span class="line">		System.out.println(<span class="string">"业务逻辑：用户adi注册成功"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"adi"</span>) &amp;&amp; password.equals(<span class="string">"123"</span>))&#123;</span><br><span class="line">			System.out.println(<span class="string">"业务逻辑：用户adi登录成功"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"业务逻辑：用户adi登录失败"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Md5Advice(前置通知):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Advice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 前置通知</span></span><br><span class="line"><span class="comment">	 * arg0是调用的方法</span></span><br><span class="line"><span class="comment">	 * arg1是方法传进来的value值</span></span><br><span class="line"><span class="comment">	 * arg2是哪个类</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method arg0, Object[] arg1, Object arg2)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"----------前置通知开始----------"</span>);</span><br><span class="line">		System.out.println(arg0.getName());</span><br><span class="line">		System.out.println(arg1[<span class="number">1</span>]);</span><br><span class="line">		System.out.println(arg2.getClass().getName());</span><br><span class="line"><span class="comment">//		String newPwd = Md5Encode.getMD5(arg1[1].toString().getBytes());</span></span><br><span class="line"><span class="comment">//		arg1[1] = newPwd;//改变密码值</span></span><br><span class="line">		System.out.println(<span class="string">"----------前置通知结束----------"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LogAdvice（后置通知）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdvice</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 后置通知</span></span><br><span class="line"><span class="comment">	 * arg0是方法返回值</span></span><br><span class="line"><span class="comment">	 * arg1是方法的名字</span></span><br><span class="line"><span class="comment">	 * arg2是方法的value值</span></span><br><span class="line"><span class="comment">	 * arg3是哪个类</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object arg0, Method arg1, Object[] arg2, Object arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"----------后置通知开始----------"</span>);</span><br><span class="line">		System.out.println(arg0);</span><br><span class="line">		System.out.println(arg3);</span><br><span class="line">		System.out.println(arg2[<span class="number">0</span>]+<span class="string">"在"</span>+<span class="keyword">new</span> Date().toLocaleString()+<span class="string">"登录"</span>);</span><br><span class="line"><span class="comment">//		arg0=false;</span></span><br><span class="line">		System.out.println(<span class="string">"----------后置通知结束----------"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RegistExceptionAdvice（异常通知）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistExceptionAdvice</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 异常通知，可打印异常信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"异常通知发生异常"</span>+e.getMessage());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TimeAdvice（环绕通知）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 环绕通知，可以控制方法的进行，通常进行权限的设置</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation arg0)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"方法开始执行时间："</span>+<span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">		</span><br><span class="line">		Object result = arg0.proceed();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"方法结束执行时间："</span>+<span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Md5Encode(MD5加密工具类)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Encode</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(<span class="keyword">byte</span>[] source)</span> </span>&#123;</span><br><span class="line">		String s = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">char</span> hexDigits[] = &#123; <span class="comment">// 用来将字节转换成 16 进制表示的字符</span></span><br><span class="line">				<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span> &#125;;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			java.security.MessageDigest md = java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">			md.update(source);</span><br><span class="line">			<span class="keyword">byte</span> tmp[] = md.digest(); <span class="comment">// MD5 的计算结果是一个 128 位的长整数，</span></span><br><span class="line">										<span class="comment">// 用字节表示就是 16 个字节</span></span><br><span class="line">			<span class="keyword">char</span> str[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">16</span> * <span class="number">2</span>]; <span class="comment">// 每个字节用 16 进制表示的话，使用两个字符，</span></span><br><span class="line">											<span class="comment">// 所以表示成 16 进制需要 32 个字符</span></span><br><span class="line">			<span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">// 表示转换结果中对应的字符位置</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123; <span class="comment">// 从第一个字节开始，对 MD5 的每一个字节</span></span><br><span class="line">											<span class="comment">// 转换成 16 进制字符的转换</span></span><br><span class="line">				<span class="keyword">byte</span> byte0 = tmp[i]; <span class="comment">// 取第 i 个字节</span></span><br><span class="line">				str[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>]; <span class="comment">// 取字节中高 4 位的数字转换,</span></span><br><span class="line">															<span class="comment">// &gt;&gt;&gt; 为逻辑右移，将符号位一起右移</span></span><br><span class="line">				str[k++] = hexDigits[byte0 &amp; <span class="number">0xf</span>]; <span class="comment">// 取字节中低 4 位的数字转换</span></span><br><span class="line">			&#125;</span><br><span class="line">			s = <span class="keyword">new</span> String(str); <span class="comment">// 换后的结果转换为字符串</span></span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test（测试类）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">		UserService us = (UserService)ctx.getBean(<span class="string">"UserProxy"</span>);</span><br><span class="line">		us.regist(<span class="string">"adi"</span>, <span class="string">"123"</span>);</span><br><span class="line"><span class="comment">//		boolean bool = us.login("adi", "123");</span></span><br><span class="line"><span class="comment">//		System.out.println(bool);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xml方法"><a href="#xml方法" class="headerlink" title="xml方法"></a>xml方法</h3><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop  </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 业务逻辑 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.user.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- advices --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"MyAdvice"</span> <span class="attr">class</span>=<span class="string">"com.advices.MyAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;aop:pointcut expression="execution(* com.user.*.*(..))" id="mypc"/&gt; </span></span><br><span class="line"><span class="comment">			&lt;aop:aspect id="MyAspect" ref="MyAdvice" order="2"&gt; &lt;aop:before method="before" </span></span><br><span class="line"><span class="comment">			pointcut-ref="mypc"/&gt; &lt;/aop:aspect&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"MyAspect"</span> <span class="attr">ref</span>=<span class="string">"MyAdvice"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.user.*.*(..))"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span></span></span><br><span class="line"><span class="tag">				<span class="attr">pointcut</span>=<span class="string">"execution(* com.user.*.*(..))"</span> <span class="attr">returning</span>=<span class="string">"result"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.user.*.*(..))"</span> /&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--aop:after-throwing method="throwExMethod" pointcut="execution(* service.*.*(..))" </span></span><br><span class="line"><span class="comment">				throwing="ex"/ --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.user.*.*(..))"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyAdvice.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知"</span>);</span><br><span class="line">		Object[] args = joinPoint.getArgs();</span><br><span class="line">		Object result = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			result = joinPoint.proceed(args);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知"</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwMethod</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"业务执行，登录成功"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">		UserService us = (UserService)ctx.getBean(<span class="string">"UserServiceImpl"</span>);</span><br><span class="line">		us.login(<span class="string">"adi"</span>, <span class="string">"123"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解方法"><a href="#注解方法" class="headerlink" title="注解方法"></a>注解方法</h3><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop  </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 这部分是加入通知的代码 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyAdvice.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明AOP切面</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)<span class="comment">//控制执行顺序，数值越小先执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* com.user.*.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterReturning</span>(pointcut = <span class="string">"execution(* com.user.UserServiceImpl.*(..))"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span>(<span class="string">"execution(* com.user.*.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"execution(* com.user.*.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知"</span>);</span><br><span class="line">		Object[] args = joinPoint.getArgs();</span><br><span class="line">		Object result = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			result = joinPoint.proceed(args);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知"</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(* com.user.*.*(..))"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwMethod</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"UserServiceImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> <span class="keyword">throws</span> RuntimeException</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"业务执行，登录成功"</span>);</span><br><span class="line"><span class="comment">//		int num = 10/0;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3-SpringEL和数据验证</title>
    <url>/2020/02/27/3-SpringEL%E5%92%8C%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><ul>
<li>数据验证不应该被限定在web层去处理，它应该在任何需要做数据验证的地方做验证</li>
<li>基于以上考虑，Spring设计了一个既方便又可以在所有层使用的Validator接口</li>
<li>Spring提供了Validator接口来进行对对象的验证，该接口实现2个方法<ul>
<li>supports(Class)-判断该validator是否能校验提供的class的实例</li>
<li>validate(Object, org.springframework.validation.Errors)- 校验给定的对象，如果有校验失败信息，将其放入Errors对象</li>
</ul>
</li>
<li>SpringMVC还支持声明式验证@Controller输入</li>
</ul>
<a id="more"></a>

<p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserValidator.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; arg0)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> User<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">arg0</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object arg0, Errors arg1)</span> </span>&#123;</span><br><span class="line">		ValidationUtils.rejectIfEmpty(arg1, <span class="string">"id"</span>, <span class="string">"id can't be null"</span>, <span class="string">"id不能为空"</span>);</span><br><span class="line">		User u=(User)arg0;</span><br><span class="line">		ValidationUtils.rejectIfEmpty(arg1, <span class="string">"name"</span>, <span class="string">"name.empty"</span>, <span class="string">"用户名不能为空"</span>);</span><br><span class="line">		<span class="keyword">if</span>(u.getBirthday().getTime()&gt;<span class="keyword">new</span> Date().getTime())&#123;</span><br><span class="line">			arg1.rejectValue(<span class="string">"birthday"</span>, <span class="string">"birthday.wrong"</span>, <span class="string">"出生日期不能晚于当前时间"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		User u=<span class="keyword">new</span> User();</span><br><span class="line">		u.setBirthday(<span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime()+<span class="number">1000</span>));</span><br><span class="line">		</span><br><span class="line">		Errors e=<span class="keyword">new</span> BindException(u, <span class="string">"User"</span>);</span><br><span class="line">		Validator v=<span class="keyword">new</span> UserValidator();</span><br><span class="line">		v.validate(u, e);</span><br><span class="line">		List&lt;ObjectError&gt; list=e.getAllErrors();</span><br><span class="line">		<span class="keyword">for</span>(ObjectError temp:list)&#123;</span><br><span class="line">			System.out.println(temp.getCode());</span><br><span class="line">			System.out.println(temp.getDefaultMessage());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringEL"><a href="#SpringEL" class="headerlink" title="SpringEL"></a>SpringEL</h2><p>表达式的语法形式：#{&lt;表达式字符串&gt;}</p>
<h3 id="SpringEL方法"><a href="#SpringEL方法" class="headerlink" title="SpringEL方法"></a>SpringEL方法</h3><p>SpringEL允许开发者将一个对象的属性注入给另一个对象属性，也可以调用一个对象的方法，并将返回值注入给另一个对象的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;' tea'. toupperCase()&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String upName;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123; mathutil. getLength()&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> itemLength;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123; mathutil. getArea(3)&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> itemArea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"mathUtil"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mathutil</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Math. PI*r*r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringEL构造"><a href="#SpringEL构造" class="headerlink" title="SpringEL构造"></a>SpringEL构造</h3><p>SpringEL允许开发者调用new关键字，实现构造方法调用，并实例化出对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computerl</span></span>&#123;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;new com.constructor.Memory1()&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> Memoryl memory1;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;new int[]&#123;1,2,3&#125;&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> [] count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringEL操作符"><a href="#SpringEL操作符" class="headerlink" title="SpringEL操作符"></a>SpringEL操作符</h3><p>SpringEL支持大多数的算数运算符、关系运算符、逻辑运算符、三元运算符等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathItem</span></span>&#123;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;3+5&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num1;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;3^3&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num2;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;5&gt;4&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> num3;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;5+3&gt;4&amp;&amp;3&gt;2&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> num4;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;mathItem. num1&gt;mathItem. num2?' numl':' num2'&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String num5;</span><br></pre></td></tr></table></figure>

<h3 id="SpringEL集合"><a href="#SpringEL集合" class="headerlink" title="SpringEL集合"></a>SpringEL集合</h3><ul>
<li>SpringEL支持对List、Properties、Map等集合的操作，还支持集合选择、集合投影等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;dataItem. list&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> List list;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;datartem. list[1]&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String listValue;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;dataItem. map['2']&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String mapValue;</span><br></pre></td></tr></table></figure>

<ul>
<li>SpringEL集合选择<ul>
<li>.?[]可以设置筛选条件</li>
<li>.^[]获取第一个匹配项</li>
<li>.$[]获取最后一个匹配项</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;dataItem.students.?[stuId&gt;1]&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> List sublist;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;dataItem.map.?[key=='3']&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Map subMap;</span><br></pre></td></tr></table></figure>

<ul>
<li>集合投影：  .![]可以选择特定属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;dataItem. students.![stuName]&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> List namelist;</span><br></pre></td></tr></table></figure>

<ul>
<li>SpringEL 集合选择和集合投影结合使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;dataItem.students.?[stuId&gt;1].![stuName]&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> List nameList;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2-Spring-Beans和生命周期（对象实例化及属性注入-xml方式）</title>
    <url>/2020/02/27/2-Spring-Beans%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%8F%8A%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="xml配置的方式进行实例化"><a href="#xml配置的方式进行实例化" class="headerlink" title="xml配置的方式进行实例化"></a>xml配置的方式进行实例化</h2><h3 id="配置文件中bean标签的属性"><a href="#配置文件中bean标签的属性" class="headerlink" title="配置文件中bean标签的属性"></a>配置文件中bean标签的属性</h3><p>（1）id属性：起名称，id属性值名称任意命名 </p>
<ul>
<li>id属性值，不能包含特殊符号 </li>
<li>根据id值得到配置对象</li>
</ul>
<p>（2）class属性：创建对象所在类的全路径</p>
<p>（3）name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号</p>
<p>（4）scope属性 </p>
<ul>
<li>singleton：默认值，单例 </li>
<li>prototype：多例</li>
</ul>
<a id="more"></a>

<h3 id="无参构造实例化对象"><a href="#无参构造实例化对象" class="headerlink" title="无参构造实例化对象"></a>无参构造实例化对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//phone类：</span></span><br><span class="line"><span class="keyword">package</span> com.test.vo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Phone......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--applicationContext.xml配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入约束--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">class</span>=<span class="string">"com.test.vo.Phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件，创建对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//得到配置创建的对象</span></span><br><span class="line">        Phone Phone = (Phone) context.getBean(<span class="string">"phone"</span>);</span><br><span class="line">        <span class="comment">//调用对象方法</span></span><br><span class="line">        Phone.printTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：java类中默认有无参构造方法，若类中已声明了有参构造，则需手动声明无参构造方法。</p>
<h3 id="使用静态工厂进行创建"><a href="#使用静态工厂进行创建" class="headerlink" title="使用静态工厂进行创建"></a>使用静态工厂进行创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态工厂类</span></span><br><span class="line"><span class="keyword">package</span> com.test.utils;</span><br><span class="line"><span class="keyword">import</span> com.test.vo.Phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态方法，返回Phone对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Phone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//创建的对象为Phone类对象不变</span><br><span class="line">//配置文件改为：</span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入约束--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--class为静态工厂的路径，factory-method为工厂的方法--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phoneFa"</span> <span class="attr">class</span>=<span class="string">"com.test.utils.BeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPhone"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Phone Phone = (Phone) context.getBean(<span class="string">"phoneFa"</span>);</span><br><span class="line">        Phone.printTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用实例工厂进行创建"><a href="#使用实例工厂进行创建" class="headerlink" title="使用实例工厂进行创建"></a>使用实例工厂进行创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实列工厂类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//普通方法，返回Phone对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Phone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">配置文件修改：</span><br><span class="line"><span class="comment">&lt;!-- 1.先创建工厂对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.再创建Phone对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BeanUFactory"</span> <span class="attr">class</span>=<span class="string">"com.test.utils.BeanUFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phoneUFa"</span> <span class="attr">factory-bean</span>=<span class="string">"BeanUFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPhone"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Phone Phone = (Phone) context.getBean(<span class="string">"phoneUFa"</span>);</span><br><span class="line">        Phone.printTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><h3 id="使用有参数构造方法注入属性："><a href="#使用有参数构造方法注入属性：" class="headerlink" title="使用有参数构造方法注入属性："></a>使用有参数构造方法注入属性：</h3><p>Phone类改写为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//显示声明无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(name+<span class="string">"Phone......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>applicationContext.xml配置文件修改为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入约束--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--class为静态工厂的路径，factory-method为工厂的方法--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phoneFa"</span> <span class="attr">class</span>=<span class="string">"com.test.utils.BeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPhone"</span>&gt;</span></span><br><span class="line">   		<span class="comment">&lt;!--name为构造方法的参数名，value为要将其设置的值--&gt;</span></span><br><span class="line">   			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"诺基亚"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Phone Phone = (Phone) context.getBean(<span class="string">"phoneFa"</span>);</span><br><span class="line">        Phone.printTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><code>诺基亚Phone.......</code></p>
<h3 id="使用set方法注入属性："><a href="#使用set方法注入属性：" class="headerlink" title="使用set方法注入属性："></a>使用set方法注入属性：</h3><p>Phone类改写为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(name+<span class="string">"Phone......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>applicationContext.xml配置文件修改为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入约束--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--class为静态工厂的路径，factory-method为工厂的方法--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phoneFa"</span> <span class="attr">class</span>=<span class="string">"com.test.utils.BeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPhone"</span>&gt;</span></span><br><span class="line">	   <span class="comment">&lt;!--name为要注入的属性的名称，value为要将其设置的值--&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"三星"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><code>三星Phone.......</code></p>
<h3 id="注入对象类型属性"><a href="#注入对象类型属性" class="headerlink" title="注入对象类型属性"></a>注入对象类型属性</h3><p>新建Person类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Phone类修改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(person.getName()+<span class="string">"::"</span>+person.getAge()+<span class="string">"::"</span>+person.getSex());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件作如下修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.vo.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小王"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"man"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">class</span>=<span class="string">"com.test.vo.Phone"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 因注入的是对象写ref属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">ref</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试方法不变，结果为：</p>
<p><code>小王::11::man</code></p>
<h3 id="注入复杂类型属性"><a href="#注入复杂类型属性" class="headerlink" title="注入复杂类型属性"></a>注入复杂类型属性</h3><p>Phone类修改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String arr[];</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArr</span><span class="params">(String[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"arr:"</span>+Arrays.toString(arr));</span><br><span class="line">        System.out.println(<span class="string">"list:"</span>+list);</span><br><span class="line">        System.out.println(<span class="string">"map:"</span>+map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件作如下修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">class</span>=<span class="string">"com.test.vo.Phone"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数组 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arr"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小米<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>中兴<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- list集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- map集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aa"</span> <span class="attr">value</span>=<span class="string">"lucy"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bb"</span> <span class="attr">value</span>=<span class="string">"bob"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"cc"</span> <span class="attr">value</span>=<span class="string">"jerry"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr:[小米, 中兴, 华为]</span><br><span class="line">list:[1, 2, 3]</span><br><span class="line">map:&#123;aa&#x3D;lucy, bb&#x3D;bob, cc&#x3D;jerry&#125;</span><br></pre></td></tr></table></figure>

<p>转载自：<a href="https://blog.csdn.net/weixin_40425481/article/details/82183804" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2-Spring-Beans和生命周期（对象实例化及属性注入-注解方式）</title>
    <url>/2020/02/27/2-Spring-Beans%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%8F%8A%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5-xml%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过xml的方式进行对象的实列化或属性注入或许有一些繁琐，所以在开发中常用的方式更多是通过注解的方式实现对象实例化和属性注入的。</p>
<h2 id="使用注解创建对象"><a href="#使用注解创建对象" class="headerlink" title="使用注解创建对象"></a>使用注解创建对象</h2><p>Spring配置文件(beans.xml)：</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 开启注解扫描 ,到包里面扫描类、方法、属性上面是否有注解--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Person类对象代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用<span class="doctag">@Component</span>创建对象,对象名为person</span></span><br><span class="line"><span class="comment"> * 用<span class="doctag">@Scope</span>声明value为prototype，是创建多列对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"............person"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">		Person person = (Person) context.getBean(<span class="string">"person"</span>);</span><br><span class="line">		person.add();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解注入属性"><a href="#注解注入属性" class="headerlink" title="注解注入属性"></a>注解注入属性</h2><h3 id="Autowired注解进行注入（例：经Dao注入到Service中）："><a href="#Autowired注解进行注入（例：经Dao注入到Service中）：" class="headerlink" title="@Autowired注解进行注入（例：经Dao注入到Service中）："></a>@Autowired注解进行注入（例：经Dao注入到Service中）：</h3><p>Daotest:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"daotest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"............DaoTest"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ServiceTest:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"servicetest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	DaoTest dao;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">".........Service"</span>);</span><br><span class="line">		dao.printDao();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类Test：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beanTest1.xml"</span>);</span><br><span class="line">		ServiceTest servicetest = (ServiceTest) context.getBean(<span class="string">"servicetest"</span>);</span><br><span class="line">		servicetest.printService();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Resource进行注入"><a href="#Resource进行注入" class="headerlink" title="@Resource进行注入"></a>@Resource进行注入</h3><p>则ServiceTest改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"servicetest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Resource</span>(name=<span class="string">"daotest"</span>)</span><br><span class="line">	DaoTest dao;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">".........Service"</span>);</span><br><span class="line">		dao.printDao();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个注解的异同：</p>
<ul>
<li>异：<ul>
<li>@Autowried是Spring提供的注解，是按类型（byType）注入的。</li>
<li>@Resource是JEE提供的，是按名称（byName）注入的。</li>
</ul>
</li>
<li>同:<ul>
<li>都可以写在属性和setter方法上。</li>
<li>可以参考：<a href="https://blog.csdn.net/x_iya/article/details/73385486" target="_blank" rel="noopener">Spring注解@Resource和@Autowired区别对比</a></li>
</ul>
</li>
</ul>
<p>转载自：<a href="https://blog.csdn.net/weixin_40425481/article/details/82752832" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2-Spring_Beans和生命周期</title>
    <url>/2020/02/27/2-Spring-Beans%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实例化Bean"><a href="#实例化Bean" class="headerlink" title="实例化Bean"></a>实例化Bean</h2><ul>
<li>通过构造方法实例化：<br>当使用基于XML的元数据配置文件，可以这样来指定bean类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"exampleBean"</span><span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ExampleBean"</span>&gt;</span><br><span class="line">&lt;bean name=<span class="string">"anotherExample"</span><span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ExampleBeanTwo"</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用静态工厂方法实例化：<ul>
<li>当采用静态工厂方法创建bean时，除了需要指定class属性外，还需要通过factory-method属性来指定创建bean实例的工厂方法</li>
<li>注意，此定义并未指定返回对象的类型，仅指定该类包含的工厂方法，此例中createInstance方法必须是静态的</li>
</ul>
</li>
</ul>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"examples.ClientService"</span></span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">"createlnstance"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientService();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">ClientService</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title">createlnstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> clientService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用实例工厂方法实例化：<ul>
<li>使用这种方式时，class属性必须为空，而factory-bean属性必须指定为当前(或其祖先)容器中包含工厂方法的bean的名称</li>
<li>bean的工厂方法必须通过factory-method属性来设定</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--工厂bean，包含reatelnstance0方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"'serviceLocator"</span><span class="attr">class</span>=<span class="string">"examples.DefaultServiceLocator"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--其他需要注入的依赖项--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过工厂bean 创建的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span> <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span> <span class="attr">factory-method</span>=<span class="string">"createClientServicelnstance"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/Spring_lifecycle.png" alt></p>
<table>
<thead>
<tr>
<th align="left">步骤</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1.实例化</td>
<td align="left">Spring实例化Bean</td>
</tr>
<tr>
<td align="left">2.设置属性</td>
<td align="left">Spring注入Bean的属性</td>
</tr>
<tr>
<td align="left">3.设置Bean名称，Bean工厂，应用上下文</td>
<td align="left">如果Bean实现了XXXAware接口，执行对应方法</td>
</tr>
<tr>
<td align="left">4.预处理(在初始化之前)</td>
<td align="left">调用BeanPostProcessor对象的postProcessBeforeInitialization()方法</td>
</tr>
<tr>
<td align="left">5.初始化Bean</td>
<td align="left">实现InitializingBean接口的afterPropertiesSet()方法。声明了初始化方法，将调用声明的</td>
</tr>
<tr>
<td align="left">6.预处理(在初始化之后)</td>
<td align="left">调用BeanPostProcessor对象的postProcessAfterInitialization()方法</td>
</tr>
<tr>
<td align="left">7.Bean已经准备好</td>
<td align="left">默认以单例的形式存在Spring容器中</td>
</tr>
<tr>
<td align="left">8.销毁Bean</td>
<td align="left">实现DisposableBean接口的destroy()方法。声明了销毁方法，将调用声明的</td>
</tr>
</tbody></table>
<h2 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h2><ul>
<li>Spring容器的工作就是创建Bean并注入他所依赖的Bean对象</li>
<li>Spring中的注入方式主要有2种：构造器注入和Setter方法注入<h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3></li>
<li>基于构造器注入DI通过调用带参数的构造器来实现，每个参数代表着一个依赖关系</li>
<li>构造器参数通过参数类型进行匹配</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IntelCpu intelCpu;</span><br><span class="line">	<span class="keyword">private</span> KingstonMemory kingstonMemory;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(IntelCpu intelCpu, KingstonMemory kingstonMemory)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>. intelCpu=intelCpu; </span><br><span class="line">		<span class="keyword">this</span>. kingstonMemory=kingstonMemory;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"IntelCpu"</span> <span class="attr">class</span>=<span class="string">"constructdi.IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"KingstonMemory"</span> <span class="attr">class</span>=<span class="string">"constructdi.KingstonMemory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Computer"</span> <span class="attr">class</span>=<span class="string">"constructdi.Computer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"KingstonMemory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其他用法：<ul>
<li>使用type属性指定构造参数的类型</li>
<li>使用index属性指定构造参数的索引</li>
<li>使用name属性制定构造参数的名字</li>
</ul>
</li>
</ul>
<h3 id="Setter注入"><a href="#Setter注入" class="headerlink" title="Setter注入"></a>Setter注入</h3><p>在调用了无参构造方法或者无参静态工厂方法实例化bean之后，容器通过回调bean的setter方法可以完成依赖注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Intelcpu intelCpu; </span><br><span class="line">	<span class="keyword">private</span> KingstonMemory kingstonMemory; </span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntelCpu</span><span class="params">(Intelcpu intelcpu)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>. intelcpu=intelcpu;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKingstonMemory</span><span class="params">(KingstonMemory kingstonMemory)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>. kingstonMemory=kingstonMemory;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">！--setter方法注入--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"IntelCpu"</span> <span class="attr">class</span>=<span class="string">"setterdi.IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"KingstonMemory"</span> <span class="attr">class</span>=<span class="string">"setterdi.KingstonMemory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Computer"</span> <span class="attr">class</span>=<span class="string">"setterdi.Computer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"intelCpu"</span> <span class="attr">ref</span>=<span class="string">"IntelCpu"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"kingstonMemory"</span> <span class="attr">ref</span>=<span class="string">"KingstonMemory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="基本Bean注入"><a href="#基本Bean注入" class="headerlink" title="基本Bean注入"></a>基本Bean注入</h3><h4 id="注入基本数据类型"><a href="#注入基本数据类型" class="headerlink" title="注入基本数据类型"></a>注入基本数据类型</h4><pre><code>- &lt;property name=&quot;xxx&quot; value=&quot;xxx&quot; /&gt;
- 可注入：
    - 字符串
    - 数值型数据
    - 布尔类型
- Spring根据字段属性来决定转换成正确的类型</code></pre><h4 id="注入Null"><a href="#注入Null" class="headerlink" title="注入Null"></a>注入Null</h4><pre><code>`&lt;property name=&quot;xxx&quot;&gt;&lt;null /&gt;&lt;/property&gt;`</code></pre><h4 id="注入引用数据类型"><a href="#注入引用数据类型" class="headerlink" title="注入引用数据类型"></a>注入引用数据类型</h4><pre><code>- 引用

    <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">ref</span>=<span class="string">"xxxBean"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"xxxBean"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

- 注入内部Bean

    - &lt;property name=&quot;xxx&quot;&gt;&lt;bean class=&quot;org.xxx.XxxBean&quot; /&gt;&lt;/property&gt;
    - 内部Bean不能复用，只能被注入</code></pre><h4 id="注入List类型和数组类型"><a href="#注入List类型和数组类型" class="headerlink" title="注入List类型和数组类型"></a>注入List类型和数组类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“xxx”</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">“aa”</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">“bb”</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注入Set类型"><a href="#注入Set类型" class="headerlink" title="注入Set类型"></a>注入Set类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span> =<span class="string">“aa”</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span> =<span class="string">“bb”</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注入Map类型"><a href="#注入Map类型" class="headerlink" title="注入Map类型"></a>注入Map类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“xxx”</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">“a”</span> <span class="attr">value-ref</span>=<span class="string">“aa”</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">“b”</span> <span class="attr">value-ref</span>=<span class="string">“bb”</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：<br>每个<entry>都有一个键和值组成</entry></p>
<ol>
<li><p>key: 指定map项的键为String</p>
</li>
<li><p>key-ref: 指定map项的键为Spring上下文中其他Bean的引用</p>
</li>
<li><p>value: 指定map项的值为String</p>
</li>
<li><p>value-ref: 指定map项的值为Spring上下文中其他Bean的引用</p>
</li>
</ol>
<ul>
<li>注入Properties类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--与Map唯一不同的是其限制了键和值都是String--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">“a”</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">“b”</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="集合合并"><a href="#集合合并" class="headerlink" title="集合合并"></a>集合合并</h4><p>对于相同类型的集合，通过在子类中的merge属性，可以将集合合并。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parent"</span> <span class="attr">abstract</span>=<span class="string">"tue"</span> <span class="attr">class</span>=<span class="string">"example. ComplexObject&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">		&lt;property name="</span><span class="attr">adminEmails</span>"&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"administrator"</span>&gt;</span>administrator@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"child"</span> <span class="attr">parent</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">props</span> <span class="attr">merge</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"sales"</span>&gt;</span>sales@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.co.uk<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="高级Bean注入"><a href="#高级Bean注入" class="headerlink" title="高级Bean注入"></a>高级Bean注入</h4><pre><code>- Spring容器可以自动装配相互协作bean的关联关系
- 自动装配有以下好处：
    - 自动装配可以显著得减少指定属性或者构造器参数的需求
    - 当对象发生变化时自动装配可以更新配置而不需要修改配置
- 自动装配的局限性和缺点：
    - Property和constructor-arg显示的依赖设置会覆盖自动装配（故意而为）
    - 自动装配没有显示编写精确
    - 在容器中可能存在多个bean的定义与自动装配的setter方法或者构造方法参数匹配，若bean定义不唯一，装配时会抛异常
- 使用外部属性文件
- 可以使用location属性处理单个属性文件
    - &lt;property name=&quot;location&quot; value=&quot;jdbc.properties&quot;/&gt;
- 处理多个属性文件用locations属性指定list</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>aa.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>bb.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>- 使用${xxx.bbb}来获取值</code></pre>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>1-Spring介绍和IOC&amp;DI</title>
    <url>/2020/02/27/1-Spring%E4%BB%8B%E7%BB%8D%E5%92%8CIOC-DI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="IoC和DI"><a href="#IoC和DI" class="headerlink" title="IoC和DI"></a>IoC和DI</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>IoC（Inversion of Control，控制反转）：<ul>
<li>设计原则，解耦组件之间的依赖关系</li>
</ul>
</li>
<li>DI（ DI(Dependency Injection ，依赖注入）<ul>
<li>具体的设计模式，体现了IoC的设计原则</li>
<li>因为DI是IoC最典型的实现，所以术语IoC与DI经常被混用</li>
</ul>
</li>
<li>应用IoC：<ul>
<li>由容器主动将资源推送到它所管理的组件里，组件要有接受资源的方式</li>
<li>查找的被动形式</li>
<li>好的获取资源的解决方案</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h3 id="不同类型的依赖注入"><a href="#不同类型的依赖注入" class="headerlink" title="不同类型的依赖注入"></a>不同类型的依赖注入</h3><ul>
<li>主要的三种类型的DI（接口注入，setter注入，构造器注入）</li>
<li>流行程度最广的：setter注入<ul>
<li>有可能忘记注入，会抛出空指针</li>
<li>代码安全有可能存在问题，依赖会被修改</li>
</ul>
</li>
<li>构造器注入<ul>
<li>可避免setter注入的一些缺点</li>
<li>没有含义明确的方法名，对参数位置与数量有要求</li>
</ul>
</li>
</ul>
<h2 id="Spring框架实现IoC"><a href="#Spring框架实现IoC" class="headerlink" title="Spring框架实现IoC"></a>Spring框架实现IoC</h2><ol>
<li>Spring提供了IoC容器</li>
<li>Beans均由Spring IoC容器来管理和组装</li>
<li>Bean是一个由Spring IoC容器进行实例化、装配和管理的对象</li>
<li>Beans以及他们之间的依赖关系是通过容器使用配置元数据反应出来</li>
<li>配置元数据：（基于Xml的配置，基于注解的配置，基于Java的配置）</li>
</ol>
<h2 id="Spring容器"><a href="#Spring容器" class="headerlink" title="Spring容器"></a>Spring容器</h2><p>工作视图</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/IOC-DI.png" alt></p>
<p>org.springframework.beans和org.springframework.context包是Spring框架IoC容器的基础</p>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/IOC_base.png" alt></p>
<ul>
<li><p>BeanFactory</p>
<ul>
<li>BeanFactory提供了一个先进的配置机制能够管理任何类型的对象</li>
<li>BeanFactory负责对Bean对象的实例化、装配和生命周期的管理</li>
<li>BeanFactory的实现： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"beans.xml"</span>));<span class="comment">//创建该工厂需要传入一个Resource实例</span></span><br><span class="line">MyBean bean = (MyBean)factory.getBean(<span class="string">"myBean"</span>)<span class="comment">//获取Bean实例</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>ApplicationContext</p>
<ul>
<li>ApplicationContext是BeanFactory的一个子接口</li>
<li>ApplicationContext添加了更多的企业特定的功能：</li>
<li>实现<ul>
<li>ClassPathXmlApplicationContext</li>
<li>FileSystemXmlApplicationContext</li>
<li>XmlWebApplicationContext</li>
<li>AnnotationConfigApplicationContext</li>
</ul>
</li>
</ul>
</li>
<li><p>区别</p>
<ul>
<li>BeanFactory提供了配置框架和基本功能，ApplicationContext则添加了更多的企业特定功能</li>
<li>ApplicationContext是BeanFactory的一个子接口，同时也是它的一个完整的超集</li>
<li>实例Bean的载入方式不同：<ul>
<li>BeanFactory延迟载入所有Bean，直到getBean()方法调用时才被创建</li>
<li>ApplicationContext启动后载入所有单实例Bean。通过预载入单实例Bean，确保当需要时可以使用</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>加速访问Github</title>
    <url>/2020/02/26/speed-github/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="说一下访问慢的原因"><a href="#说一下访问慢的原因" class="headerlink" title="说一下访问慢的原因"></a>说一下访问慢的原因</h1><ol>
<li>由于 github.com 网站位于美国旧金山,所以初始访问 github.com 时网络寻址会比较耗费时间,这是网站打开速度慢的其中一个原因.</li>
<li>最初用户从浏览器中输入 github.com 网址时,浏览器并不知道这个域名对应的真实 ip 地址,先问问自己电脑认识不认识这个域名的门牌号,如果本机不认识会接着往上问,当地运行商也不认识这个域名的话,继续问上级,直到问出来 github.com 的门牌号是 192.30.253.113 为止!如此繁琐的问路过程被称之为 DNS 寻址,如果问路的时间都占用很久,那么访问网站的速度自然会很慢.</li>
</ol>
<h2 id="主域名和多个子域名"><a href="#主域名和多个子域名" class="headerlink" title="主域名和多个子域名"></a>主域名和多个子域名</h2><p>正常来说,网站的主域名下会存在多个子域名,由这些域名组合在一起提供完整的服务.</p>
<p>而 github.com 也不例外,其中 github.com是一级域名,也是主域名,其他的域名基本上都是二级域名或者说次域名. 所以我们不仅要告诉本机 github.com 的主域名,还要把相关的子域名也告诉本机,帮人帮到底,送福送到西! 那到哪里去查询域名和 ip 的对应关系呢?</p>
<a id="more"></a>

<h2 id="推荐几个查询域名解析的网站"><a href="#推荐几个查询域名解析的网站" class="headerlink" title="推荐几个查询域名解析的网站"></a>推荐几个查询域名解析的网站</h2><ol>
<li><a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a></li>
<li><a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a></li>
</ol>
<h2 id="体验域名查询"><a href="#体验域名查询" class="headerlink" title="体验域名查询"></a>体验域名查询</h2><p>根据查到的相关域名信息,再次查询出这些域名对应的 ip 地址,于是整理出以下内容.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#github related website</span><br><span class="line">192.30.253.113 github.com</span><br><span class="line">199.232.5.194 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.119 gist.github.com</span><br><span class="line">192.30.253.120 nodeload.github.com</span><br><span class="line">199.232.28.133 raw.github.com</span><br><span class="line">140.82.113.17 training.github.com</span><br><span class="line">192.30.253.113 www.github.com</span><br><span class="line">99.232.68.133 avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133 assets-cdn.github.com</span><br><span class="line">185.199.108.153 documentcloud.github.com</span><br><span class="line">185.199.108.153 help.github.com</span><br><span class="line">18.204.240.114 status.github.com</span><br></pre></td></tr></table></figure>
<h2 id="加快访问github的方法"><a href="#加快访问github的方法" class="headerlink" title="加快访问github的方法"></a>加快访问github的方法</h2><ol>
<li>VPN<ol>
<li>购买vpn，作为学生党就算了吧</li>
<li>使用一些免费的插件，这种就得自个搜（提醒：谷歌商店一大批免费的，哈哈哈）</li>
</ol>
</li>
<li>hosts<ol>
<li>记事本打开C:\Windows\System32\drivers\etc 路径下的hosts文件（映射文件）</li>
<li>找到上面推荐的解析网站  查询出自个机子适用的dns解析地址（也可以使用我整理好的）</li>
<li>保存退出（不能保存的请自行百度）</li>
<li>win+r 输入ipconfig /flushdns 刷新dns缓存</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>业余技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>4-Hibernate一对一关联映射</title>
    <url>/2020/02/26/4-Hibernate%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hibernate一对一关联映射"><a href="#Hibernate一对一关联映射" class="headerlink" title="Hibernate一对一关联映射"></a>Hibernate一对一关联映射</h1><p>实体之间的联系：<br></p>
<ol>
<li>一对一联系（1:1）</li>
<li>一对多联系（1:n）</li>
<li>多对多联系（m:n）</li>
</ol>
<h2 id="一对一的关联映射（主键关联方式）"><a href="#一对一的关联映射（主键关联方式）" class="headerlink" title="一对一的关联映射（主键关联方式）"></a>一对一的关联映射（主键关联方式）</h2><p><strong>主键关联：</strong>原理是两张表的主键(ID)保持一致，在获取的时候根据两种表中的ID相同来作为关系判断的标准，这样的设计好处在于我们不用添加另外的字段来维护它们之间的关系。 </p>
<h3 id="xml方式"><a href="#xml方式" class="headerlink" title="xml方式"></a>xml方式</h3><a id="more"></a>

<p>实体类<br>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//主键</span></span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> Person person;</span><br><span class="line">	……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Persion.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;<span class="comment">//主键和外键，外键依赖user的主键id</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String idNumber;</span><br><span class="line">	<span class="keyword">private</span> User user;</span><br><span class="line">	……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>User.hbm.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> <span class="title">name</span></span>=<span class="string">"User"</span>&gt;</span><br><span class="line">	&lt;id name=<span class="string">"id"</span> &gt;</span><br><span class="line">		&lt;generator class="increment"&gt;&lt;/generator&gt;</span><br><span class="line">	&lt;/id&gt;</span><br><span class="line">	&lt;property name=<span class="string">"userName"</span>  /&gt;</span><br><span class="line">	&lt;property name=<span class="string">"password"</span>/&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 主键关联方式映射与Person的一对一关系 --&gt;</span><br><span class="line">	&lt;one-to-one name=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Person"</span> cascade=<span class="string">"all"</span>/&gt;</span><br><span class="line">&lt;/class&gt;</span><br></pre></td></tr></table></figure>
<p>Persion.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"foreign"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"property"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 主键关联方式映射与User的一对一关系 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">constrained</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idNumber"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Session session = <span class="keyword">null</span>;</span><br><span class="line">       Transaction tran = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           session = HibernateUtil.openSession();</span><br><span class="line">           tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 新建User对象</span></span><br><span class="line">           User user = <span class="keyword">new</span> User();</span><br><span class="line">           user.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">           user.setPassword(<span class="string">"111111"</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//新建Person对象</span></span><br><span class="line">           Person person = <span class="keyword">new</span> Person();</span><br><span class="line">           person.setName(<span class="string">"张三"</span>);</span><br><span class="line">           person.setIdNumber(<span class="string">"100345199002031234"</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//建立联系</span></span><br><span class="line">           user.setPerson(person);</span><br><span class="line">           person.setUser(user);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 保存user并级联保存person</span></span><br><span class="line">           session.save(user);</span><br><span class="line"></span><br><span class="line">           tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           session.close();<span class="comment">// 关闭session</span></span><br><span class="line">           HibernateUtil.closeSessionFactory();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="注释方法"><a href="#注释方法" class="headerlink" title="注释方法"></a>注释方法</h3><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="comment">//注解写在属性上使用的是反射机制</span></span><br><span class="line">	<span class="comment">//注解写在get方法上，是setget机制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name=<span class="string">"my_gen"</span>, strategy=<span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="meta">@PrimaryKeyJoinColumn</span>(name=<span class="string">"id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Persion.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;<span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name=<span class="string">"my_gen"</span>, strategy = <span class="string">"foreign"</span>, parameters= &#123;<span class="meta">@Parameter</span>(name = <span class="string">"property"</span>, value = <span class="string">"user"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdNumber</span><span class="params">(String idNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idNumber = idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy=<span class="string">"person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类同上</p>
<p><strong>关于上述代码解释：</strong></p>
<ol>
<li>xml：<ol>
<li>通过<one-to-one> 元素配置。—–（主键表）<ol>
<li>ascade属性（级联属性）为 all：:对象所有操作进行级联操作  save,update,delete</li>
<li>ascade属性（级联属性）为 save-update :  执行保存和更改操作时进行级联操作</li>
<li>ascade属性（级联属性）为 delete :  执行删除操作时进行级联操作</li>
<li>ascade属性（级联属性）为 none : 对所有操作不进行级联操作       默认</li>
</ol>
</one-to-one></li>
<li>constrained 属性为 true，表明 PERSON 表ID为外键，参照主表USER—–（外键表）</li>
<li>外键表实体类配置文件中 OID 使用 foreign 生成策略。—–（外键表）</li>
</ol>
</li>
<li>注解：<ol>
<li>User端的person属性配置<ol>
<li>@OneToOne(cascade=CascadeType.ALL) ：指定一对一关联关系，并设置级联属性。</li>
<li>@PrimaryKeyJoinColumn(name=”ID”) ：指定Persion表主键列名。</li>
</ol>
</li>
<li>在Person端的id属性上配置主键生成策略为 foreign<br><ol>
<li><code>@GeneratedValue(generator=&quot;foreign&quot;)</code></li>
<li><code>@GenericGenerator(name=&quot;foreign&quot;,strategy=&quot;foreign&quot;,parameters={@Parameter(name=&quot;property&quot;,value=&quot;user&quot;)})</code></li>
</ol>
</li>
<li>在Person一端的user属性上配置一对一关联关系<br><br><code>@OneToOne(mappedBy=&quot;person&quot;)</code></li>
</ol>
</li>
</ol>
<h2 id="一对一的关联映射（唯一外键关联方式）"><a href="#一对一的关联映射（唯一外键关联方式）" class="headerlink" title="一对一的关联映射（唯一外键关联方式）"></a>一对一的关联映射（唯一外键关联方式）</h2><h3 id="xml方式-1"><a href="#xml方式-1" class="headerlink" title="xml方式"></a>xml方式</h3><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//主键，外键（外键依赖persion类的id）</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>User.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"USER"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span>  /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 外键关联方式映射与Person的一对一关系 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">column</span>=<span class="string">"PERSONID"</span> <span class="attr">cascade</span>=<span class="string">"all"</span> <span class="attr">unique</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Persion.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Persion.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Person"</span> <span class="attr">table</span>=<span class="string">"PERSON"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idNumber"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 外键关联方式映射与User的一对一关系   property-ref:外键列对应的属性名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">property-ref</span>=<span class="string">"person"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试类同上</p>
<h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"USER"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name=<span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"PERSONID"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Persion.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"PERSON"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;<span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdNumber</span><span class="params">(String idNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idNumber = idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy=<span class="string">"person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类同上</p>
<p><strong>关于上述代码解释：</strong></p>
<ol>
<li>xml<ol>
<li>通过<many-to-one> 元素配置。—–（外键表）<ol>
<li>column 属性指明外键列；</li>
<li>unique 属性设置为 true，表明唯一约束；</li>
<li>cascade 属性设置为 all，表明删除 USER 时同时删除PERSON</li>
<li><code>&lt;many-to-one name=&quot;person&quot; column=&quot;persionId&quot; cascade=&quot;all&quot; unique=&quot;true&quot;/&gt;</code></li>
</ol>
</many-to-one></li>
<li>通过<one-to-one> 元素配置。—–（主键表）<ol>
<li>property-ref 属性，表明建立了从User到Person的一对一关联关系</li>
<li><code>&lt;one-to-one name=&quot;user&quot; property-ref=&quot;person&quot;/&gt;</code></li>
</ol>
</one-to-one></li>
</ol>
</li>
<li>注解<ol>
<li>在User一端的person属性上配置。<ol>
<li>@OneToOne(cascade=CascadeType.ALL)</li>
<li>@JoinColumn(name=”PERSONID”)：指明USER表中的外键列名。</li>
</ol>
</li>
<li>在Person一端的user属性上配置。<ol>
<li>@OneToOne(mappedBy=”person”)</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="组合关系映射"><a href="#组合关系映射" class="headerlink" title="组合关系映射"></a>组合关系映射</h2><p>问题：</p>
<p>某单位职工档案管理系统的需求中，希望能够保存职工的各种联系方式，包括：家庭地址、工作地址、籍贯地址、<br>手机号、邮箱等，每个地址又需包含省、市、县、详细街道信息，应该如何实现？</p>
<table>
<thead>
<tr>
<th align="left">Contact</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">id : int</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">email : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">phoneNum : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">homeAddress : Address</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">workAddress : Address</td>
<td align="left"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">Address</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">province : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">city : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">district : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">detail : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">数据库中只有一张contact表，如何添加？</td>
<td align="left"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">Contact</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">id : int</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">email : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">phoneNum : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">homeProvince : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">homeCity ： String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">homeDistrict : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">homeDetail : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">workProvince : String</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">…</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="xml方式："><a href="#xml方式：" class="headerlink" title="xml方式："></a>xml方式：</h3><p>Contact.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Address homeAddress;</span><br><span class="line">    <span class="keyword">private</span> Address workAddress;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Contact.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Contact"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"phoneNum"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- component映射组合关系 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"homeAddress"</span> <span class="attr">class</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">column</span>=<span class="string">"HOMEPROVINCE"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">column</span>=<span class="string">"HOMECITY"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"district"</span> <span class="attr">column</span>=<span class="string">"HOMEDISTRICT"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"detail"</span> <span class="attr">column</span>=<span class="string">"HOMEDETAIL"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"workAddress"</span> <span class="attr">class</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">column</span>=<span class="string">"WORKPROVINCE"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">column</span>=<span class="string">"WORKCITY"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"district"</span> <span class="attr">column</span>=<span class="string">"WORKDISTRICT"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"detail"</span> <span class="attr">column</span>=<span class="string">"WORKDETAIL"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Address.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;<span class="comment">//省</span></span><br><span class="line">    <span class="keyword">private</span> String city;<span class="comment">//市</span></span><br><span class="line">    <span class="keyword">private</span> String district;<span class="comment">//区</span></span><br><span class="line">    <span class="keyword">private</span> String detail;<span class="comment">//详细地址</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveContact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Session session = <span class="keyword">null</span>;</span><br><span class="line">       Transaction tran = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           session = HibernateUtil.openSession();</span><br><span class="line">           tran = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">           Contact contact = <span class="keyword">new</span> Contact();</span><br><span class="line">           contact.setPhoneNum(<span class="string">"12345678910"</span>);</span><br><span class="line">           contact.setEmail(<span class="string">"abcxxx@123.com"</span>);</span><br><span class="line">           </span><br><span class="line">           Address homeAddress = <span class="keyword">new</span> Address();</span><br><span class="line">           homeAddress.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">           homeAddress.setCity(<span class="string">"xx市"</span>);</span><br><span class="line">           homeAddress.setDistrict(<span class="string">"xx区"</span>);</span><br><span class="line">           homeAddress.setDetail(<span class="string">"xx路xx号"</span>);</span><br><span class="line">           </span><br><span class="line">           Address workAddress = <span class="keyword">new</span> Address();</span><br><span class="line">           workAddress.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">           workAddress.setCity(<span class="string">"xx市"</span>);</span><br><span class="line">           workAddress.setDistrict(<span class="string">"xx区"</span>);</span><br><span class="line">           workAddress.setDetail(<span class="string">"xx路xx号"</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//建立联系</span></span><br><span class="line">           contact.setHomeAddress(homeAddress);</span><br><span class="line">           contact.setWorkAddress(workAddress);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 保存contact同时保存地址信息</span></span><br><span class="line">           session.save(contact);</span><br><span class="line">           tran.commit();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           tran.rollback();</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;	</span><br><span class="line">           session.close();</span><br><span class="line">           HibernateUtil.closeSessionFactory();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="注解方式-1"><a href="#注解方式-1" class="headerlink" title="注解方式"></a>注解方式</h3><p>Contact.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Address homeAddress;</span><br><span class="line">    <span class="keyword">private</span> Address workAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhoneNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phoneNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneNum</span><span class="params">(String phoneNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phoneNum = phoneNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="meta">@AttributeOverrides</span>(value=&#123;</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"province"</span>, </span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMEPROVINCE"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"city"</span>,</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMECITY"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMEDISTRICT"</span>),</span><br><span class="line">                    name = <span class="string">"district"</span>),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMEDETAIL"</span>),</span><br><span class="line">                    name = <span class="string">"detail"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getHomeAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> homeAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHomeAddress</span><span class="params">(Address homeAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.homeAddress = homeAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span>  <span class="comment">//注意与嵌入式类注解@Embeddable区分</span></span><br><span class="line">    <span class="meta">@AttributeOverrides</span>(value=&#123;</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"province"</span>, </span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKPROVINCE"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"city"</span>,</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKCITY"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKDISTRICT"</span>),</span><br><span class="line">                    name = <span class="string">"district"</span>),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKDETAIL"</span>),</span><br><span class="line">                    name = <span class="string">"detail"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getWorkAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkAddress</span><span class="params">(Address workAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.workAddress = workAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Address.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span>		<span class="comment">//指明为嵌入式类，不需要单独进行映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;<span class="comment">//省</span></span><br><span class="line">    <span class="keyword">private</span> String city;<span class="comment">//市</span></span><br><span class="line">    <span class="keyword">private</span> String district;<span class="comment">//区</span></span><br><span class="line">    <span class="keyword">private</span> String detail;<span class="comment">//详细地址</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类同上</p>
]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3.Hibernate继承关系映射</title>
    <url>/2020/02/25/3-Hibernate%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><font size="5" color="#ff0000">每个具体的类实现继承关系映射</font></strong></p>
<a id="more"></a>

<p><strong><font size="5" color="#ff0000">父类对应一个表的继承关系映射</font></strong></p>
<p><strong><font size="5" color="#ff0000">每个类对应一个表的继承关系映射</font></strong></p>
]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2.Hibernate的单实体映射</title>
    <url>/2020/02/25/2-Hibernate%E7%9A%84%E5%8D%95%E5%AE%9E%E4%BD%93%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hibernate的单实体映射"><a href="#Hibernate的单实体映射" class="headerlink" title="Hibernate的单实体映射"></a>Hibernate的单实体映射</h1><h2 id="单实体的属性映射"><a href="#单实体的属性映射" class="headerlink" title="单实体的属性映射"></a><font size="5" color="#ff0000">单实体的属性映射</font></h2><ol>
<li><p>setter 和 getter 方法优点：有效控制属性的访问权限。<br></p>
</li>
<li><p>property元素的 access 属性；field : 不需要getset方法，通过Java反射机制绕过hibernate直接访问属性值。<br><code>&lt;property name=&quot;userName&quot; access=&quot;field&quot; /&gt;</code></p>
</li>
<li><p>实体映射技巧：实体类属性与表字段不对称时，可以在 setter 和 getter 方法中加入程序逻辑<br><br> 例：User 类中没有 username 属性，而是改为了 firstName 和 lastName 两个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">  		String[] strName = userName.split(<span class="string">" "</span>);</span><br><span class="line">  		<span class="keyword">this</span>.firstName = strName[<span class="number">0</span>];</span><br><span class="line">  		<span class="keyword">this</span>.lastName = strName[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
</li>
<li><p>特殊需求：<br>例：User 需要订单总额属性，但数据库表中没有这个字段，在property元素的 formula 属性设置查询语句</p>
 <property name="totalPrice" formula="(select sum(o.price) from orders as o where o.userId=id)"></property></li>
<li><p>控制持久化类的insert和update</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">映射属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;property&gt;元素的 insert 属性</td>
<td align="left">insert语句中是否包含该属性，默认值为true</td>
</tr>
<tr>
<td align="left">&lt;property&gt;元素的 update 属性</td>
<td align="left">update语句中是否包含该属性，默认值为true</td>
</tr>
<tr>
<td align="left">&lt;class&gt;元素的 mutable 属性</td>
<td align="left">等价于所有property节点的update属性，默认值为true</td>
</tr>
<tr>
<td align="left">&lt;class&gt;元素的 dynamic-insert 属性</td>
<td align="left">值为true等价于所有的property元素dynamic-insert属性为true</td>
</tr>
<tr>
<td align="left">&lt;class&gt;元素的 dynamic-update 属性</td>
<td align="left">值为true等价于所有的property元素dynamic-update属性为true</td>
</tr>
</tbody></table>
<p><em>注：</em><br><br>    1. 会过滤过值为null的属性<br><br>    2. 如果在一个表有很多字段的时候,在做初次insert的时候有比较多的字段为空值,或者经常update某少部分字段,应该在配置文件的<class>元素上将dynamic-insert和dynamic-update设置为true.其默认值都为false.<br><br>    3. dynamic-insert，dynamic-update，提升了数据库的效率，只对需要插入修改的数据进行变动<br></class></p>
<h2 id="单实体的对象标识符映射"><a href="#单实体的对象标识符映射" class="headerlink" title="单实体的对象标识符映射"></a><font size="5" color="#ff0000">单实体的对象标识符映射</font></h2><p>Java程序中区分不同对象：</p>
<ol>
<li>“==” 比较两个变量引用的内存地址是否相同；</li>
<li>equals可以比较两个变量引用的对象的值是否相同。</li>
<li>用户自定义的类也可以覆盖Object的equals方法实现对象按值进行比较</li>
<li>Hibernate 采用对象标识符（OID）区分对象。</li>
</ol>
<p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/session.png" alt></p>
<h2 id="使用注解映射单实体"><a href="#使用注解映射单实体" class="headerlink" title="使用注解映射单实体"></a><font size="5" color="#ff0000">使用注解映射单实体</font></h2><p>User.java类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>								<span class="comment">//声明一个实体类。</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"USER"</span>)					<span class="comment">//为实体类指定对应的数据库表</span></span><br><span class="line"><span class="meta">@DynamicInsert</span>(<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@DynamicUpdate</span>(<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span>                       <span class="comment">//声明实体类的OID属性</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)		<span class="comment">//声明OID的生成策略</span></span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)	<span class="comment">//使用Hibernate提供的生成策略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"USERNAME"</span>, insertable=<span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Access</span>(AccessType.FIELD)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Formula</span>(value = <span class="string">"(select sum(o.price) from orders as o where o.userid=id)"</span>)<span class="comment">//查询语句</span></span><br><span class="line">    <span class="keyword">private</span> Double totalPrice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getTotalPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPrice</span><span class="params">(Double totalPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPrice = totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Column(name=”columnName”) ：将属性映射到列。<br></p>
<ol>
<li>name=”columnName”    字段名称；<br></li>
<li>unique=false            是否在该字段上设置唯一约束；<br></li>
<li>nullable=true            字段是否能为空；<br></li>
<li>insertable=true        控制 insert语句；<br></li>
<li>updatable=true        控制 update语句；<br></li>
<li>length=255            指定字段长度。<br></li>
</ol>
<p>@Access(AccessType.PROPERTY)：<br></p>
<ol>
<li>通过 getter 和 setter 方法访问实体类的属性；<br></li>
<li>需要在 getter 方法上定义字段的属性。<br></li>
</ol>
<p>@Access(AccessType.FIELD)：<br></p>
<ol>
<li>直接访问实体类的属性，可以不定义 getter 和 setter 方法，但是需要将变量定义为public；<br></li>
<li>需要在变量上定义字段的属性。<br></li>
</ol>
<p>@Formula：将属性映射到SQL语句。<br><br><code>@Formula(value = &quot;(select sum(o.price) from     
            orders as o where o.userid=id)&quot;)</code></p>
<p>@DynamicInsert：动态生成 INSERT 语句。<br></p>
<p>@DynamicUpdate：动态生成 UPDATE 语句。<br></p>
<h2 id="使用注解和xml方式的区别："><a href="#使用注解和xml方式的区别：" class="headerlink" title="使用注解和xml方式的区别："></a><font color="#00FF" size="5">使用注解和xml方式的区别：</font></h2><ol>
<li><strong>hibernate.hbm.xml 文件中把引用：xxx.hbm.xml改为引用实体类</strong>：即把：&lt;mapping resource=”com/db/entity/Person.hbm.xml”/&gt;改为：&lt;mapping class=”com.db.entity.Person” /&gt;</li>
<li><strong>注解方式不需要在xxx.hbm.xml把实体类与表进行映射</strong>。而采用在实体类中进行注解。</li>
<li>实体类属性注解的时候，都注解在<font color="#ff0000">get方法前</font><ol start="2">
<li>如果在实体类中某些属性不注解：（属性和get都不写注解），默认为表字段名与实体类属性名一致。</li>
<li>如果实体类的某个成员属性不需要存入数据库中，使用@Transient 进行注解就可以了。即类似于：(xxx.hbm.Xml配置中的某些字段不写(就是不需要对这个成员属性进行映射))</li>
<li>表名称可以在实体类前进行注解。</li>
<li>所有这些注解在：javax.persistence包下。而不是在hibernate包中。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>1.Hibernate框架的搭建</title>
    <url>/2020/02/25/1-Hibernate%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hibernate框架的搭建"><a href="#Hibernate框架的搭建" class="headerlink" title="Hibernate框架的搭建"></a>Hibernate框架的搭建</h1><a id="more"></a>
<h2 id="三层体系结构"><a href="#三层体系结构" class="headerlink" title="三层体系结构"></a>三层体系结构</h2><p><img src="https://gitee.com/LYmystery/PicGo/raw/master/image/three-layer_architecture.png" alt></p>
<ol>
<li>定义：将系统的组件<strong>分隔到不同的层</strong>中，每一层中的组件应保持内聚性； 每一层都应与它下面的各层保持松散耦合。<br></li>
<li>层与层之间存在自上而下的<strong>依赖关系</strong>，即上层组件会访问下层组件的API，而下层组件不应该依赖上层组件。<br></li>
<li>每个层对上层<strong>公开AP</strong>I，但具体的实现细节对外透明。当某一层的实现发生变化，只要它的API不变，不会影响其他层的实现。</li>
<li>持久层：将数据访问细节和业务逻辑分开（也就是在业务逻辑层和数据库层新添持久层）</li>
<li>持久化：将程序数据在瞬时状态和持久化状态之间转换的机制<ol>
<li>瞬时状态：保存在内存中的数据</li>
<li>持久状态：保存在数据库（磁盘）的程序数据</li>
</ol>
</li>
<li>持久层的作用：为业务逻辑层提供面向对象的API，<strong><em>使业务逻辑层可以专注于实现业务逻辑</em></strong></li>
<li>持久层的目标：<ol>
<li>代码可重用性高，能够完成对象持久化操作；</li>
<li>支持多种数据库平台；</li>
<li>具有相对独立性，当持久层发生变化时，不会影响上层实现。</li>
</ol>
</li>
<li>Hibernate是持久化层框架。</li>
</ol>
<h2 id="软件的模型及ORM"><a href="#软件的模型及ORM" class="headerlink" title="软件的模型及ORM"></a>软件的模型及ORM</h2><p><strong>不同类型的模型：</strong></p>
<p>分析阶段–创建概念模型<br><br>设计阶段–域模型（面向对象）和数据模型（面向关系）——形成<strong>对象关系映射（ORM）</strong></p>
<p>通过ORM模式在操作实体对象的时候，就不需要再去和复杂的 SQL语句打交道，只需简单的操作实体对象的属性和方法</p>
<h2 id="Hibernate介绍"><a href="#Hibernate介绍" class="headerlink" title="Hibernate介绍"></a>Hibernate介绍</h2><ol>
<li>在分层体系结构中Hibernate位于持久化层，是完成对象持久化的持久化层框架；<br></li>
<li>Hibernate是连接Java应用程序和关系型数据库的框架，能够建立对象模型和关系数据模型之间的映射，是一种自动ORM框架；<br></li>
<li>Hibernate是对JDBC API的封装，是JDBC轻量级封装框架。<br></li>
</ol>
<h2 id="第一个Hibernate程序"><a href="#第一个Hibernate程序" class="headerlink" title="第一个Hibernate程序"></a>第一个Hibernate程序</h2><h3 id="1-安装Eclipse、Mysql；"><a href="#1-安装Eclipse、Mysql；" class="headerlink" title="1.安装Eclipse、Mysql；"></a>1.安装Eclipse、Mysql；</h3><h3 id="2-下载Hibernate，并解压缩-获得jar包；"><a href="#2-下载Hibernate，并解压缩-获得jar包；" class="headerlink" title="2.下载Hibernate，并解压缩,获得jar包；"></a>2.下载Hibernate，并解压缩,获得jar包；</h3><h3 id="3-使用Eclipse创建新的项目；"><a href="#3-使用Eclipse创建新的项目；" class="headerlink" title="3.使用Eclipse创建新的项目；"></a>3.使用Eclipse创建新的项目；</h3><h3 id="4-引入Hibernate及其依赖库（jar包）；"><a href="#4-引入Hibernate及其依赖库（jar包）；" class="headerlink" title="4.引入Hibernate及其依赖库（jar包）；"></a>4.引入Hibernate及其依赖库（jar包）；</h3><h3 id="5-引入Mysql数据库驱动包；"><a href="#5-引入Mysql数据库驱动包；" class="headerlink" title="5.引入Mysql数据库驱动包；"></a>5.引入Mysql数据库驱动包；</h3><h3 id="6-编写Hibernate配置文件-hibernate-cfg-xml-；"><a href="#6-编写Hibernate配置文件-hibernate-cfg-xml-；" class="headerlink" title="6.编写Hibernate配置文件(hibernate.cfg.xml)；"></a>6.<font color="#FF0000" size="5">编写Hibernate配置文件(hibernate.cfg.xml)；</font></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span> <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.characterEncoding"</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/hibernate/entity/Customer.hbm.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-创建Java持久化类XXX-java；"><a href="#7-创建Java持久化类XXX-java；" class="headerlink" title="7. 创建Java持久化类XXX.java；"></a>7. <font color="#FF0000" size="5">创建Java持久化类XXX.java；</font></h3><p><em>持久化类与数据库之间是一一对应关系</em><br><br><em>Custom.java文件：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="comment">/*set，get方法*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-编写持久化类的映射配置文件XXX-hbm-xml；"><a href="#8-编写持久化类的映射配置文件XXX-hbm-xml；" class="headerlink" title="8. 编写持久化类的映射配置文件XXX.hbm.xml；"></a>8. <font color="#FF0000" size="5">编写持久化类的映射配置文件XXX.hbm.xml；</font></h3><p>Customer.hbm.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line">	<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span> <span class="meta-string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.hibernate.entity"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">not-null</span>=<span class="string">"true"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">column</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="介绍配置文件"><a href="#介绍配置文件" class="headerlink" title="介绍配置文件"></a>介绍配置文件</h4><ol>
<li>class元素指定类与表之间的映射<ol>
<li>name：类名</li>
<li>table：对应的表名</li>
</ol>
</li>
<li>id子元素设定持久化类的OID和表的主键的映射关系<ol>
<li>column：指定表字段的名称</li>
<li>generator：元素指定OID的生成器<ol>
<li>increment：采用 Hibernate 数值递增的方式；（不适合集群情况）</li>
<li>identity：采用数据库提供的自增长方式；（需设置数据库自增字段）</li>
<li>assigned：主键由应用逻辑产生；（自个设置ID）</li>
<li>native：自动选择合适的标识符生成器；</li>
</ol>
</li>
</ol>
</li>
<li>property 子元素设定类的其他属性和表的字段的映射关系<ol>
<li>name：对应类的属性名称；</li>
<li>type：指定属性的类型；</li>
<li>column：指定表字段的名称；</li>
<li>not-null：指定属性是否允许为空。</li>
</ol>
</li>
<li><font color="#FF0000" size="5">使用Hibernate API 完成对象的持久化。</font></li>
</ol>
<h4 id="HibernateUtil工具类"><a href="#HibernateUtil工具类" class="headerlink" title="HibernateUtil工具类"></a>HibernateUtil工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">//SessionFactory是线程安全的，多个应用线程间进行共享，一般整个应用有且只有一个SessionFactory</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory = <span class="keyword">null</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 静态初始化 Hibernate：创建 StandardServiceRegistry 实例（标准注册服务）</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		StandardServiceRegistry registry = <span class="keyword">new</span> StandardServiceRegistryBuilder()<span class="comment">//创建 StandardServiceRegistryBuilder 实例（标准注册服务生成器）</span></span><br><span class="line">												.configure()<span class="comment">//从 hibernate.cfg.xml 配置文件中读取配置信息</span></span><br><span class="line">												.build();<span class="comment">//构建 StandardServiceRegistry实例（标准注册服务）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 2 创建 SessionFactory 实例（会话工厂）</span></span><br><span class="line">			<span class="comment">// 2.1 根据标准注册服务创建一个 MetadataSources 实例（元数据资源集）</span></span><br><span class="line">			<span class="comment">// 2.2 构建元数据</span></span><br><span class="line">			<span class="comment">// 2.3 生成SessionFactory 实例（会话工厂）</span></span><br><span class="line">			sessionFactory = <span class="keyword">new</span> MetadataSources(registry)</span><br><span class="line">									.buildMetadata().buildSessionFactory();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// 2.4 创建失败手动释放 StandardServiceRegistry</span></span><br><span class="line">			StandardServiceRegistryBuilder.destroy(registry);</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sessionFactory;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sessionFactory.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试类test-java"><a href="#测试类test-java" class="headerlink" title="测试类test.java"></a>测试类test.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Session session = HibernateUtil.getSessionFactory().openSession();<span class="comment">//打开Session</span></span><br><span class="line">Transaction tx = session.beginTransaction();<span class="comment">//开始一个事务</span></span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();<span class="comment">//创建需要持久化的对象</span></span><br><span class="line">customer.setName(<span class="string">"胡宗南"</span>);</span><br><span class="line">customer.setSex(<span class="number">2</span>);</span><br><span class="line">customer.setAge(<span class="number">30</span>);</span><br><span class="line">session.save(customer); <span class="comment">//保存</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Customer customer2=session.get(Customer.class, new Integer(1));//查询</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//customer2.setName("李四");//修改</span></span><br><span class="line">	<span class="comment">//session.update(customer2);</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//session.delete(customer2);//删除</span></span><br><span class="line">	</span><br><span class="line">tx.commit();<span class="comment">//提交事务</span></span><br><span class="line">session.close();关闭 Session,SessionFactory</span><br><span class="line">HibernateUtil.closeSessionFactory();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
