<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神秘的小胖纸</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-27T04:17:49.005Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>6-SpringMVC2</title>
    <link href="http://yoursite.com/2020/02/27/6-SpringMVC2/"/>
    <id>http://yoursite.com/2020/02/27/6-SpringMVC2/</id>
    <published>2020-02-27T04:17:48.000Z</published>
    <updated>2020-02-27T04:17:49.005Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>5-SpringMVC1</title>
    <link href="http://yoursite.com/2020/02/27/5-SpringMVC1/"/>
    <id>http://yoursite.com/2020/02/27/5-SpringMVC1/</id>
    <published>2020-02-27T02:48:08.000Z</published>
    <updated>2020-02-27T04:21:39.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序搭建过程"><a href="#程序搭建过程" class="headerlink" title="程序搭建过程"></a>程序搭建过程</h2><ol><li>创建web工程，导入jar</li><li>配置xml文件 3个(web.xml，spring-mvc.xml，applicationContext.xml)<a id="more"></a>web.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvcdemo1<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">classpath*:/applicationContext.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-mvc.xml，与web.xml在同一目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动扫描且只扫描@Controller --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cakeonline"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基于注解驱动的SpringMVC --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mvc:annotation-driven enable-matrix-variables="true" / --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义JSP文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring公共配置 <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Spring上下文的注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cakeonline"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写JSP页面和Controller（@Controller,@RequestMapping,@PathVariable,@RequestParam）</li></ol><h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><h3 id="回顾MVC"><a href="#回顾MVC" class="headerlink" title="回顾MVC"></a>回顾MVC</h3><p><img src="/2020/02/27/5-SpringMVC1/02/27/5-SpringMVC1/MVC.png" class title="MVC}&lt;&#x2F;p&gt; &lt;h3 id&#x3D;SpringMVC体系结构&gt;&lt;a href&#x3D;#SpringMVC体系结构 class&#x3D;headerlink title&#x3D;SpringMVC体系结构&gt;&lt;&#x2F;a&gt;SpringMVC体系结构&lt;&#x2F;h3&gt;&lt;p&gt;SpringMVC是基于请求驱动，围绕一个核心Servlet 转发请求到对应的Controller而设计的&lt;&#x2F;p&gt; &lt;p&gt;优点：&lt;&#x2F;p&gt; &lt;ol&gt; &lt;li&gt;是一个典型的MVC构架，易学易用&lt;&#x2F;li&gt; &lt;li&gt;提供了清晰的角色划分，比如Controller、validator、handler mapping、view resolver等&lt;&#x2F;li&gt; &lt;li&gt;业务代码可重用&lt;&#x2F;li&gt; &lt;li&gt;可定制的数据绑定和验证，可定制的视图解决方案&lt;&#x2F;li&gt; &lt;li&gt;提供了一套强大又使用简单的标签库&lt;&#x2F;li&gt; &lt;li&gt;支持Restful风格&lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;p&gt;{%asset_img mvc_architecture.png mvc_architecture}&lt;&#x2F;p&gt; &lt;p&gt;步骤：&lt;&#x2F;p&gt; &lt;ol&gt; &lt;li&gt;客户端发出请求，交给DispatcherServlet处理&lt;&#x2F;li&gt; &lt;li&gt;DispatcherServlet根据请求信息及HandlerMapping的配置找到处理请求的处理器（Handler）&lt;&#x2F;li&gt; &lt;li&gt;DispatcherServlet通过HandlerAdapter对Handler进行封装，再以统一的适配器接口调用Handler&lt;&#x2F;li&gt; &lt;li&gt;处理器完成业务逻辑，返回一个ModelAndVIew给DispatcherServlet，ModelAndView包含视图逻辑名和模型数据信息&lt;&#x2F;li&gt; &lt;li&gt;DispatcherServlet借由ViewResolver完成逻辑视图名到真实视图的解析工作&lt;&#x2F;li&gt; &lt;li&gt;得到View真实视图后，DispatcherServlet就使用这个View对象对ModelAndView中的模型数据进行渲染&lt;&#x2F;li&gt; &lt;li&gt;最终客户得到响应&lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;h3 id&#x3D;生命周期&gt;&lt;a href&#x3D;#生命周期 class&#x3D;headerlink title&#x3D;生命周期&gt;&lt;&#x2F;a&gt;生命周期&lt;&#x2F;h3&gt;&lt;p&gt;{%asset_img mvc_lifestyle.png mvc_lifestyle}&lt;&#x2F;p&gt; &lt;h2 id&#x3D;控制器&gt;&lt;a href&#x3D;#控制器 class&#x3D;headerlink title&#x3D;控制器&gt;&lt;&#x2F;a&gt;控制器&lt;&#x2F;h2&gt;&lt;h3 id&#x3D;DispatcherServlet&gt;&lt;a href&#x3D;#DispatcherServlet class&#x3D;headerlink title&#x3D;DispatcherServlet&gt;&lt;&#x2F;a&gt;DispatcherServlet&lt;&#x2F;h3&gt;&lt;ol&gt; &lt;li&gt;&lt;p&gt;DispatcherServlet继承自HttpServlet，是整个SpringMVC中的前端控制器，主要负责流程控制&lt;&#x2F;p&gt; &lt;&#x2F;li&gt; &lt;li&gt;&lt;p&gt;DispatcherServlet使用了专有的Bean来处理请求和渲染视图，可以在WebApplicationContext中进行配置，这些Bean包括：&lt;&#x2F;p&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th align&#x3D;left&gt;Bean类型&lt;&#x2F;th&gt; &lt;th align&#x3D;left&gt;解释&lt;&#x2F;th&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;thead&gt; &lt;tbody&gt;&lt;tr&gt; &lt;td align&#x3D;left&gt;HandlerMapping&lt;&#x2F;td&gt; &lt;td align&#x3D;left&gt;将传入请求映射到处理器&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td align&#x3D;left&gt;HandlerAdapter&lt;&#x2F;td&gt; &lt;td align&#x3D;left&gt;将处理器包装为适配器，从而支持多种类型的处理器&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td align&#x3D;left&gt;ViewResolver&lt;&#x2F;td&gt; &lt;td align&#x3D;left&gt;将逻辑视图名解析为具体的View&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td align&#x3D;left&gt;LocaleResolver &amp; LocaleContextResolver&lt;&#x2F;td&gt; &lt;td align&#x3D;left&gt;解释客户端所在地区和其时区(本地化)，以便提供国际化的视图&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td align&#x3D;left&gt;ThemeResolver&lt;&#x2F;td&gt; &lt;td align&#x3D;left&gt;解释Web程序可用主题，比如提供个性化布局&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td align&#x3D;left&gt;MultipartResolver&lt;&#x2F;td&gt; &lt;td align&#x3D;left&gt;解释multi-part请求，比如表单里支持文件上传&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt; &lt;ol start&#x3D;3&gt; &lt;li&gt;当一个请求传进来后，DispatcherServlet会按以下顺序处理：&lt;ol&gt; &lt;li&gt;寻找 WebApplicationContext，并将 WebApplicationContext作为一个属性绑定到请求里，以便控制器或其他原件在后续中使用。默认会以DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE 键绑定到请求里&lt;&#x2F;li&gt; &lt;li&gt;将本地化解析器绑定到请求里，以便在处理这个请求时，原件可以解析到客户端的地区（为了渲染视图，准备日期等）&lt;&#x2F;li&gt; &lt;li&gt;将主题解析其绑定到请求里，让原件（如视图）决定去使用哪一种主题&lt;&#x2F;li&gt; &lt;li&gt;若指定一个multipart file解析器，会检查这个请求包含multiparts请求&lt;&#x2F;li&gt; &lt;li&gt;寻找合适的 handler。如何找到这个 handler，执行与这个 handler 关联的执行链&lt;&#x2F;li&gt; &lt;li&gt;如果返回一个 model，渲染相对应的视图&lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;h3 id&#x3D;Controller&gt;&lt;a href&#x3D;#Controller class&#x3D;headerlink title&#x3D;Controller&gt;&lt;&#x2F;a&gt;Controller&lt;&#x2F;h3&gt;&lt;ol&gt; &lt;li&gt;@Controller表明被注解的类为控制器，该类不需要继承任何Controller的基类或者引用任意的ServletAPI，当然如果需要可以使用ServletAPI&lt;&#x2F;li&gt; &lt;li&gt;spring-mvc.xml&lt;&#x2F;li&gt; &lt;li&gt;Controller类&lt;h4 id&#x3D;RequestMapping&gt;&lt;a href&#x3D;#RequestMapping class&#x3D;headerlink title&#x3D;@RequestMapping&gt;&lt;&#x2F;a&gt;@RequestMapping&lt;&#x2F;h4&gt;&lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;ul&gt; &lt;li&gt;@RequestMapping用于映射URL，该注解可以写在类级别上，也可以写在方法级别上&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;figure class&#x3D;highlight java&gt;&lt;table&gt;&lt;tr&gt;&lt;td class&#x3D;gutter&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;1&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;2&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;3&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;4&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;5&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;6&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;7&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;8&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;9&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;10&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;11&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;td class&#x3D;code&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@Controller&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(&lt;span class&#x3D;string&gt;&#x2F;user&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; &lt;span class&#x3D;class&gt;&lt;span class&#x3D;keyword&gt;class&lt;&#x2F;span&gt; &lt;span class&#x3D;title&gt;HelloController&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(&lt;span class&#x3D;string&gt;&#x2F;hello&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;function&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; String &lt;span class&#x3D;title&gt;sayHello&lt;&#x2F;span&gt;&lt;span class&#x3D;params&gt;()&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; System.out.println(&lt;span class&#x3D;string&gt;helloworld!&lt;&#x2F;span&gt;);&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;keyword&gt;return&lt;&#x2F;span&gt; &lt;span class&#x3D;string&gt;hi&lt;&#x2F;span&gt;;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;figure&gt; &lt;p&gt;相对于该路径的，上面的方法映射的URL路径是：&#x2F;user&#x2F;hello，&lt;strong&gt;推荐使用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt; &lt;figure class&#x3D;highlight java&gt;&lt;table&gt;&lt;tr&gt;&lt;td class&#x3D;gutter&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;1&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;2&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;3&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;4&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;5&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;6&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;7&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;8&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;9&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;10&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;td class&#x3D;code&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@Controller&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; &lt;span class&#x3D;class&gt;&lt;span class&#x3D;keyword&gt;class&lt;&#x2F;span&gt; &lt;span class&#x3D;title&gt;HelloController&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(&lt;span class&#x3D;string&gt;&#x2F;hello&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;function&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; String &lt;span class&#x3D;title&gt;sayHello&lt;&#x2F;span&gt;&lt;span class&#x3D;params&gt;()&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; System.out.println(&lt;span class&#x3D;string&gt;helloworld!&lt;&#x2F;span&gt;);&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;keyword&gt;return&lt;&#x2F;span&gt; &lt;span class&#x3D;string&gt;hi&lt;&#x2F;span&gt;;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;figure&gt; &lt;p&gt;直接映射方法注解上的路径，上面的方法映射的URL路径是：&#x2F;hello&lt;&#x2F;p&gt; &lt;ul&gt; &lt;li&gt;@RequestMapping中，还可以使用method来限制请求的类型，执行不同操作&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;figure class&#x3D;highlight java&gt;&lt;table&gt;&lt;tr&gt;&lt;td class&#x3D;gutter&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;1&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;2&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;3&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;4&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;5&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;6&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;7&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;8&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;9&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;10&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;11&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;td class&#x3D;code&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(value&#x3D;&lt;span class&#x3D;string&gt;add&lt;&#x2F;span&gt;, method&#x3D;RequestMethod.GET)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;function&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; String &lt;span class&#x3D;title&gt;toAdd&lt;&#x2F;span&gt;&lt;span class&#x3D;params&gt;()&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;comment&gt;&#x2F;&#x2F;数据库查询，查蛋糕类型，存入到request&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;keyword&gt;return&lt;&#x2F;span&gt; &lt;span class&#x3D;string&gt;cake&lt;&#x2F;span&gt;;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(value&#x3D;&lt;span class&#x3D;string&gt;add&lt;&#x2F;span&gt;, method&#x3D;RequestMethod.POST)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;function&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; String &lt;span class&#x3D;title&gt;add&lt;&#x2F;span&gt;&lt;span class&#x3D;params&gt;()&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;comment&gt;&#x2F;&#x2F;获取蛋糕的相关参数，插入数据库&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;keyword&gt;return&lt;&#x2F;span&gt; &lt;span class&#x3D;string&gt;list&lt;&#x2F;span&gt;;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;figure&gt; &lt;ul&gt; &lt;li&gt;URI模版是一个类似于URI的字符串，其中包含了一个或多个变量。当你将这些变量替换掉时，就变回了URI&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;p&gt;例：&#x2F;cake&#x2F;get&#x2F;3&lt;&#x2F;p&gt; &lt;figure class&#x3D;highlight java&gt;&lt;table&gt;&lt;tr&gt;&lt;td class&#x3D;gutter&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;1&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;2&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;3&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;4&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;5&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;6&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;7&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;8&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;9&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;td class&#x3D;code&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@Controller&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(&lt;span class&#x3D;string&gt;&#x2F;cake&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; &lt;span class&#x3D;class&gt;&lt;span class&#x3D;keyword&gt;class&lt;&#x2F;span&gt; &lt;span class&#x3D;title&gt;CakeController&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(value&#x3D;&lt;span class&#x3D;string&gt;get&#x2F;&amp;#123;cakeId&amp;#125;&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;function&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; String &lt;span class&#x3D;title&gt;get&lt;&#x2F;span&gt;&lt;span class&#x3D;params&gt;(@PathVariable &lt;span class&#x3D;keyword&gt;int&lt;&#x2F;span&gt; cakeId)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; System.out.println(cakeId);&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;keyword&gt;return&lt;&#x2F;span&gt; &lt;span class&#x3D;string&gt;list&lt;&#x2F;span&gt;;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;figure&gt; &lt;h4 id&#x3D;RequestParam&gt;&lt;a href&#x3D;#RequestParam class&#x3D;headerlink title&#x3D;@RequestParam&gt;&lt;&#x2F;a&gt;@RequestParam&lt;&#x2F;h4&gt;&lt;p&gt;@RequestParam将请求参数绑定到方法参法&lt;&#x2F;p&gt; &lt;figure class&#x3D;highlight java&gt;&lt;table&gt;&lt;tr&gt;&lt;td class&#x3D;gutter&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;1&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;2&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;3&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;4&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;5&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;6&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;7&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;8&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;9&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;10&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;11&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;td class&#x3D;code&gt;&lt;pre&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;meta&gt;@Controller&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; &lt;span class&#x3D;class&gt;&lt;span class&#x3D;keyword&gt;class&lt;&#x2F;span&gt; &lt;span class&#x3D;title&gt;HelloController&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;meta&gt;@RequestMapping&lt;&#x2F;span&gt;(&lt;span class&#x3D;string&gt;&#x2F;hello&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;function&gt;&lt;span class&#x3D;keyword&gt;public&lt;&#x2F;span&gt; String &lt;span class&#x3D;title&gt;sayHello&lt;&#x2F;span&gt;&lt;span class&#x3D;params&gt;(@RequestParam(value &#x3D; &lt;span class&#x3D;string&gt;name&lt;&#x2F;span&gt;, required&#x3D;&lt;span class&#x3D;keyword&gt;true&lt;&#x2F;span&gt;, defaultValue&#x3D;&lt;span class&#x3D;string&gt;1&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt; String name,&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;span class&#x3D;function&gt; @&lt;span class&#x3D;title&gt;RequestParam&lt;&#x2F;span&gt;&lt;span class&#x3D;params&gt;(value&#x3D;&lt;span class&#x3D;string&gt;pageNum&lt;&#x2F;span&gt;, defaultValue&#x3D;&lt;span class&#x3D;string&gt;1&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;span class&#x3D;keyword&gt;int&lt;&#x2F;span&gt; pageNum) &lt;&#x2F;span&gt;&amp;#123;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; System.out.println(&lt;span class&#x3D;string&gt;helloworld!&lt;&#x2F;span&gt;+name);&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &lt;span class&#x3D;keyword&gt;return&lt;&#x2F;span&gt; &lt;span class&#x3D;string&gt;hi&lt;&#x2F;span&gt;;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt; &amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;span class&#x3D;line&gt;&amp;#125;&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;figure&gt; &lt;h4 id&#x3D;RequestParam和-PathVariable的区别&gt;&lt;a href&#x3D;#RequestParam和-PathVariable的区别 class&#x3D;headerlink title&#x3D;@RequestParam和@PathVariable的区别&gt;&lt;&#x2F;a&gt;@RequestParam和@PathVariable的区别&lt;&#x2F;h4&gt;&lt;ol&gt; &lt;li&gt;@RequestParam拿到的是传统的传参方式，例：form表单&lt;&#x2F;li&gt; &lt;li&gt;@PathVariable页面请求路径中的参数，例：&#x2F;user&#x2F;login&#x2F;zs&lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;h2 id&#x3D;拦截器&gt;&lt;a href&#x3D;#拦截器 class&#x3D;headerlink title&#x3D;拦截器&gt;&lt;&#x2F;a&gt;拦截器&lt;&#x2F;h2&gt;&lt;h2 id&#x3D;文件上传&gt;&lt;a href&#x3D;#文件上传 class&#x3D;headerlink"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;程序搭建过程&quot;&gt;&lt;a href=&quot;#程序搭建过程&quot; class=&quot;headerlink&quot; title=&quot;程序搭建过程&quot;&gt;&lt;/a&gt;程序搭建过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建web工程，导入jar&lt;/li&gt;
&lt;li&gt;配置xml文件 3个(web.xml，spring-mvc.xml，applicationContext.xml)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>4-AOP</title>
    <link href="http://yoursite.com/2020/02/27/4-AOP/"/>
    <id>http://yoursite.com/2020/02/27/4-AOP/</id>
    <published>2020-02-27T02:47:49.000Z</published>
    <updated>2020-02-27T02:56:27.992Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>3-SpringEL和数据验证</title>
    <link href="http://yoursite.com/2020/02/27/3-SpringEL%E5%92%8C%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2020/02/27/3-SpringEL%E5%92%8C%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</id>
    <published>2020-02-27T02:47:28.000Z</published>
    <updated>2020-02-27T02:56:27.992Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>2-Spring_Beans和生命周期</title>
    <link href="http://yoursite.com/2020/02/27/2-Spring-Beans%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2020/02/27/2-Spring-Beans%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-02-27T02:46:48.000Z</published>
    <updated>2020-02-27T02:55:10.648Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>1-Spring介绍和IOC&amp;DI</title>
    <link href="http://yoursite.com/2020/02/27/1-Spring%E4%BB%8B%E7%BB%8D%E5%92%8CIOC-DI/"/>
    <id>http://yoursite.com/2020/02/27/1-Spring%E4%BB%8B%E7%BB%8D%E5%92%8CIOC-DI/</id>
    <published>2020-02-27T02:45:47.000Z</published>
    <updated>2020-02-27T02:54:45.747Z</updated>
    
    <content type="html"><![CDATA[<p>暂无</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;暂无&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>加速访问Github</title>
    <link href="http://yoursite.com/2020/02/26/speed-github/"/>
    <id>http://yoursite.com/2020/02/26/speed-github/</id>
    <published>2020-02-26T07:06:55.000Z</published>
    <updated>2020-02-26T13:55:27.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说一下访问慢的原因"><a href="#说一下访问慢的原因" class="headerlink" title="说一下访问慢的原因"></a>说一下访问慢的原因</h1><ol><li>由于 github.com 网站位于美国旧金山,所以初始访问 github.com 时网络寻址会比较耗费时间,这是网站打开速度慢的其中一个原因.</li><li>最初用户从浏览器中输入 github.com 网址时,浏览器并不知道这个域名对应的真实 ip 地址,先问问自己电脑认识不认识这个域名的门牌号,如果本机不认识会接着往上问,当地运行商也不认识这个域名的话,继续问上级,直到问出来 github.com 的门牌号是 192.30.253.113 为止!如此繁琐的问路过程被称之为 DNS 寻址,如果问路的时间都占用很久,那么访问网站的速度自然会很慢.</li></ol><h2 id="主域名和多个子域名"><a href="#主域名和多个子域名" class="headerlink" title="主域名和多个子域名"></a>主域名和多个子域名</h2><p>正常来说,网站的主域名下会存在多个子域名,由这些域名组合在一起提供完整的服务.</p><p>而 github.com 也不例外,其中 github.com是一级域名,也是主域名,其他的域名基本上都是二级域名或者说次域名. 所以我们不仅要告诉本机 github.com 的主域名,还要把相关的子域名也告诉本机,帮人帮到底,送福送到西! 那到哪里去查询域名和 ip 的对应关系呢?</p><a id="more"></a><h2 id="推荐几个查询域名解析的网站"><a href="#推荐几个查询域名解析的网站" class="headerlink" title="推荐几个查询域名解析的网站"></a>推荐几个查询域名解析的网站</h2><ol><li><a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a></li><li><a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a></li></ol><h2 id="体验域名查询"><a href="#体验域名查询" class="headerlink" title="体验域名查询"></a>体验域名查询</h2><p>根据查到的相关域名信息,再次查询出这些域名对应的 ip 地址,于是整理出以下内容.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#github related website</span><br><span class="line">192.30.253.113 github.com</span><br><span class="line">199.232.5.194 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.119 gist.github.com</span><br><span class="line">192.30.253.120 nodeload.github.com</span><br><span class="line">199.232.28.133 raw.github.com</span><br><span class="line">140.82.113.17 training.github.com</span><br><span class="line">192.30.253.113 www.github.com</span><br><span class="line">99.232.68.133 avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133 assets-cdn.github.com</span><br><span class="line">185.199.108.153 documentcloud.github.com</span><br><span class="line">185.199.108.153 help.github.com</span><br><span class="line">18.204.240.114 status.github.com</span><br></pre></td></tr></table></figure><h2 id="加快访问github的方法"><a href="#加快访问github的方法" class="headerlink" title="加快访问github的方法"></a>加快访问github的方法</h2><ol><li>VPN<ol><li>购买vpn，作为学生党就算了吧</li><li>使用一些免费的插件，这种就得自个搜（提醒：谷歌商店一大批免费的，哈哈哈）</li></ol></li><li>hosts<ol><li>记事本打开C:\Windows\System32\drivers\etc 路径下的hosts文件（映射文件）</li><li>找到上面推荐的解析网站  查询出自个机子适用的dns解析地址（也可以使用我整理好的）</li><li>保存退出（不能保存的请自行百度）</li><li>win+r 输入ipconfig /flushdns 刷新dns缓存</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说一下访问慢的原因&quot;&gt;&lt;a href=&quot;#说一下访问慢的原因&quot; class=&quot;headerlink&quot; title=&quot;说一下访问慢的原因&quot;&gt;&lt;/a&gt;说一下访问慢的原因&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;由于 github.com 网站位于美国旧金山,所以初始访问 github.com 时网络寻址会比较耗费时间,这是网站打开速度慢的其中一个原因.&lt;/li&gt;
&lt;li&gt;最初用户从浏览器中输入 github.com 网址时,浏览器并不知道这个域名对应的真实 ip 地址,先问问自己电脑认识不认识这个域名的门牌号,如果本机不认识会接着往上问,当地运行商也不认识这个域名的话,继续问上级,直到问出来 github.com 的门牌号是 192.30.253.113 为止!如此繁琐的问路过程被称之为 DNS 寻址,如果问路的时间都占用很久,那么访问网站的速度自然会很慢.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;主域名和多个子域名&quot;&gt;&lt;a href=&quot;#主域名和多个子域名&quot; class=&quot;headerlink&quot; title=&quot;主域名和多个子域名&quot;&gt;&lt;/a&gt;主域名和多个子域名&lt;/h2&gt;&lt;p&gt;正常来说,网站的主域名下会存在多个子域名,由这些域名组合在一起提供完整的服务.&lt;/p&gt;
&lt;p&gt;而 github.com 也不例外,其中 github.com是一级域名,也是主域名,其他的域名基本上都是二级域名或者说次域名. 所以我们不仅要告诉本机 github.com 的主域名,还要把相关的子域名也告诉本机,帮人帮到底,送福送到西! 那到哪里去查询域名和 ip 的对应关系呢?&lt;/p&gt;
    
    </summary>
    
    
      <category term="github技术" scheme="http://yoursite.com/categories/github%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>4-Hibernate一对一关联映射</title>
    <link href="http://yoursite.com/2020/02/26/4-Hibernate%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/"/>
    <id>http://yoursite.com/2020/02/26/4-Hibernate%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/</id>
    <published>2020-02-26T01:03:24.000Z</published>
    <updated>2020-02-27T04:04:08.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate一对一关联映射"><a href="#Hibernate一对一关联映射" class="headerlink" title="Hibernate一对一关联映射"></a>Hibernate一对一关联映射</h1><p>实体之间的联系：<br/></p><ol><li>一对一联系（1:1）</li><li>一对多联系（1:n）</li><li>多对多联系（m:n）</li></ol><h2 id="一对一的关联映射（主键关联方式）"><a href="#一对一的关联映射（主键关联方式）" class="headerlink" title="一对一的关联映射（主键关联方式）"></a>一对一的关联映射（主键关联方式）</h2><p><strong>主键关联：</strong>原理是两张表的主键(ID)保持一致，在获取的时候根据两种表中的ID相同来作为关系判断的标准，这样的设计好处在于我们不用添加另外的字段来维护它们之间的关系。 </p><h3 id="xml方式"><a href="#xml方式" class="headerlink" title="xml方式"></a>xml方式</h3><a id="more"></a><p>实体类<br>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//主键</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Persion.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;<span class="comment">//主键和外键，外键依赖user的主键id</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String idNumber;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.hbm.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> <span class="title">name</span></span>=<span class="string">"User"</span>&gt;</span><br><span class="line">&lt;id name=<span class="string">"id"</span> &gt;</span><br><span class="line">&lt;generator class="increment"&gt;&lt;/generator&gt;</span><br><span class="line">&lt;/id&gt;</span><br><span class="line">&lt;property name=<span class="string">"userName"</span>  /&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 主键关联方式映射与Person的一对一关系 --&gt;</span><br><span class="line">&lt;one-to-one name=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Person"</span> cascade=<span class="string">"all"</span>/&gt;</span><br><span class="line">&lt;/class&gt;</span><br></pre></td></tr></table></figure><p>Persion.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"foreign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"property"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主键关联方式映射与User的一对一关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">constrained</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idNumber"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Session session = <span class="keyword">null</span>;</span><br><span class="line">       Transaction tran = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           session = HibernateUtil.openSession();</span><br><span class="line">           tran = session.beginTransaction();<span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 新建User对象</span></span><br><span class="line">           User user = <span class="keyword">new</span> User();</span><br><span class="line">           user.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">           user.setPassword(<span class="string">"111111"</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//新建Person对象</span></span><br><span class="line">           Person person = <span class="keyword">new</span> Person();</span><br><span class="line">           person.setName(<span class="string">"张三"</span>);</span><br><span class="line">           person.setIdNumber(<span class="string">"100345199002031234"</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//建立联系</span></span><br><span class="line">           user.setPerson(person);</span><br><span class="line">           person.setUser(user);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 保存user并级联保存person</span></span><br><span class="line">           session.save(user);</span><br><span class="line"></span><br><span class="line">           tran.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           tran.rollback();<span class="comment">// 回滚事务</span></span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           session.close();<span class="comment">// 关闭session</span></span><br><span class="line">           HibernateUtil.closeSessionFactory();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="注释方法"><a href="#注释方法" class="headerlink" title="注释方法"></a>注释方法</h3><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="comment">//注解写在属性上使用的是反射机制</span></span><br><span class="line"><span class="comment">//注解写在get方法上，是setget机制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name=<span class="string">"my_gen"</span>, strategy=<span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="meta">@PrimaryKeyJoinColumn</span>(name=<span class="string">"id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Persion.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;<span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name=<span class="string">"my_gen"</span>, strategy = <span class="string">"foreign"</span>, parameters= &#123;<span class="meta">@Parameter</span>(name = <span class="string">"property"</span>, value = <span class="string">"user"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdNumber</span><span class="params">(String idNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idNumber = idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy=<span class="string">"person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类同上</p><p><strong>关于上述代码解释：</strong></p><ol><li>xml：<ol><li>通过<one-to-one> 元素配置。—–（主键表）<ol><li>ascade属性（级联属性）为 all：:对象所有操作进行级联操作  save,update,delete</li><li>ascade属性（级联属性）为 save-update :  执行保存和更改操作时进行级联操作</li><li>ascade属性（级联属性）为 delete :  执行删除操作时进行级联操作</li><li>ascade属性（级联属性）为 none : 对所有操作不进行级联操作       默认</li></ol></li><li>constrained 属性为 true，表明 PERSON 表ID为外键，参照主表USER—–（外键表）</li><li>外键表实体类配置文件中 OID 使用 foreign 生成策略。—–（外键表）</li></ol></li><li>注解：<ol><li>User端的person属性配置<ol><li>@OneToOne(cascade=CascadeType.ALL) ：指定一对一关联关系，并设置级联属性。</li><li>@PrimaryKeyJoinColumn(name=”ID”) ：指定Persion表主键列名。</li></ol></li><li>在Person端的id属性上配置主键生成策略为 foreign<br><ol><li><code>@GeneratedValue(generator=&quot;foreign&quot;)</code></li><li><code>@GenericGenerator(name=&quot;foreign&quot;,strategy=&quot;foreign&quot;,parameters={@Parameter(name=&quot;property&quot;,value=&quot;user&quot;)})</code></li></ol></li><li>在Person一端的user属性上配置一对一关联关系<br><br><code>@OneToOne(mappedBy=&quot;person&quot;)</code></li></ol></li></ol><h2 id="一对一的关联映射（唯一外键关联方式）"><a href="#一对一的关联映射（唯一外键关联方式）" class="headerlink" title="一对一的关联映射（唯一外键关联方式）"></a>一对一的关联映射（唯一外键关联方式）</h2><h3 id="xml方式-1"><a href="#xml方式-1" class="headerlink" title="xml方式"></a>xml方式</h3><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//主键，外键（外键依赖persion类的id）</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"USER"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 外键关联方式映射与Person的一对一关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">column</span>=<span class="string">"PERSONID"</span> <span class="attr">cascade</span>=<span class="string">"all"</span> <span class="attr">unique</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Persion.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Persion.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Person"</span> <span class="attr">table</span>=<span class="string">"PERSON"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idNumber"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 外键关联方式映射与User的一对一关系   property-ref:外键列对应的属性名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">property-ref</span>=<span class="string">"person"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类同上</p><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"USER"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name=<span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"PERSONID"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Persion.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"PERSON"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;<span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdNumber</span><span class="params">(String idNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idNumber = idNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy=<span class="string">"person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类同上</p><p><strong>关于上述代码解释：</strong></p><ol><li>xml<ol><li>通过<many-to-one> 元素配置。—–（外键表）<ol><li>column 属性指明外键列；</li><li>unique 属性设置为 true，表明唯一约束；</li><li>cascade 属性设置为 all，表明删除 USER 时同时删除PERSON</li><li><code>&lt;many-to-one name=&quot;person&quot; column=&quot;persionId&quot; cascade=&quot;all&quot; unique=&quot;true&quot;/&gt;</code></li></ol></li><li>通过<one-to-one> 元素配置。—–（主键表）<ol><li>property-ref 属性，表明建立了从User到Person的一对一关联关系</li><li><code>&lt;one-to-one name=&quot;user&quot; property-ref=&quot;person&quot;/&gt;</code></li></ol></li></ol></li><li>注解<ol><li>在User一端的person属性上配置。<ol><li>@OneToOne(cascade=CascadeType.ALL)</li><li>@JoinColumn(name=”PERSONID”)：指明USER表中的外键列名。</li></ol></li><li>在Person一端的user属性上配置。<ol><li>@OneToOne(mappedBy=”person”)</li></ol></li></ol></li></ol><h2 id="组合关系映射"><a href="#组合关系映射" class="headerlink" title="组合关系映射"></a>组合关系映射</h2><p>问题：</p><p>某单位职工档案管理系统的需求中，希望能够保存职工的各种联系方式，包括：家庭地址、工作地址、籍贯地址、<br>手机号、邮箱等，每个地址又需包含省、市、县、详细街道信息，应该如何实现？</p><table><thead><tr><th align="left">Contact</th><th align="left"></th></tr></thead><tbody><tr><td align="left">id : int</td><td align="left"></td></tr><tr><td align="left">email : String</td><td align="left"></td></tr><tr><td align="left">phoneNum : String</td><td align="left"></td></tr><tr><td align="left">homeAddress : Address</td><td align="left"></td></tr><tr><td align="left">workAddress : Address</td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left">Address</th><th align="left"></th></tr></thead><tbody><tr><td align="left">province : String</td><td align="left"></td></tr><tr><td align="left">city : String</td><td align="left"></td></tr><tr><td align="left">district : String</td><td align="left"></td></tr><tr><td align="left">detail : String</td><td align="left"></td></tr><tr><td align="left">数据库中只有一张contact表，如何添加？</td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left">Contact</th><th align="left"></th></tr></thead><tbody><tr><td align="left">id : int</td><td align="left"></td></tr><tr><td align="left">email : String</td><td align="left"></td></tr><tr><td align="left">phoneNum : String</td><td align="left"></td></tr><tr><td align="left">homeProvince : String</td><td align="left"></td></tr><tr><td align="left">homeCity ： String</td><td align="left"></td></tr><tr><td align="left">homeDistrict : String</td><td align="left"></td></tr><tr><td align="left">homeDetail : String</td><td align="left"></td></tr><tr><td align="left">workProvince : String</td><td align="left"></td></tr><tr><td align="left">…</td><td align="left"></td></tr></tbody></table><h3 id="xml方式："><a href="#xml方式：" class="headerlink" title="xml方式："></a>xml方式：</h3><p>Contact.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Address homeAddress;</span><br><span class="line">    <span class="keyword">private</span> Address workAddress;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Contact.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Contact"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"phoneNum"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- component映射组合关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"homeAddress"</span> <span class="attr">class</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">column</span>=<span class="string">"HOMEPROVINCE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">column</span>=<span class="string">"HOMECITY"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"district"</span> <span class="attr">column</span>=<span class="string">"HOMEDISTRICT"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"detail"</span> <span class="attr">column</span>=<span class="string">"HOMEDETAIL"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"workAddress"</span> <span class="attr">class</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">column</span>=<span class="string">"WORKPROVINCE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">column</span>=<span class="string">"WORKCITY"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"district"</span> <span class="attr">column</span>=<span class="string">"WORKDISTRICT"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"detail"</span> <span class="attr">column</span>=<span class="string">"WORKDETAIL"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Address.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;<span class="comment">//省</span></span><br><span class="line">    <span class="keyword">private</span> String city;<span class="comment">//市</span></span><br><span class="line">    <span class="keyword">private</span> String district;<span class="comment">//区</span></span><br><span class="line">    <span class="keyword">private</span> String detail;<span class="comment">//详细地址</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveContact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Session session = <span class="keyword">null</span>;</span><br><span class="line">       Transaction tran = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           session = HibernateUtil.openSession();</span><br><span class="line">           tran = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">           Contact contact = <span class="keyword">new</span> Contact();</span><br><span class="line">           contact.setPhoneNum(<span class="string">"12345678910"</span>);</span><br><span class="line">           contact.setEmail(<span class="string">"abcxxx@123.com"</span>);</span><br><span class="line">           </span><br><span class="line">           Address homeAddress = <span class="keyword">new</span> Address();</span><br><span class="line">           homeAddress.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">           homeAddress.setCity(<span class="string">"xx市"</span>);</span><br><span class="line">           homeAddress.setDistrict(<span class="string">"xx区"</span>);</span><br><span class="line">           homeAddress.setDetail(<span class="string">"xx路xx号"</span>);</span><br><span class="line">           </span><br><span class="line">           Address workAddress = <span class="keyword">new</span> Address();</span><br><span class="line">           workAddress.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">           workAddress.setCity(<span class="string">"xx市"</span>);</span><br><span class="line">           workAddress.setDistrict(<span class="string">"xx区"</span>);</span><br><span class="line">           workAddress.setDetail(<span class="string">"xx路xx号"</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//建立联系</span></span><br><span class="line">           contact.setHomeAddress(homeAddress);</span><br><span class="line">           contact.setWorkAddress(workAddress);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 保存contact同时保存地址信息</span></span><br><span class="line">           session.save(contact);</span><br><span class="line">           tran.commit();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           tran.rollback();</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           session.close();</span><br><span class="line">           HibernateUtil.closeSessionFactory();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="注解方式-1"><a href="#注解方式-1" class="headerlink" title="注解方式"></a>注解方式</h3><p>Contact.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Address homeAddress;</span><br><span class="line">    <span class="keyword">private</span> Address workAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator=<span class="string">"my_gen"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"my_gen"</span>, strategy = <span class="string">"increment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhoneNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phoneNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneNum</span><span class="params">(String phoneNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phoneNum = phoneNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="meta">@AttributeOverrides</span>(value=&#123;</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"province"</span>, </span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMEPROVINCE"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"city"</span>,</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMECITY"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMEDISTRICT"</span>),</span><br><span class="line">                    name = <span class="string">"district"</span>),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"HOMEDETAIL"</span>),</span><br><span class="line">                    name = <span class="string">"detail"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getHomeAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> homeAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHomeAddress</span><span class="params">(Address homeAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.homeAddress = homeAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span>  <span class="comment">//注意与嵌入式类注解@Embeddable区分</span></span><br><span class="line">    <span class="meta">@AttributeOverrides</span>(value=&#123;</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"province"</span>, </span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKPROVINCE"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    name = <span class="string">"city"</span>,</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKCITY"</span>)),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKDISTRICT"</span>),</span><br><span class="line">                    name = <span class="string">"district"</span>),</span><br><span class="line">            <span class="meta">@AttributeOverride</span>(</span><br><span class="line">                    column = <span class="meta">@Column</span>(name=<span class="string">"WORKDETAIL"</span>),</span><br><span class="line">                    name = <span class="string">"detail"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getWorkAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkAddress</span><span class="params">(Address workAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.workAddress = workAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span><span class="comment">//指明为嵌入式类，不需要单独进行映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;<span class="comment">//省</span></span><br><span class="line">    <span class="keyword">private</span> String city;<span class="comment">//市</span></span><br><span class="line">    <span class="keyword">private</span> String district;<span class="comment">//区</span></span><br><span class="line">    <span class="keyword">private</span> String detail;<span class="comment">//详细地址</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类同上</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate一对一关联映射&quot;&gt;&lt;a href=&quot;#Hibernate一对一关联映射&quot; class=&quot;headerlink&quot; title=&quot;Hibernate一对一关联映射&quot;&gt;&lt;/a&gt;Hibernate一对一关联映射&lt;/h1&gt;&lt;p&gt;实体之间的联系：&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一对一联系（1:1）&lt;/li&gt;
&lt;li&gt;一对多联系（1:n）&lt;/li&gt;
&lt;li&gt;多对多联系（m:n）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;一对一的关联映射（主键关联方式）&quot;&gt;&lt;a href=&quot;#一对一的关联映射（主键关联方式）&quot; class=&quot;headerlink&quot; title=&quot;一对一的关联映射（主键关联方式）&quot;&gt;&lt;/a&gt;一对一的关联映射（主键关联方式）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;主键关联：&lt;/strong&gt;原理是两张表的主键(ID)保持一致，在获取的时候根据两种表中的ID相同来作为关系判断的标准，这样的设计好处在于我们不用添加另外的字段来维护它们之间的关系。 &lt;/p&gt;
&lt;h3 id=&quot;xml方式&quot;&gt;&lt;a href=&quot;#xml方式&quot; class=&quot;headerlink&quot; title=&quot;xml方式&quot;&gt;&lt;/a&gt;xml方式&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>3.Hibernate继承关系映射</title>
    <link href="http://yoursite.com/2020/02/25/3-Hibernate%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/"/>
    <id>http://yoursite.com/2020/02/25/3-Hibernate%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</id>
    <published>2020-02-25T13:19:02.000Z</published>
    <updated>2020-02-27T02:55:45.428Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size=5 color=#ff0000>每个具体的类实现继承关系映射</strong></font></p><a id="more"></a><p><strong><font size=5 color=#ff0000>父类对应一个表的继承关系映射</strong></font></p><p><strong><font size=5 color=#ff0000>每个类对应一个表的继承关系映射</strong></font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;font size=5 color=#ff0000&gt;每个具体的类实现继承关系映射&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>2.Hibernate的单实体映射</title>
    <link href="http://yoursite.com/2020/02/25/2-Hibernate%E7%9A%84%E5%8D%95%E5%AE%9E%E4%BD%93%E6%98%A0%E5%B0%84/"/>
    <id>http://yoursite.com/2020/02/25/2-Hibernate%E7%9A%84%E5%8D%95%E5%AE%9E%E4%BD%93%E6%98%A0%E5%B0%84/</id>
    <published>2020-02-25T05:05:21.000Z</published>
    <updated>2020-02-27T02:54:54.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate的单实体映射"><a href="#Hibernate的单实体映射" class="headerlink" title="Hibernate的单实体映射"></a>Hibernate的单实体映射</h1><h2 id="单实体的属性映射"><a href="#单实体的属性映射" class="headerlink" title="单实体的属性映射"></a><font size=5 color=#ff0000>单实体的属性映射</font></h2><ol><li><p>setter 和 getter 方法优点：有效控制属性的访问权限。<br></p></li><li><p>property元素的 access 属性；field : 不需要getset方法，通过Java反射机制绕过hibernate直接访问属性值。<br><code>&lt;property name=&quot;userName&quot; access=&quot;field&quot; /&gt;</code></p></li><li><p>实体映射技巧：实体类属性与表字段不对称时，可以在 setter 和 getter 方法中加入程序逻辑<br><br> 例：User 类中没有 username 属性，而是改为了 firstName 和 lastName 两个属性</p><pre><code>public String getUserName() {    return firstName + &quot; &quot; + lastName;}public void setUserName(String userName) {    String[] strName = userName.split(&quot; &quot;);    this.firstName = strName[0];    this.lastName = strName[1];}</code></pre></li></ol><a id="more"></a><ol start="4"><li><p>特殊需求：<br> 例：User 需要订单总额属性，但数据库表中没有这个字段，在property元素的 formula 属性设置查询语句</p><pre><code>&lt;property name=&quot;totalPrice&quot; formula=&quot;(select sum(o.price) from orders as o where o.userId=id)&quot;/&gt;</code></pre></li><li><p>控制持久化类的insert和update</p></li></ol><table><thead><tr><th align="left">映射属性</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">&lt;property&gt;元素的 insert 属性</td><td align="left">insert语句中是否包含该属性，默认值为true</td></tr><tr><td align="left">&lt;property&gt;元素的 update 属性</td><td align="left">update语句中是否包含该属性，默认值为true</td></tr><tr><td align="left">&lt;class&gt;元素的 mutable 属性</td><td align="left">等价于所有property节点的update属性，默认值为true</td></tr><tr><td align="left">&lt;class&gt;元素的 dynamic-insert 属性</td><td align="left">值为true等价于所有的property元素dynamic-insert属性为true</td></tr><tr><td align="left">&lt;class&gt;元素的 dynamic-update 属性</td><td align="left">值为true等价于所有的property元素dynamic-update属性为true</td></tr></tbody></table><p><em>注：</em><br><br>    1. 会过滤过值为null的属性<br><br>    2. 如果在一个表有很多字段的时候,在做初次insert的时候有比较多的字段为空值,或者经常update某少部分字段,应该在配置文件的<class>元素上将dynamic-insert和dynamic-update设置为true.其默认值都为false.<br><br>    3. dynamic-insert，dynamic-update，提升了数据库的效率，只对需要插入修改的数据进行变动<br></p><h2 id="单实体的对象标识符映射"><a href="#单实体的对象标识符映射" class="headerlink" title="单实体的对象标识符映射"></a><font size=5 color=#ff0000>单实体的对象标识符映射</font></h2><p>Java程序中区分不同对象：</p><ol><li>“==” 比较两个变量引用的内存地址是否相同；</li><li>equals可以比较两个变量引用的对象的值是否相同。</li><li>用户自定义的类也可以覆盖Object的equals方法实现对象按值进行比较</li><li>Hibernate 采用对象标识符（OID）区分对象。</li></ol><p><img src="https://i.imgur.com/GoQES5W.png" alt=""></p><h2 id="使用注解映射单实体"><a href="#使用注解映射单实体" class="headerlink" title="使用注解映射单实体"></a><font size=5 color=#ff0000>使用注解映射单实体</font></h2><p>User.java类：</p><pre><code>@Entity                                //声明一个实体类。@Table(name=&quot;USER&quot;)                    //为实体类指定对应的数据库表@DynamicInsert(true)@DynamicUpdate(true)public class User {    @Id                       //声明实体类的OID属性    @GeneratedValue(generator=&quot;my_gen&quot;)        //声明OID的生成策略    @GenericGenerator(name = &quot;my_gen&quot;, strategy = &quot;increment&quot;)    //使用Hibernate提供的生成策略    private int id;    @Column(name=&quot;USERNAME&quot;, insertable=true)    private String userName;    @Access(AccessType.FIELD)    private String password;    @Formula(value = &quot;(select sum(o.price) from orders as o where o.userid=id)&quot;)//查询语句    private Double totalPrice;    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getUserName() {        return userName;    }    public void setUserName(String userName) {        this.userName = userName;    }    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public Double getTotalPrice() {        return totalPrice;    }    public void setTotalPrice(Double totalPrice) {        this.totalPrice = totalPrice;    }}</code></pre><p>@Column(name=”columnName”) ：将属性映射到列。<br/></p><ol><li>name=”columnName”    字段名称；<br/></li><li>unique=false            是否在该字段上设置唯一约束；<br/></li><li>nullable=true            字段是否能为空；<br/></li><li>insertable=true        控制 insert语句；<br/></li><li>updatable=true        控制 update语句；<br/></li><li>length=255            指定字段长度。<br/></li></ol><p>@Access(AccessType.PROPERTY)：<br/></p><ol><li>通过 getter 和 setter 方法访问实体类的属性；<br/></li><li>需要在 getter 方法上定义字段的属性。<br/></li></ol><p>@Access(AccessType.FIELD)：<br/></p><ol><li>直接访问实体类的属性，可以不定义 getter 和 setter 方法，但是需要将变量定义为public；<br/></li><li>需要在变量上定义字段的属性。<br/></li></ol><p>@Formula：将属性映射到SQL语句。<br/><br><code>@Formula(value = &quot;(select sum(o.price) from                 orders as o where o.userid=id)&quot;)</code></p><p>@DynamicInsert：动态生成 INSERT 语句。<br/></p><p>@DynamicUpdate：动态生成 UPDATE 语句。<br/></p><h2 id="使用注解和xml方式的区别："><a href="#使用注解和xml方式的区别：" class="headerlink" title="使用注解和xml方式的区别："></a><font color=#0000FF size=10 >使用注解和xml方式的区别：</font></h2><ol><li><p><font color=#0000FF size=4 >hibernate.hbm.xml 文件中把引用：xxx.hbm.xml改为引用实体类：</font></p><p> 即把：&lt;mapping resource=”com/db/entity/Person.hbm.xml”/&gt;改为：&lt;mapping class=”com.db.entity.Person” /&gt;</p></li><li><p><font color=#0000FF size=4 >注解方式不需要在xxx.hbm.xml把实体类与表进行映射。而采用在实体类中进行注解。</font></p><ol><li>实体类属性注解的时候，都注解在<font color=#ff0000>get方法前</font></li><li>如果在实体类中某些属性不注解：（属性和get都不写注解），默认为表字段名与实体类属性名一致。</li><li>如果实体类的某个成员属性不需要存入数据库中，使用@Transient 进行注解就可以了。即类似于：(xxx.hbm.Xml配置中的某些字段不写(就是不需要对这个成员属性进行映射))</li><li>表名称可以在实体类前进行注解。</li><li>所有这些注解在：javax.persistence包下。而不是在hibernate包中。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate的单实体映射&quot;&gt;&lt;a href=&quot;#Hibernate的单实体映射&quot; class=&quot;headerlink&quot; title=&quot;Hibernate的单实体映射&quot;&gt;&lt;/a&gt;Hibernate的单实体映射&lt;/h1&gt;&lt;h2 id=&quot;单实体的属性映射&quot;&gt;&lt;a href=&quot;#单实体的属性映射&quot; class=&quot;headerlink&quot; title=&quot;单实体的属性映射&quot;&gt;&lt;/a&gt;&lt;font size=5 color=#ff0000&gt;单实体的属性映射&lt;/font&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;setter 和 getter 方法优点：有效控制属性的访问权限。&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;property元素的 access 属性；field : 不需要getset方法，通过Java反射机制绕过hibernate直接访问属性值。&lt;br&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;userName&amp;quot; access=&amp;quot;field&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实体映射技巧：实体类属性与表字段不对称时，可以在 setter 和 getter 方法中加入程序逻辑&lt;br&gt;&lt;br&gt; 例：User 类中没有 username 属性，而是改为了 firstName 和 lastName 两个属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public String getUserName() {
    return firstName + &amp;quot; &amp;quot; + lastName;
}

public void setUserName(String userName) {
    String[] strName = userName.split(&amp;quot; &amp;quot;);
    this.firstName = strName[0];
    this.lastName = strName[1];
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
  <entry>
    <title>1.Hibernate框架的搭建</title>
    <link href="http://yoursite.com/2020/02/25/1-Hibernate%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/02/25/1-Hibernate%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2020-02-25T04:06:04.000Z</published>
    <updated>2020-02-27T02:54:17.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate框架的搭建"><a href="#Hibernate框架的搭建" class="headerlink" title="Hibernate框架的搭建"></a>Hibernate框架的搭建</h1><h2 id="三层体系结构"><a href="#三层体系结构" class="headerlink" title="三层体系结构"></a>三层体系结构</h2><p><img src="https://i.imgur.com/XOwibmV.png" alt=""></p><ol><li>定义：将系统的组件<strong>分隔到不同的层</strong>中，每一层中的组件应保持内聚性； 每一层都应与它下面的各层保持松散耦合。<br></li><li>层与层之间存在自上而下的<strong>依赖关系</strong>，即上层组件会访问下层组件的API，而下层组件不应该依赖上层组件。<br></li><li>每个层对上层<strong>公开AP</strong>I，但具体的实现细节对外透明。当某一层的实现发生变化，只要它的API不变，不会影响其他层的实现。</li><li>持久层：将数据访问细节和业务逻辑分开（也就是在业务逻辑层和数据库层新添持久层）</li><li>持久化：将程序数据在瞬时状态和持久化状态之间转换的机制<ol><li>瞬时状态：保存在内存中的数据</li><li>持久状态：保存在数据库（磁盘）的程序数据</li></ol></li><li>持久层的作用：为业务逻辑层提供面向对象的API，<strong><em>使业务逻辑层可以专注于实现业务逻辑</em></strong></li><li>持久层的目标：<ol><li>代码可重用性高，能够完成对象持久化操作；</li><li>支持多种数据库平台；</li><li>具有相对独立性，当持久层发生变化时，不会影响上层实现。</li></ol></li><li>Hibernate是持久化层框架。</li></ol><a id="more"></a><h2 id="软件的模型及ORM"><a href="#软件的模型及ORM" class="headerlink" title="软件的模型及ORM"></a>软件的模型及ORM</h2><p><strong>不同类型的模型：</strong></p><p>分析阶段–创建概念模型<br/><br>设计阶段–域模型（面向对象）和数据模型（面向关系）——形成<strong>对象关系映射（ORM）</strong></p><p>通过ORM模式在操作实体对象的时候，就不需要再去和复杂的 SQL语句打交道，只需简单的操作实体对象的属性和方法</p><h2 id="Hibernate介绍"><a href="#Hibernate介绍" class="headerlink" title="Hibernate介绍"></a>Hibernate介绍</h2><ol><li>在分层体系结构中Hibernate位于持久化层，是完成对象持久化的持久化层框架；<br/></li><li>Hibernate是连接Java应用程序和关系型数据库的框架，能够建立对象模型和关系数据模型之间的映射，是一种自动ORM框架；<br/></li><li>Hibernate是对JDBC API的封装，是JDBC轻量级封装框架。<br/></li></ol><h2 id="第一个Hibernate程序"><a href="#第一个Hibernate程序" class="headerlink" title="第一个Hibernate程序"></a>第一个Hibernate程序</h2><h3 id="1-安装Eclipse、Mysql；"><a href="#1-安装Eclipse、Mysql；" class="headerlink" title="1.安装Eclipse、Mysql；"></a>1.安装Eclipse、Mysql；</h3><h3 id="2-下载Hibernate，并解压缩-获得jar包；"><a href="#2-下载Hibernate，并解压缩-获得jar包；" class="headerlink" title="2.下载Hibernate，并解压缩,获得jar包；"></a>2.下载Hibernate，并解压缩,获得jar包；</h3><h3 id="3-使用Eclipse创建新的项目；"><a href="#3-使用Eclipse创建新的项目；" class="headerlink" title="3.使用Eclipse创建新的项目；"></a>3.使用Eclipse创建新的项目；</h3><h3 id="4-引入Hibernate及其依赖库（jar包）；"><a href="#4-引入Hibernate及其依赖库（jar包）；" class="headerlink" title="4.引入Hibernate及其依赖库（jar包）；"></a>4.引入Hibernate及其依赖库（jar包）；</h3><h3 id="5-引入Mysql数据库驱动包；"><a href="#5-引入Mysql数据库驱动包；" class="headerlink" title="5.引入Mysql数据库驱动包；"></a>5.引入Mysql数据库驱动包；</h3><h3 id="6-编写Hibernate配置文件-hibernate-cfg-xml-；"><a href="#6-编写Hibernate配置文件-hibernate-cfg-xml-；" class="headerlink" title="6.编写Hibernate配置文件(hibernate.cfg.xml)；"></a>6.<font color=#FF0000 size=5 >编写Hibernate配置文件(hibernate.cfg.xml)；</font></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span> <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.characterEncoding"</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/hibernate/entity/Customer.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-创建Java持久化类XXX-java；"><a href="#7-创建Java持久化类XXX-java；" class="headerlink" title="7. 创建Java持久化类XXX.java；"></a>7. <font color=#FF0000 size=5 >创建Java持久化类XXX.java；</font></h3><p><em>持久化类与数据库之间是一一对应关系</em><br/><br><em>Custom.java文件：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">/*set，get方法*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-编写持久化类的映射配置文件XXX-hbm-xml；"><a href="#8-编写持久化类的映射配置文件XXX-hbm-xml；" class="headerlink" title="8. 编写持久化类的映射配置文件XXX.hbm.xml；"></a>8. <font color=#FF0000 size=5 >编写持久化类的映射配置文件XXX.hbm.xml；</font></h3><p>Customer.hbm.xml文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;hibernate.sourceforge.net&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-mapping package&#x3D;&quot;com.hibernate.entity&quot;&gt;</span><br><span class="line">&lt;class name&#x3D;&quot;Customer&quot; table&#x3D;&quot;customer&quot;&gt;</span><br><span class="line">&lt;id name&#x3D;&quot;id&quot; type&#x3D;&quot;int&quot; column&#x3D;&quot;id&quot;&gt;</span><br><span class="line">&lt;generator class&#x3D;&quot;native&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;id&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name&#x3D;&quot;name&quot; not-null&#x3D;&quot;true&quot; type&#x3D;&quot;java.lang.String&quot; column&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;sex&quot; type&#x3D;&quot;int&quot; column&#x3D;&quot;sex&quot; &#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;age&quot; type&#x3D;&quot;int&quot; column&#x3D;&quot;age&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h4 id="介绍配置文件"><a href="#介绍配置文件" class="headerlink" title="介绍配置文件"></a>介绍配置文件</h4><ol><li><p>class元素指定类与表之间的映射</p><ol><li>name：类名</li><li>table：对应的表名</li></ol></li><li><p>id子元素设定持久化类的OID和表的主键的映射关系</p><ol><li>column：指定表字段的名称</li><li>generator：元素指定OID的生成器<ol><li>increment：采用 Hibernate 数值递增的方式；（不适合集群情况）</li><li>identity：采用数据库提供的自增长方式；（需设置数据库自增字段）</li><li>assigned：主键由应用逻辑产生；（自个设置ID）</li><li>native：自动选择合适的标识符生成器；</li></ol></li></ol></li><li><p>property 子元素设定类的其他属性和表的字段的映射关系</p><ol><li>name：对应类的属性名称；</li><li>type：指定属性的类型；</li><li>column：指定表字段的名称；</li><li>not-null：指定属性是否允许为空。</li></ol></li><li><p><font color=#FF0000 size=5 >使用Hibernate API 完成对象的持久化。</font><br></p></li></ol><h4 id="HibernateUtil工具类"><a href="#HibernateUtil工具类" class="headerlink" title="HibernateUtil工具类"></a>HibernateUtil工具类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class HibernateUtil &#123;</span><br><span class="line">&#x2F;&#x2F;SessionFactory是线程安全的，多个应用线程间进行共享，一般整个应用有且只有一个SessionFactory</span><br><span class="line">private static SessionFactory sessionFactory &#x3D; null;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 静态初始化 Hibernate：创建 StandardServiceRegistry 实例（标准注册服务）</span><br><span class="line"> *&#x2F;</span><br><span class="line">static &#123;</span><br><span class="line">StandardServiceRegistry registry &#x3D; new StandardServiceRegistryBuilder()&#x2F;&#x2F;创建 StandardServiceRegistryBuilder 实例（标准注册服务生成器）</span><br><span class="line">.configure()&#x2F;&#x2F;从 hibernate.cfg.xml 配置文件中读取配置信息</span><br><span class="line">.build();&#x2F;&#x2F;构建 StandardServiceRegistry实例（标准注册服务）</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 2 创建 SessionFactory 实例（会话工厂）</span><br><span class="line">&#x2F;&#x2F; 2.1 根据标准注册服务创建一个 MetadataSources 实例（元数据资源集）</span><br><span class="line">&#x2F;&#x2F; 2.2 构建元数据</span><br><span class="line">&#x2F;&#x2F; 2.3 生成SessionFactory 实例（会话工厂）</span><br><span class="line">sessionFactory &#x3D; new MetadataSources(registry)</span><br><span class="line">.buildMetadata().buildSessionFactory();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">&#x2F;&#x2F; 2.4 创建失败手动释放 StandardServiceRegistry</span><br><span class="line">StandardServiceRegistryBuilder.destroy(registry);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static SessionFactory getSessionFactory() &#123;</span><br><span class="line">return sessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void closeSessionFactory() &#123;</span><br><span class="line">sessionFactory.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类test-java"><a href="#测试类test-java" class="headerlink" title="测试类test.java"></a>测试类test.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Session session &#x3D; HibernateUtil.getSessionFactory().openSession();&#x2F;&#x2F;打开Session</span><br><span class="line">Transaction tx &#x3D; session.beginTransaction();&#x2F;&#x2F;开始一个事务</span><br><span class="line">Customer customer &#x3D; new Customer();&#x2F;&#x2F;创建需要持久化的对象</span><br><span class="line">customer.setName(&quot;胡宗南&quot;);</span><br><span class="line">customer.setSex(2);</span><br><span class="line">customer.setAge(30);</span><br><span class="line">session.save(customer); &#x2F;&#x2F;保存</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Customer customer2&#x3D;session.get(Customer.class, new Integer(1));&#x2F;&#x2F;查询</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;customer2.setName(&quot;李四&quot;);&#x2F;&#x2F;修改</span><br><span class="line">&#x2F;&#x2F;session.update(customer2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;session.delete(customer2);&#x2F;&#x2F;删除</span><br><span class="line"></span><br><span class="line">tx.commit();&#x2F;&#x2F;提交事务</span><br><span class="line">session.close();关闭 Session,SessionFactory</span><br><span class="line">HibernateUtil.closeSessionFactory();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate框架的搭建&quot;&gt;&lt;a href=&quot;#Hibernate框架的搭建&quot; class=&quot;headerlink&quot; title=&quot;Hibernate框架的搭建&quot;&gt;&lt;/a&gt;Hibernate框架的搭建&lt;/h1&gt;&lt;h2 id=&quot;三层体系结构&quot;&gt;&lt;a href=&quot;#三层体系结构&quot; class=&quot;headerlink&quot; title=&quot;三层体系结构&quot;&gt;&lt;/a&gt;三层体系结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XOwibmV.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义：将系统的组件&lt;strong&gt;分隔到不同的层&lt;/strong&gt;中，每一层中的组件应保持内聚性； 每一层都应与它下面的各层保持松散耦合。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;层与层之间存在自上而下的&lt;strong&gt;依赖关系&lt;/strong&gt;，即上层组件会访问下层组件的API，而下层组件不应该依赖上层组件。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;每个层对上层&lt;strong&gt;公开AP&lt;/strong&gt;I，但具体的实现细节对外透明。当某一层的实现发生变化，只要它的API不变，不会影响其他层的实现。&lt;/li&gt;
&lt;li&gt;持久层：将数据访问细节和业务逻辑分开（也就是在业务逻辑层和数据库层新添持久层）&lt;/li&gt;
&lt;li&gt;持久化：将程序数据在瞬时状态和持久化状态之间转换的机制&lt;ol&gt;
&lt;li&gt;瞬时状态：保存在内存中的数据&lt;/li&gt;
&lt;li&gt;持久状态：保存在数据库（磁盘）的程序数据&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;持久层的作用：为业务逻辑层提供面向对象的API，&lt;strong&gt;&lt;em&gt;使业务逻辑层可以专注于实现业务逻辑&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;持久层的目标：&lt;ol&gt;
&lt;li&gt;代码可重用性高，能够完成对象持久化操作；&lt;/li&gt;
&lt;li&gt;支持多种数据库平台；&lt;/li&gt;
&lt;li&gt;具有相对独立性，当持久层发生变化时，不会影响上层实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Hibernate是持久化层框架。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="mysterious" scheme="http://yoursite.com/tags/mysterious/"/>
    
  </entry>
  
</feed>
